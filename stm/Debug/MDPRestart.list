
MDPRestart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  0800ebc8  0800ebc8  0000fbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fba8  0800fba8  00011200  2**0
                  CONTENTS
  4 .ARM          00000008  0800fba8  0800fba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbb0  0800fbb0  00011200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbb0  0800fbb0  00010bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fbb4  0800fbb4  00010bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800fbb8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011200  2**0
                  CONTENTS
 10 .bss          0000523c  20000200  20000200  00011200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000543c  2000543c  00011200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da08  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d7  00000000  00000000  0002ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  00032d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159f  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000058e3  00000000  00000000  00035e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f954  00000000  00000000  0003b742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaa46  00000000  00000000  0005b096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145adc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008854  00000000  00000000  00145b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014e374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ebac 	.word	0x0800ebac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800ebac 	.word	0x0800ebac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000ef4:	2368      	movs	r3, #104	@ 0x68
 8000ef6:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000ef8:	7dbb      	ldrb	r3, [r7, #22]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	b299      	uxth	r1, r3
 8000f00:	230a      	movs	r3, #10
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2301      	movs	r3, #1
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	f107 0315 	add.w	r3, r7, #21
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	227f      	movs	r2, #127	@ 0x7f
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f004 fa90 	bl	8005438 <HAL_I2C_Mem_Write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b088      	sub	sp, #32
 8000f2a:	af04      	add	r7, sp, #16
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	4608      	mov	r0, r1
 8000f30:	4611      	mov	r1, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	4603      	mov	r3, r0
 8000f36:	70fb      	strb	r3, [r7, #3]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70bb      	strb	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f44:	2368      	movs	r3, #104	@ 0x68
 8000f46:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	b299      	uxth	r1, r3
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	230a      	movs	r3, #10
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	1c7b      	adds	r3, r7, #1
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f004 fa68 	bl	8005438 <HAL_I2C_Mem_Write>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <ICM20948_init>:
	}

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	70fb      	strb	r3, [r7, #3]
 8000f82:	4613      	mov	r3, r2
 8000f84:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffa1 	bl	8000ed8 <_ICM20948_SelectUserBank>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8000f9a:	78f9      	ldrb	r1, [r7, #3]
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	2206      	movs	r2, #6
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffc0 	bl	8000f26 <_ICM20948_WriteByte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8000faa:	20c8      	movs	r0, #200	@ 0xc8
 8000fac:	f003 f950 	bl	8004250 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8000fb0:	78f9      	ldrb	r1, [r7, #3]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2206      	movs	r2, #6
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb5 	bl	8000f26 <_ICM20948_WriteByte>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8000fc0:	78f9      	ldrb	r1, [r7, #3]
 8000fc2:	2338      	movs	r3, #56	@ 0x38
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffad 	bl	8000f26 <_ICM20948_WriteByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff7e 	bl	8000ed8 <_ICM20948_SelectUserBank>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8000fe0:	78bb      	ldrb	r3, [r7, #2]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	f043 0319 	orr.w	r3, r3, #25
 8000fea:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	78f9      	ldrb	r1, [r7, #3]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff97 	bl	8000f26 <_ICM20948_WriteByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 8000ffc:	78f9      	ldrb	r1, [r7, #3]
 8000ffe:	2304      	movs	r3, #4
 8001000:	2200      	movs	r2, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff8f 	bl	8000f26 <_ICM20948_WriteByte>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff60 	bl	8000ed8 <_ICM20948_SelectUserBank>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800101c:	78f9      	ldrb	r1, [r7, #3]
 800101e:	2302      	movs	r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff7f 	bl	8000f26 <_ICM20948_WriteByte>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <isQueueEmpty>:
static uint32_t motorQueue[MOTOR_QUEUE_SIZE];  // Command queue
static int front = -1, rear = -1;

// Check if queue is empty
bool isQueueEmpty()
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
    return (front == -1);
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <isQueueEmpty+0x20>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <PushToQueue_MTR_Cmd>:

// Push command into queue
bool PushToQueue_MTR_Cmd(uint32_t *cmd)  // Accepts a pointer
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    if ((rear + 1) % MOTOR_QUEUE_SIZE == front) {
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <PushToQueue_MTR_Cmd+0x7c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1c59      	adds	r1, r3, #1
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <PushToQueue_MTR_Cmd+0x80>)
 8001068:	fb83 2301 	smull	r2, r3, r3, r1
 800106c:	10da      	asrs	r2, r3, #3
 800106e:	17cb      	asrs	r3, r1, #31
 8001070:	1ad2      	subs	r2, r2, r3
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	1aca      	subs	r2, r1, r3
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <PushToQueue_MTR_Cmd+0x84>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d101      	bne.n	8001088 <PushToQueue_MTR_Cmd+0x30>
        return false; // Queue is full
 8001084:	2300      	movs	r3, #0
 8001086:	e01f      	b.n	80010c8 <PushToQueue_MTR_Cmd+0x70>
    }

    if (front == -1) {
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <PushToQueue_MTR_Cmd+0x84>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001090:	d102      	bne.n	8001098 <PushToQueue_MTR_Cmd+0x40>
        front = 0;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <PushToQueue_MTR_Cmd+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
    }

    rear = (rear + 1) % MOTOR_QUEUE_SIZE;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <PushToQueue_MTR_Cmd+0x7c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c59      	adds	r1, r3, #1
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <PushToQueue_MTR_Cmd+0x80>)
 80010a0:	fb83 2301 	smull	r2, r3, r3, r1
 80010a4:	10da      	asrs	r2, r3, #3
 80010a6:	17cb      	asrs	r3, r1, #31
 80010a8:	1ad2      	subs	r2, r2, r3
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	1aca      	subs	r2, r1, r3
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <PushToQueue_MTR_Cmd+0x7c>)
 80010b6:	601a      	str	r2, [r3, #0]
    motorQueue[rear] = *cmd;  // Dereference pointer
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <PushToQueue_MTR_Cmd+0x7c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <PushToQueue_MTR_Cmd+0x88>)
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return true;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000004 	.word	0x20000004
 80010d8:	66666667 	.word	0x66666667
 80010dc:	20000000 	.word	0x20000000
 80010e0:	2000021c 	.word	0x2000021c

080010e4 <PopFromQueue_MTR_Cmd>:

// Pop command from queue
bool PopFromQueue_MTR_Cmd(uint32_t *cmd)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    if (isQueueEmpty()) {
 80010ec:	f7ff ffa2 	bl	8001034 <isQueueEmpty>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <PopFromQueue_MTR_Cmd+0x16>
        return false;  // Queue is empty
 80010f6:	2300      	movs	r3, #0
 80010f8:	e026      	b.n	8001148 <PopFromQueue_MTR_Cmd+0x64>
    }

    *cmd = motorQueue[front];
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <PopFromQueue_MTR_Cmd+0x6c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <PopFromQueue_MTR_Cmd+0x70>)
 8001100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]

    if (front == rear) {
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <PopFromQueue_MTR_Cmd+0x6c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <PopFromQueue_MTR_Cmd+0x74>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d108      	bne.n	8001126 <PopFromQueue_MTR_Cmd+0x42>
        front = rear = -1;  // Reset queue if empty
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <PopFromQueue_MTR_Cmd+0x74>)
 8001116:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <PopFromQueue_MTR_Cmd+0x74>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <PopFromQueue_MTR_Cmd+0x6c>)
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e00f      	b.n	8001146 <PopFromQueue_MTR_Cmd+0x62>
    } else {
        front = (front + 1) % MOTOR_QUEUE_SIZE;
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <PopFromQueue_MTR_Cmd+0x6c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1c59      	adds	r1, r3, #1
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <PopFromQueue_MTR_Cmd+0x78>)
 800112e:	fb83 2301 	smull	r2, r3, r3, r1
 8001132:	10da      	asrs	r2, r3, #3
 8001134:	17cb      	asrs	r3, r1, #31
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	1aca      	subs	r2, r1, r3
 8001142:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <PopFromQueue_MTR_Cmd+0x6c>)
 8001144:	601a      	str	r2, [r3, #0]
    }

    return true;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	2000021c 	.word	0x2000021c
 8001158:	20000004 	.word	0x20000004
 800115c:	66666667 	.word	0x66666667

08001160 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001164:	f003 f802 	bl	800416c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001168:	f000 f8de 	bl	8001328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800116c:	f000 fb9e 	bl	80018ac <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001170:	f000 fb72 	bl	8001858 <MX_USART3_UART_Init>
	MX_TIM8_Init();
 8001174:	f000 fae0 	bl	8001738 <MX_TIM8_Init>
	MX_TIM2_Init();
 8001178:	f000 fa36 	bl	80015e8 <MX_TIM2_Init>
	MX_TIM1_Init();
 800117c:	f000 f9b2 	bl	80014e4 <MX_TIM1_Init>
	MX_I2C1_Init();
 8001180:	f000 f982 	bl	8001488 <MX_I2C1_Init>
	MX_TIM4_Init();
 8001184:	f000 fa84 	bl	8001690 <MX_TIM4_Init>
	MX_ADC1_Init();
 8001188:	f000 f92c 	bl	80013e4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 800118c:	f002 fa3e 	bl	800360c <OLED_Init>
	Start_RPI_Comm();
 8001190:	f000 fc56 	bl	8001a40 <Start_RPI_Comm>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Left Motor PWM
 8001194:	2100      	movs	r1, #0
 8001196:	4842      	ldr	r0, [pc, #264]	@ (80012a0 <main+0x140>)
 8001198:	f005 fcfe 	bl	8006b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); // Right Motor PWM
 800119c:	2108      	movs	r1, #8
 800119e:	4840      	ldr	r0, [pc, #256]	@ (80012a0 <main+0x140>)
 80011a0:	f005 fcfa 	bl	8006b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo Motor PWM
 80011a4:	210c      	movs	r1, #12
 80011a6:	483f      	ldr	r0, [pc, #252]	@ (80012a4 <main+0x144>)
 80011a8:	f005 fcf6 	bl	8006b98 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left Motor Encoder
 80011ac:	213c      	movs	r1, #60	@ 0x3c
 80011ae:	483e      	ldr	r0, [pc, #248]	@ (80012a8 <main+0x148>)
 80011b0:	f005 fe60 	bl	8006e74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right Motor Encoder
 80011b4:	213c      	movs	r1, #60	@ 0x3c
 80011b6:	483d      	ldr	r0, [pc, #244]	@ (80012ac <main+0x14c>)
 80011b8:	f005 fe5c 	bl	8006e74 <HAL_TIM_Encoder_Start>

	ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS);
 80011bc:	2203      	movs	r2, #3
 80011be:	2100      	movs	r1, #0
 80011c0:	483b      	ldr	r0, [pc, #236]	@ (80012b0 <main+0x150>)
 80011c2:	f7ff fed8 	bl	8000f76 <ICM20948_init>

	PID_init(&forward_pid, PID_POSITION, pid_param_forward, max_out, max_iout);
 80011c6:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <main+0x154>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <main+0x158>)
 80011ce:	ed93 7a00 	vldr	s14, [r3]
 80011d2:	eef0 0a47 	vmov.f32	s1, s14
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	4a38      	ldr	r2, [pc, #224]	@ (80012bc <main+0x15c>)
 80011dc:	2100      	movs	r1, #0
 80011de:	4838      	ldr	r0, [pc, #224]	@ (80012c0 <main+0x160>)
 80011e0:	f002 faa0 	bl	8003724 <PID_init>
	PID_init(&backward_pid, PID_POSITION, pid_param_backward, max_out, max_iout);
 80011e4:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <main+0x154>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <main+0x158>)
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	eef0 0a47 	vmov.f32	s1, s14
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <main+0x164>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4832      	ldr	r0, [pc, #200]	@ (80012c8 <main+0x168>)
 80011fe:	f002 fa91 	bl	8003724 <PID_init>

	//commandSemaphore = osSemaphoreNew(1, 0, &commandSemaphore_attributes);
	osThreadNew(commandTask, NULL, &Command_Task_attributes);
 8001202:	4a32      	ldr	r2, [pc, #200]	@ (80012cc <main+0x16c>)
 8001204:	2100      	movs	r1, #0
 8001206:	4832      	ldr	r0, [pc, #200]	@ (80012d0 <main+0x170>)
 8001208:	f007 fba8 	bl	800895c <osThreadNew>
	headingMutex = osMutexNew(&headingMutex_attributes);
 800120c:	4831      	ldr	r0, [pc, #196]	@ (80012d4 <main+0x174>)
 800120e:	f007 fc52 	bl	8008ab6 <osMutexNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <main+0x178>)
 8001216:	6013      	str	r3, [r2, #0]
	if (headingMutex == NULL) {
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <main+0x178>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <main+0xc4>
		// Handle mutex creation failure
		Error_Handler();
 8001220:	f002 f848 	bl	80032b4 <Error_Handler>


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001224:	f007 fb50 	bl	80088c8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001228:	4a2c      	ldr	r2, [pc, #176]	@ (80012dc <main+0x17c>)
 800122a:	2100      	movs	r1, #0
 800122c:	482c      	ldr	r0, [pc, #176]	@ (80012e0 <main+0x180>)
 800122e:	f007 fb95 	bl	800895c <osThreadNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a2b      	ldr	r2, [pc, #172]	@ (80012e4 <main+0x184>)
 8001236:	6013      	str	r3, [r2, #0]

	/* creation of Command_Task */
	Command_TaskHandle = osThreadNew(commandTask, NULL, &Command_Task_attributes);
 8001238:	4a24      	ldr	r2, [pc, #144]	@ (80012cc <main+0x16c>)
 800123a:	2100      	movs	r1, #0
 800123c:	4824      	ldr	r0, [pc, #144]	@ (80012d0 <main+0x170>)
 800123e:	f007 fb8d 	bl	800895c <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <main+0x188>)
 8001246:	6013      	str	r3, [r2, #0]

	/* creation of IMU_Task */
	IMU_TaskHandle = osThreadNew(imuTask, NULL, &IMU_Task_attributes);
 8001248:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <main+0x18c>)
 800124a:	2100      	movs	r1, #0
 800124c:	4828      	ldr	r0, [pc, #160]	@ (80012f0 <main+0x190>)
 800124e:	f007 fb85 	bl	800895c <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <main+0x194>)
 8001256:	6013      	str	r3, [r2, #0]

	/* creation of PID_Task */
	PID_TaskHandle = osThreadNew(pidTask, NULL, &PID_Task_attributes);
 8001258:	4a27      	ldr	r2, [pc, #156]	@ (80012f8 <main+0x198>)
 800125a:	2100      	movs	r1, #0
 800125c:	4827      	ldr	r0, [pc, #156]	@ (80012fc <main+0x19c>)
 800125e:	f007 fb7d 	bl	800895c <osThreadNew>
 8001262:	4603      	mov	r3, r0
 8001264:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <main+0x1a0>)
 8001266:	6013      	str	r3, [r2, #0]

	/* creation of UltrasonicTask */
	UltrasonicTaskHandle = osThreadNew(Ultrasonic_Task, NULL, &UltrasonicTask_attributes);
 8001268:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <main+0x1a4>)
 800126a:	2100      	movs	r1, #0
 800126c:	4826      	ldr	r0, [pc, #152]	@ (8001308 <main+0x1a8>)
 800126e:	f007 fb75 	bl	800895c <osThreadNew>
 8001272:	4603      	mov	r3, r0
 8001274:	4a25      	ldr	r2, [pc, #148]	@ (800130c <main+0x1ac>)
 8001276:	6013      	str	r3, [r2, #0]

	/* creation of HeadingPID */
	HeadingPIDHandle = osThreadNew(Heading_PID, NULL, &HeadingPID_attributes);
 8001278:	4a25      	ldr	r2, [pc, #148]	@ (8001310 <main+0x1b0>)
 800127a:	2100      	movs	r1, #0
 800127c:	4825      	ldr	r0, [pc, #148]	@ (8001314 <main+0x1b4>)
 800127e:	f007 fb6d 	bl	800895c <osThreadNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a24      	ldr	r2, [pc, #144]	@ (8001318 <main+0x1b8>)
 8001286:	6013      	str	r3, [r2, #0]

	/* creation of IRSensorTask */
	IRSensorTaskHandle = osThreadNew(IRSensor_Task, NULL, &IRSensorTask_attributes);
 8001288:	4a24      	ldr	r2, [pc, #144]	@ (800131c <main+0x1bc>)
 800128a:	2100      	movs	r1, #0
 800128c:	4824      	ldr	r0, [pc, #144]	@ (8001320 <main+0x1c0>)
 800128e:	f007 fb65 	bl	800895c <osThreadNew>
 8001292:	4603      	mov	r3, r0
 8001294:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <main+0x1c4>)
 8001296:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001298:	f007 fb3a 	bl	8008910 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <main+0x13c>
 80012a0:	200003e0 	.word	0x200003e0
 80012a4:	20000308 	.word	0x20000308
 80012a8:	20000350 	.word	0x20000350
 80012ac:	20000398 	.word	0x20000398
 80012b0:	200002b4 	.word	0x200002b4
 80012b4:	20000020 	.word	0x20000020
 80012b8:	20000024 	.word	0x20000024
 80012bc:	20000008 	.word	0x20000008
 80012c0:	200004d8 	.word	0x200004d8
 80012c4:	20000014 	.word	0x20000014
 80012c8:	20000528 	.word	0x20000528
 80012cc:	0800eccc 	.word	0x0800eccc
 80012d0:	080022c9 	.word	0x080022c9
 80012d4:	0800eda4 	.word	0x0800eda4
 80012d8:	20000580 	.word	0x20000580
 80012dc:	0800eca8 	.word	0x0800eca8
 80012e0:	08002279 	.word	0x08002279
 80012e4:	20000470 	.word	0x20000470
 80012e8:	20000474 	.word	0x20000474
 80012ec:	0800ecf0 	.word	0x0800ecf0
 80012f0:	08002879 	.word	0x08002879
 80012f4:	20000478 	.word	0x20000478
 80012f8:	0800ed14 	.word	0x0800ed14
 80012fc:	080029b9 	.word	0x080029b9
 8001300:	2000047c 	.word	0x2000047c
 8001304:	0800ed38 	.word	0x0800ed38
 8001308:	08002eb1 	.word	0x08002eb1
 800130c:	20000480 	.word	0x20000480
 8001310:	0800ed5c 	.word	0x0800ed5c
 8001314:	08002ee9 	.word	0x08002ee9
 8001318:	20000484 	.word	0x20000484
 800131c:	0800ed80 	.word	0x0800ed80
 8001320:	08003251 	.word	0x08003251
 8001324:	20000488 	.word	0x20000488

08001328 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	@ 0x50
 800132c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2230      	movs	r2, #48	@ 0x30
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00b fa87 	bl	800c84a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <SystemClock_Config+0xb4>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <SystemClock_Config+0xb4>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	@ 0x40
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <SystemClock_Config+0xb4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <SystemClock_Config+0xb8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <SystemClock_Config+0xb8>)
 8001372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <SystemClock_Config+0xb8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138c:	2310      	movs	r3, #16
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f004 ff55 	bl	8006248 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80013a4:	f001 ff86 	bl	80032b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 f9b8 	bl	8006738 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 80013ce:	f001 ff71 	bl	80032b4 <Error_Handler>
	}
}
 80013d2:	bf00      	nop
 80013d4:	3750      	adds	r7, #80	@ 0x50
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_ADC1_Init+0x98>)
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <MX_ADC1_Init+0x9c>)
 80013fa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <MX_ADC1_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001402:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <MX_ADC1_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <MX_ADC1_Init+0x98>)
 800140a:	2201      	movs	r2, #1
 800140c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <MX_ADC1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_ADC1_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_ADC1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_ADC1_Init+0x98>)
 8001424:	4a17      	ldr	r2, [pc, #92]	@ (8001484 <MX_ADC1_Init+0xa0>)
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_ADC1_Init+0x98>)
 8001430:	2201      	movs	r2, #1
 8001432:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_ADC1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_ADC1_Init+0x98>)
 800143e:	2201      	movs	r2, #1
 8001440:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001442:	480e      	ldr	r0, [pc, #56]	@ (800147c <MX_ADC1_Init+0x98>)
 8001444:	f002 ff28 	bl	8004298 <HAL_ADC_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800144e:	f001 ff31 	bl	80032b4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001452:	230b      	movs	r3, #11
 8001454:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	@ (800147c <MX_ADC1_Init+0x98>)
 8001464:	f003 f8fa 	bl	800465c <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 800146e:	f001 ff21 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000026c 	.word	0x2000026c
 8001480:	40012000 	.word	0x40012000
 8001484:	0f000001 	.word	0x0f000001

08001488 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_I2C1_Init+0x50>)
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <MX_I2C1_Init+0x54>)
 8001490:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_I2C1_Init+0x50>)
 8001494:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <MX_I2C1_Init+0x58>)
 8001496:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014aa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_I2C1_Init+0x50>)
 80014c6:	f003 fe73 	bl	80051b0 <HAL_I2C_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80014d0:	f001 fef0 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200002b4 	.word	0x200002b4
 80014dc:	40005400 	.word	0x40005400
 80014e0:	000186a0 	.word	0x000186a0

080014e4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b092      	sub	sp, #72	@ 0x48
 80014e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2220      	movs	r2, #32
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00b f99b 	bl	800c84a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001514:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001516:	4a33      	ldr	r2, [pc, #204]	@ (80015e4 <MX_TIM1_Init+0x100>)
 8001518:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 800151c:	22a0      	movs	r2, #160	@ 0xa0
 800151e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001526:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001528:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800152c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001540:	4827      	ldr	r0, [pc, #156]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001542:	f005 fad9 	bl	8006af8 <HAL_TIM_PWM_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 800154c:	f001 feb2 	bl	80032b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001558:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800155c:	4619      	mov	r1, r3
 800155e:	4820      	ldr	r0, [pc, #128]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001560:	f006 f85a 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 800156a:	f001 fea3 	bl	80032b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156e:	2360      	movs	r3, #96	@ 0x60
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	220c      	movs	r2, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 8001590:	f005 fcfe 	bl	8006f90 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0xba>
	{
		Error_Handler();
 800159a:	f001 fe8b 	bl	80032b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 80015c2:	f006 f8a5 	bl	8007710 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xec>
	{
		Error_Handler();
 80015cc:	f001 fe72 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM1_Init+0xfc>)
 80015d2:	f002 fbd1 	bl	8003d78 <HAL_TIM_MspPostInit>

}
 80015d6:	bf00      	nop
 80015d8:	3748      	adds	r7, #72	@ 0x48
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000308 	.word	0x20000308
 80015e4:	40010000 	.word	0x40010000

080015e8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00b f927 	bl	800c84a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_TIM2_Init+0xa4>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_TIM2_Init+0xa4>)
 800161a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800162c:	2303      	movs	r3, #3
 800162e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001634:	2301      	movs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800163c:	230a      	movs	r3, #10
 800163e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 800164c:	230a      	movs	r3, #10
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001658:	f005 fb66 	bl	8006d28 <HAL_TIM_Encoder_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8001662:	f001 fe27 	bl	80032b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	@ (800168c <MX_TIM2_Init+0xa4>)
 8001674:	f005 ffd0 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 800167e:	f001 fe19 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3730      	adds	r7, #48	@ 0x30
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000350 	.word	0x20000350

08001690 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	@ 0x30
 8001694:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2224      	movs	r2, #36	@ 0x24
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f00b f8d3 	bl	800c84a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80016ac:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016ae:	4a21      	ldr	r2, [pc, #132]	@ (8001734 <MX_TIM4_Init+0xa4>)
 80016b0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80016be:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d2:	2303      	movs	r3, #3
 80016d4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80016e2:	230a      	movs	r3, #10
 80016e4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 80016f2:	230a      	movs	r3, #10
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_TIM4_Init+0xa0>)
 80016fe:	f005 fb13 	bl	8006d28 <HAL_TIM_Encoder_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8001708:	f001 fdd4 	bl	80032b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_TIM4_Init+0xa0>)
 800171a:	f005 ff7d 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 8001724:	f001 fdc6 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	@ 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000398 	.word	0x20000398
 8001734:	40000800 	.word	0x40000800

08001738 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b092      	sub	sp, #72	@ 0x48
 800173c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2220      	movs	r2, #32
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f00b f871 	bl	800c84a <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001768:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <MX_TIM8_Init+0x118>)
 800176a:	4a3a      	ldr	r2, [pc, #232]	@ (8001854 <MX_TIM8_Init+0x11c>)
 800176c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800176e:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 800177a:	4b35      	ldr	r3, [pc, #212]	@ (8001850 <MX_TIM8_Init+0x118>)
 800177c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001780:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001788:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <MX_TIM8_Init+0x118>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001794:	482e      	ldr	r0, [pc, #184]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001796:	f005 f9af 	bl	8006af8 <HAL_TIM_PWM_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM8_Init+0x6c>
	{
		Error_Handler();
 80017a0:	f001 fd88 	bl	80032b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017b0:	4619      	mov	r1, r3
 80017b2:	4827      	ldr	r0, [pc, #156]	@ (8001850 <MX_TIM8_Init+0x118>)
 80017b4:	f005 ff30 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM8_Init+0x8a>
	{
		Error_Handler();
 80017be:	f001 fd79 	bl	80032b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c2:	2360      	movs	r3, #96	@ 0x60
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	481a      	ldr	r0, [pc, #104]	@ (8001850 <MX_TIM8_Init+0x118>)
 80017e8:	f005 fbd2 	bl	8006f90 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM8_Init+0xbe>
	{
		Error_Handler();
 80017f2:	f001 fd5f 	bl	80032b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	2208      	movs	r2, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	4814      	ldr	r0, [pc, #80]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001800:	f005 fbc6 	bl	8006f90 <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM8_Init+0xd6>
	{
		Error_Handler();
 800180a:	f001 fd53 	bl	80032b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001826:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4807      	ldr	r0, [pc, #28]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001832:	f005 ff6d 	bl	8007710 <HAL_TIMEx_ConfigBreakDeadTime>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0x108>
	{
		Error_Handler();
 800183c:	f001 fd3a 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <MX_TIM8_Init+0x118>)
 8001842:	f002 fa99 	bl	8003d78 <HAL_TIM_MspPostInit>

}
 8001846:	bf00      	nop
 8001848:	3748      	adds	r7, #72	@ 0x48
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200003e0 	.word	0x200003e0
 8001854:	40010400 	.word	0x40010400

08001858 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <MX_USART3_UART_Init+0x50>)
 8001860:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001890:	f005 ff90 	bl	80077b4 <HAL_UART_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800189a:	f001 fd0b 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000428 	.word	0x20000428
 80018a8:	40004800 	.word	0x40004800

080018ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	4b58      	ldr	r3, [pc, #352]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a57      	ldr	r2, [pc, #348]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b55      	ldr	r3, [pc, #340]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a49      	ldr	r2, [pc, #292]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a42      	ldr	r2, [pc, #264]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b3c      	ldr	r3, [pc, #240]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a34      	ldr	r2, [pc, #208]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 51af 	mov.w	r1, #5600	@ 0x15e0
 8001970:	482e      	ldr	r0, [pc, #184]	@ (8001a2c <MX_GPIO_Init+0x180>)
 8001972:	f003 fbe9 	bl	8005148 <HAL_GPIO_WritePin>
			|LED3_Pin|CIN1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	210c      	movs	r1, #12
 800197a:	482d      	ldr	r0, [pc, #180]	@ (8001a30 <MX_GPIO_Init+0x184>)
 800197c:	f003 fbe4 	bl	8005148 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2120      	movs	r1, #32
 8001984:	482b      	ldr	r0, [pc, #172]	@ (8001a34 <MX_GPIO_Init+0x188>)
 8001986:	f003 fbdf 	bl	8005148 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2110      	movs	r1, #16
 800198e:	482a      	ldr	r0, [pc, #168]	@ (8001a38 <MX_GPIO_Init+0x18c>)
 8001990:	f003 fbda 	bl	8005148 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin CIN1_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001994:	f44f 53af 	mov.w	r3, #5600	@ 0x15e0
 8001998:	61fb      	str	r3, [r7, #28]
			|LED3_Pin|CIN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	481f      	ldr	r0, [pc, #124]	@ (8001a2c <MX_GPIO_Init+0x180>)
 80019ae:	f003 fa17 	bl	8004de0 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 80019b2:	230c      	movs	r3, #12
 80019b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4819      	ldr	r0, [pc, #100]	@ (8001a30 <MX_GPIO_Init+0x184>)
 80019ca:	f003 fa09 	bl	8004de0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CIN2_Pin */
	GPIO_InitStruct.Pin = CIN2_Pin;
 80019ce:	2320      	movs	r3, #32
 80019d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4813      	ldr	r0, [pc, #76]	@ (8001a34 <MX_GPIO_Init+0x188>)
 80019e6:	f003 f9fb 	bl	8004de0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO_PIN_Pin */
	GPIO_InitStruct.Pin = ECHO_PIN_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(ECHO_PIN_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	480f      	ldr	r0, [pc, #60]	@ (8001a3c <MX_GPIO_Init+0x190>)
 8001a00:	f003 f9ee 	bl	8004de0 <HAL_GPIO_Init>

	/*Configure GPIO pin : HCSR04_TRIG_Pin */
	GPIO_InitStruct.Pin = HCSR04_TRIG_Pin;
 8001a04:	2310      	movs	r3, #16
 8001a06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_GPIO_Init+0x18c>)
 8001a1c:	f003 f9e0 	bl	8004de0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a20:	bf00      	nop
 8001a22:	3730      	adds	r7, #48	@ 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020c00 	.word	0x40020c00

08001a40 <Start_RPI_Comm>:

/* USER CODE BEGIN 4 */
////////////////////RPI COMMS START////////////////////
void Start_RPI_Comm(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*) rxBuffer, RXBUFFER_SIZE);  //trigger interrupt after 8 byte
 8001a44:	2208      	movs	r2, #8
 8001a46:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <Start_RPI_Comm+0x14>)
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <Start_RPI_Comm+0x18>)
 8001a4a:	f005 ff8e 	bl	800796a <HAL_UART_Receive_IT>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200004ac 	.word	0x200004ac
 8001a58:	20000428 	.word	0x20000428

08001a5c <SendMsg_RPI>:
void SendMsg_RPI(uint8_t *pdata , uint32_t u32Len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, pdata , u32Len, 100);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	2364      	movs	r3, #100	@ 0x64
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4803      	ldr	r0, [pc, #12]	@ (8001a7c <SendMsg_RPI+0x20>)
 8001a70:	f005 fef0 	bl	8007854 <HAL_UART_Transmit>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000428 	.word	0x20000428

08001a80 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b096      	sub	sp, #88	@ 0x58
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	uint32_t u32Cmd = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t u32speed = 0U, u32distance = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a90:	2300      	movs	r3, #0
 8001a92:	657b      	str	r3, [r7, #84]	@ 0x54
	char msgBuffer[50];

	if (huart->Instance == USART3)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a81      	ldr	r2, [pc, #516]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x220>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	f040 80f9 	bne.w	8001c92 <HAL_UART_RxCpltCallback+0x212>
	{
		char direction = rxBuffer[0];
 8001aa0:	4b80      	ldr	r3, [pc, #512]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x224>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		char speedData[3] = {0};
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x228>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	823b      	strh	r3, [r7, #16]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	74bb      	strb	r3, [r7, #18]
		char distanceData[4] = {0};
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]

		strncpy(speedData, (char*)&rxBuffer[1], 2);
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2202      	movs	r2, #2
 8001abc:	497b      	ldr	r1, [pc, #492]	@ (8001cac <HAL_UART_RxCpltCallback+0x22c>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00a feb0 	bl	800c824 <strncpy>
		speedData[2] = '\0';
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	74bb      	strb	r3, [r7, #18]
		strncpy(distanceData, (char*)&rxBuffer[4], 3);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2203      	movs	r2, #3
 8001ace:	4978      	ldr	r1, [pc, #480]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x230>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00a fea7 	bl	800c824 <strncpy>
		distanceData[3] = '\0';
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
		u32speed = (uint32_t)atoi(speedData);  // Convert ASCII to integer
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00a f8aa 	bl	800bc38 <atoi>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	653b      	str	r3, [r7, #80]	@ 0x50
		u32distance = (uint32_t)atoi(distanceData);  // Convert ASCII to integer
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00a f8a3 	bl	800bc38 <atoi>
 8001af2:	4603      	mov	r3, r0
 8001af4:	657b      	str	r3, [r7, #84]	@ 0x54
		if (u32distance != 0 && u32distance <= 5) {
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_UART_RxCpltCallback+0x86>
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d801      	bhi.n	8001b06 <HAL_UART_RxCpltCallback+0x86>
			u32distance = 5;
 8001b02:	2305      	movs	r3, #5
 8001b04:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		switch (direction)
 8001b06:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b0a:	3b42      	subs	r3, #66	@ 0x42
 8001b0c:	2b30      	cmp	r3, #48	@ 0x30
 8001b0e:	f200 8089 	bhi.w	8001c24 <HAL_UART_RxCpltCallback+0x1a4>
 8001b12:	a201      	add	r2, pc, #4	@ (adr r2, 8001b18 <HAL_UART_RxCpltCallback+0x98>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001be3 	.word	0x08001be3
 8001b1c:	08001c25 	.word	0x08001c25
 8001b20:	08001c25 	.word	0x08001c25
 8001b24:	08001c25 	.word	0x08001c25
 8001b28:	08001bdd 	.word	0x08001bdd
 8001b2c:	08001c25 	.word	0x08001c25
 8001b30:	08001c25 	.word	0x08001c25
 8001b34:	08001c25 	.word	0x08001c25
 8001b38:	08001c25 	.word	0x08001c25
 8001b3c:	08001c25 	.word	0x08001c25
 8001b40:	08001be9 	.word	0x08001be9
 8001b44:	08001c25 	.word	0x08001c25
 8001b48:	08001c25 	.word	0x08001c25
 8001b4c:	08001c01 	.word	0x08001c01
 8001b50:	08001c07 	.word	0x08001c07
 8001b54:	08001c25 	.word	0x08001c25
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001c1f 	.word	0x08001c1f
 8001b60:	08001c25 	.word	0x08001c25
 8001b64:	08001c25 	.word	0x08001c25
 8001b68:	08001c25 	.word	0x08001c25
 8001b6c:	08001c25 	.word	0x08001c25
 8001b70:	08001c25 	.word	0x08001c25
 8001b74:	08001c25 	.word	0x08001c25
 8001b78:	08001c19 	.word	0x08001c19
 8001b7c:	08001c25 	.word	0x08001c25
 8001b80:	08001c25 	.word	0x08001c25
 8001b84:	08001c25 	.word	0x08001c25
 8001b88:	08001c25 	.word	0x08001c25
 8001b8c:	08001c25 	.word	0x08001c25
 8001b90:	08001c25 	.word	0x08001c25
 8001b94:	08001c25 	.word	0x08001c25
 8001b98:	08001c25 	.word	0x08001c25
 8001b9c:	08001c25 	.word	0x08001c25
 8001ba0:	08001c25 	.word	0x08001c25
 8001ba4:	08001c25 	.word	0x08001c25
 8001ba8:	08001c25 	.word	0x08001c25
 8001bac:	08001c25 	.word	0x08001c25
 8001bb0:	08001c25 	.word	0x08001c25
 8001bb4:	08001c25 	.word	0x08001c25
 8001bb8:	08001c25 	.word	0x08001c25
 8001bbc:	08001c25 	.word	0x08001c25
 8001bc0:	08001bf5 	.word	0x08001bf5
 8001bc4:	08001c25 	.word	0x08001c25
 8001bc8:	08001c25 	.word	0x08001c25
 8001bcc:	08001c0d 	.word	0x08001c0d
 8001bd0:	08001c13 	.word	0x08001c13
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001bfb 	.word	0x08001bfb
		{
		case 'F':  u32Cmd = MOVE_FORWARD;          break;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001be0:	e023      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'B':  u32Cmd = MOVE_BACKWARD;         break;
 8001be2:	2302      	movs	r3, #2
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001be6:	e020      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'L':  u32Cmd = TURN_FORWARD_LEFT;     break;
 8001be8:	2303      	movs	r3, #3
 8001bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bec:	e01d      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'R':  u32Cmd = TURN_FORWARD_RIGHT;    break;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bf2:	e01a      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'l':  u32Cmd = TURN_BACKWARD_LEFT;    break;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bf8:	e017      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'r':  u32Cmd = TURN_BACKWARD_RIGHT;   break;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bfe:	e014      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'O':  u32Cmd = OFFSET_FORWARD_LEFT;   break;
 8001c00:	2307      	movs	r3, #7
 8001c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c04:	e011      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'P':  u32Cmd = OFFSET_FORWARD_RIGHT;  break;
 8001c06:	2308      	movs	r3, #8
 8001c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c0a:	e00e      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'o':  u32Cmd = OFFSET_BACKWARD_LEFT;  break;
 8001c0c:	2309      	movs	r3, #9
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c10:	e00b      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'p':  u32Cmd = OFFSET_BACKWARD_RIGHT; break;
 8001c12:	230a      	movs	r3, #10
 8001c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c16:	e008      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'Z':  u32Cmd = STOP;                  break;
 8001c18:	230b      	movs	r3, #11
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c1c:	e005      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		case 'S':  u32Cmd = SNAP; 				 break;
 8001c1e:	230c      	movs	r3, #12
 8001c20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c22:	e002      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x1aa>
		default:   u32Cmd = 0U;                    break;
 8001c24:	2300      	movs	r3, #0
 8001c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c28:	bf00      	nop
		}

		if (u32Cmd != 0U)
 8001c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d02c      	beq.n	8001c8a <HAL_UART_RxCpltCallback+0x20a>
		{
			u32Cmd = (u32Cmd * 100000) + (u32speed * 1000) + u32distance;
 8001c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c32:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x234>)
 8001c34:	fb03 f202 	mul.w	r2, r3, r2
 8001c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c3a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	441a      	add	r2, r3
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	4413      	add	r3, r2
 8001c48:	64bb      	str	r3, [r7, #72]	@ 0x48
			snprintf(msgBuffer, sizeof(msgBuffer), "%lu\n", (unsigned long)u32Cmd);
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c4c:	f107 0014 	add.w	r0, r7, #20
 8001c50:	4a19      	ldr	r2, [pc, #100]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x238>)
 8001c52:	2132      	movs	r1, #50	@ 0x32
 8001c54:	f00a fc4c 	bl	800c4f0 <sniprintf>
			SendMsg_RPI((uint8_t*)msgBuffer, strlen(msgBuffer));
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fb07 	bl	8000270 <strlen>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fef6 	bl	8001a5c <SendMsg_RPI>
			if(PushToQueue_MTR_Cmd(&u32Cmd))
 8001c70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f9ef 	bl	8001058 <PushToQueue_MTR_Cmd>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d108      	bne.n	8001c92 <HAL_UART_RxCpltCallback+0x212>
				//SendMsg_RPI((uint8_t*)"ACK1\n", strlen("ACK1\n"));
			}
			else
			{
				// If the queue is full, send an error message
				SendMsg_RPI((uint8_t*)"QUEUE_ERR\n", strlen("QUEUE_ERR\n"));
 8001c80:	210a      	movs	r1, #10
 8001c82:	480e      	ldr	r0, [pc, #56]	@ (8001cbc <HAL_UART_RxCpltCallback+0x23c>)
 8001c84:	f7ff feea 	bl	8001a5c <SendMsg_RPI>
 8001c88:	e003      	b.n	8001c92 <HAL_UART_RxCpltCallback+0x212>
			}
		}
		else
		{
			SendMsg_RPI((uint8_t*)"CMD_FORMAT_ERR\n", strlen("CMD_FORMAT_ERR\n"));
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x240>)
 8001c8e:	f7ff fee5 	bl	8001a5c <SendMsg_RPI>
		}
	}
	//memset(rxBuffer, 0U, RXBUFFER_SIZE);
	Start_RPI_Comm();
 8001c92:	f7ff fed5 	bl	8001a40 <Start_RPI_Comm>
}
 8001c96:	bf00      	nop
 8001c98:	3758      	adds	r7, #88	@ 0x58
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40004800 	.word	0x40004800
 8001ca4:	200004ac 	.word	0x200004ac
 8001ca8:	0800ec5c 	.word	0x0800ec5c
 8001cac:	200004ad 	.word	0x200004ad
 8001cb0:	200004b0 	.word	0x200004b0
 8001cb4:	000186a0 	.word	0x000186a0
 8001cb8:	0800ec38 	.word	0x0800ec38
 8001cbc:	0800ec40 	.word	0x0800ec40
 8001cc0:	0800ec4c 	.word	0x0800ec4c

08001cc4 <turnLeft>:
////////////////////RPI COMMS END////////////////////

////////////////////MOTOR HELPER START////////////////////
void turnLeft() {
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = LEFTTURN_POS_PWM;
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <turnLeft+0x18>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2268      	movs	r2, #104	@ 0x68
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
	//robot_direction = 0;
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000308 	.word	0x20000308

08001ce0 <turnRight>:
void turnRight() {
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = RIGHTTURN_POS_PWM;
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <turnRight+0x18>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	22dd      	movs	r2, #221	@ 0xdd
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40
	//robot_direction = 2;
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000308 	.word	0x20000308

08001cfc <offsetLeft>:
void offsetLeft() {
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = LEFTOFF_POS_PWM;
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <offsetLeft+0x18>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2288      	movs	r2, #136	@ 0x88
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
	//robot_direction = 0;
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000308 	.word	0x20000308

08001d18 <offsetRight>:
void offsetRight() {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = RIGHTOFF_POS_PWM;
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <offsetRight+0x18>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	22a6      	movs	r2, #166	@ 0xa6
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40
	//robot_direction = 2;
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000308 	.word	0x20000308

08001d34 <faceFront>:
void faceFront() {
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = CENTER_POS_PWM; //CENTER_POS_PWM;
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <faceFront+0x18>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2297      	movs	r2, #151	@ 0x97
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
	//robot_direction = 1;
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000308 	.word	0x20000308

08001d50 <setLeftPWM>:
void setLeftPWM(uint16_t dutyCycle) {
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dutyCycle);
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <setLeftPWM+0x20>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	88fa      	ldrh	r2, [r7, #6]
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	200003e0 	.word	0x200003e0

08001d74 <setRightPWM>:
void setRightPWM(uint16_t dutyCycle) {
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, dutyCycle);
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <setRightPWM+0x20>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200003e0 	.word	0x200003e0

08001d98 <setMotorForward>:
void setMotorForward() {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	// set motor direction
	// ------- left motor
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2120      	movs	r1, #32
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <setMotorForward+0x34>)
 8001da2:	f003 f9d1 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dac:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <setMotorForward+0x38>)
 8001dae:	f003 f9cb 	bl	8005148 <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2104      	movs	r1, #4
 8001db6:	4807      	ldr	r0, [pc, #28]	@ (8001dd4 <setMotorForward+0x3c>)
 8001db8:	f003 f9c6 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <setMotorForward+0x3c>)
 8001dc2:	f003 f9c1 	bl	8005148 <HAL_GPIO_WritePin>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <setMotorBackward>:
void setMotorBackward() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	// set motor direction
	// ------- left motor
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2120      	movs	r1, #32
 8001de0:	480a      	ldr	r0, [pc, #40]	@ (8001e0c <setMotorBackward+0x34>)
 8001de2:	f003 f9b1 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dec:	4808      	ldr	r0, [pc, #32]	@ (8001e10 <setMotorBackward+0x38>)
 8001dee:	f003 f9ab 	bl	8005148 <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2104      	movs	r1, #4
 8001df6:	4807      	ldr	r0, [pc, #28]	@ (8001e14 <setMotorBackward+0x3c>)
 8001df8:	f003 f9a6 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2108      	movs	r1, #8
 8001e00:	4804      	ldr	r0, [pc, #16]	@ (8001e14 <setMotorBackward+0x3c>)
 8001e02:	f003 f9a1 	bl	8005148 <HAL_GPIO_WritePin>
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40020000 	.word	0x40020000

08001e18 <motorStop>:
void motorStop() {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	// ------- left motor
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2120      	movs	r1, #32
 8001e20:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <motorStop+0x40>)
 8001e22:	f003 f991 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e2c:	480b      	ldr	r0, [pc, #44]	@ (8001e5c <motorStop+0x44>)
 8001e2e:	f003 f98b 	bl	8005148 <HAL_GPIO_WritePin>
	setLeftPWM(0);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff ff8c 	bl	8001d50 <setLeftPWM>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	4808      	ldr	r0, [pc, #32]	@ (8001e60 <motorStop+0x48>)
 8001e3e:	f003 f983 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2108      	movs	r1, #8
 8001e46:	4806      	ldr	r0, [pc, #24]	@ (8001e60 <motorStop+0x48>)
 8001e48:	f003 f97e 	bl	8005148 <HAL_GPIO_WritePin>
	setRightPWM(0);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff ff91 	bl	8001d74 <setRightPWM>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40020000 	.word	0x40020000

08001e64 <TriggerPulse>:
}
////////////////////MOTOR HELPER END////////////////////


void TriggerPulse(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	4809      	ldr	r0, [pc, #36]	@ (8001e94 <TriggerPulse+0x30>)
 8001e6e:	f003 f96b 	bl	8005148 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // Reset Timer
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <TriggerPulse+0x34>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < 10);  // Wait 10µs
 8001e7a:	bf00      	nop
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <TriggerPulse+0x34>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	2b09      	cmp	r3, #9
 8001e84:	d9fa      	bls.n	8001e7c <TriggerPulse+0x18>
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <TriggerPulse+0x30>)
 8001e8c:	f003 f95c 	bl	8005148 <HAL_GPIO_WritePin>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40020400 	.word	0x40020400
 8001e98:	20000308 	.word	0x20000308

08001e9c <MeasureEchoTime>:



uint32_t MeasureEchoTime(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	uint32_t start_time = 0, stop_time = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]

	// **Wait for ECHO to go HIGH (Start timing)**
	while (HAL_GPIO_ReadPin(ECHO_PIN_GPIO_Port, ECHO_PIN_Pin) == GPIO_PIN_RESET);
 8001eaa:	bf00      	nop
 8001eac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eb0:	4811      	ldr	r0, [pc, #68]	@ (8001ef8 <MeasureEchoTime+0x5c>)
 8001eb2:	f003 f931 	bl	8005118 <HAL_GPIO_ReadPin>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f7      	beq.n	8001eac <MeasureEchoTime+0x10>
	start_time = __HAL_TIM_GET_COUNTER(&htim1);  // Get the start time in µs
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MeasureEchoTime+0x60>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	607b      	str	r3, [r7, #4]

	// **Wait for ECHO to go LOW (Stop timing)**
	while (HAL_GPIO_ReadPin(ECHO_PIN_GPIO_Port, ECHO_PIN_Pin) == GPIO_PIN_SET);
 8001ec4:	bf00      	nop
 8001ec6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eca:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <MeasureEchoTime+0x5c>)
 8001ecc:	f003 f924 	bl	8005118 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d0f7      	beq.n	8001ec6 <MeasureEchoTime+0x2a>
	stop_time = __HAL_TIM_GET_COUNTER(&htim1);  // Get the stop time in µs
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MeasureEchoTime+0x60>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	603b      	str	r3, [r7, #0]

	return (stop_time > start_time) ? (stop_time - start_time) : 0;
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d903      	bls.n	8001eee <MeasureEchoTime+0x52>
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	e000      	b.n	8001ef0 <MeasureEchoTime+0x54>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	20000308 	.word	0x20000308

08001f00 <CalculateDistance>:

float CalculateDistance(uint32_t pulse_time)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	return (pulse_time * 0.0343f) / 2.0f;  // Convert to cm (divide by 2 for round trip)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f12:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f34 <CalculateDistance+0x34>
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001f1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f22:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f26:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	3d0c7e28 	.word	0x3d0c7e28

08001f38 <getEncoderDelta>:


////////////////////ENCODER START////////////////////

uint32_t getEncoderDelta(uint32_t count1, uint32_t count2,
		TIM_HandleTypeDef *htim) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d118      	bne.n	8001f84 <getEncoderDelta+0x4c>
		if (count2 <= count1) {
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d803      	bhi.n	8001f62 <getEncoderDelta+0x2a>
			return count1 - count2;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	e028      	b.n	8001fb4 <getEncoderDelta+0x7c>
		} else if ((count2 - count1) > 32000) {
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001f6c:	d906      	bls.n	8001f7c <getEncoderDelta+0x44>
			return (65535 - count2 + count1);
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001f78:	33ff      	adds	r3, #255	@ 0xff
 8001f7a:	e01b      	b.n	8001fb4 <getEncoderDelta+0x7c>
		}
		else {
			return (count2 - count1);
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	e017      	b.n	8001fb4 <getEncoderDelta+0x7c>
		}
	} else {
		if (count2 >= count1) {
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d303      	bcc.n	8001f94 <getEncoderDelta+0x5c>
			return count2 - count1;
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	e00f      	b.n	8001fb4 <getEncoderDelta+0x7c>
		} else if ((count1 - count2) > 32000){
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001f9e:	d906      	bls.n	8001fae <getEncoderDelta+0x76>
			return (65535 - count1 + count2);
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001faa:	33ff      	adds	r3, #255	@ 0xff
 8001fac:	e002      	b.n	8001fb4 <getEncoderDelta+0x7c>
		}
		else {
			return (count1 - count2);
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1ad3      	subs	r3, r2, r3
		}

	}
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <CalibrateGyroZOffset>:

void CalibrateGyroZOffset(I2C_HandleTypeDef *hi2c) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8001fc6:	af04      	add	r7, sp, #16
 8001fc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001fcc:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001fd0:	6018      	str	r0, [r3, #0]
	int16_t gyroZ_raw = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8a7 33fa 	strh.w	r3, [r7, #1018]	@ 0x3fa
	int16_t gyroZ_samples[NUM_CALIBRATION_SAMPLES];
	uint8_t gyroDataBuffer[2];  // Buffer for raw gyro data

	// **Step 1: Collect multiple stable samples**
	for (int i = 0; i < NUM_CALIBRATION_SAMPLES; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8001fde:	e033      	b.n	8002048 <CalibrateGyroZOffset+0x88>
		__Gyro_Read_Z(hi2c, gyroDataBuffer, gyroZ_raw);  // Uses the macro as per your main.h
 8001fe0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001fe4:	f2a3 4004 	subw	r0, r3, #1028	@ 0x404
 8001fe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2237      	movs	r2, #55	@ 0x37
 8001ffc:	21d0      	movs	r1, #208	@ 0xd0
 8001ffe:	6800      	ldr	r0, [r0, #0]
 8002000:	f003 fb14 	bl	800562c <HAL_I2C_Mem_Read>
 8002004:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8002008:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	b21a      	sxth	r2, r3
 8002012:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8002016:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800201a:	785b      	ldrb	r3, [r3, #1]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	f8a7 33fa 	strh.w	r3, [r7, #1018]	@ 0x3fa
		gyroZ_samples[i] = gyroZ_raw;
 8002024:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8002028:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 800202c:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8002030:	f8b7 13fa 	ldrh.w	r1, [r7, #1018]	@ 0x3fa
 8002034:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		osDelay(5);  // Small delay to reduce noise
 8002038:	2005      	movs	r0, #5
 800203a:	f006 fd21 	bl	8008a80 <osDelay>
	for (int i = 0; i < NUM_CALIBRATION_SAMPLES; i++) {
 800203e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8002042:	3301      	adds	r3, #1
 8002044:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8002048:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 800204c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002050:	dbc6      	blt.n	8001fe0 <CalibrateGyroZOffset+0x20>
	}

	// **Step 2: Sort samples to remove outliers (Optional but recommended)**
	for (int i = 0; i < NUM_CALIBRATION_SAMPLES - 1; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 8002058:	e04a      	b.n	80020f0 <CalibrateGyroZOffset+0x130>
		for (int j = i + 1; j < NUM_CALIBRATION_SAMPLES; j++) {
 800205a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 800205e:	3301      	adds	r3, #1
 8002060:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8002064:	e03a      	b.n	80020dc <CalibrateGyroZOffset+0x11c>
			if (gyroZ_samples[i] > gyroZ_samples[j]) {
 8002066:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800206a:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 800206e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8002072:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8002076:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800207a:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 800207e:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	@ 0x3fc
 8002082:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8002086:	429a      	cmp	r2, r3
 8002088:	dd23      	ble.n	80020d2 <CalibrateGyroZOffset+0x112>
				int16_t temp = gyroZ_samples[i];
 800208a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800208e:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8002092:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8002096:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800209a:	f8a7 33f8 	strh.w	r3, [r7, #1016]	@ 0x3f8
				gyroZ_samples[i] = gyroZ_samples[j];
 800209e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80020a2:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80020a6:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 80020aa:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80020ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80020b2:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80020b6:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80020ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				gyroZ_samples[j] = temp;
 80020be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80020c2:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80020c6:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 80020ca:	f8b7 13f8 	ldrh.w	r1, [r7, #1016]	@ 0x3f8
 80020ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = i + 1; j < NUM_CALIBRATION_SAMPLES; j++) {
 80020d2:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80020d6:	3301      	adds	r3, #1
 80020d8:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80020dc:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80020e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020e4:	dbbf      	blt.n	8002066 <CalibrateGyroZOffset+0xa6>
	for (int i = 0; i < NUM_CALIBRATION_SAMPLES - 1; i++) {
 80020e6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80020ea:	3301      	adds	r3, #1
 80020ec:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 80020f0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80020f4:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 80020f8:	ddaf      	ble.n	800205a <CalibrateGyroZOffset+0x9a>
			}
		}
	}

	// **Step 3: Compute offset using median filter (more robust than mean)**
	gyroZ_offset = gyroZ_samples[NUM_CALIBRATION_SAMPLES / 2];  // Median value for better stability
 80020fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80020fe:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8002102:	f9b3 21f4 	ldrsh.w	r2, [r3, #500]	@ 0x1f4
 8002106:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <CalibrateGyroZOffset+0x154>)
 8002108:	801a      	strh	r2, [r3, #0]
}
 800210a:	bf00      	nop
 800210c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200004c4 	.word	0x200004c4

08002118 <normalizeAngle>:

float normalizeAngle(float angle) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fmodf(angle, 360.0f);
 8002122:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8002160 <normalizeAngle+0x48>
 8002126:	ed97 0a01 	vldr	s0, [r7, #4]
 800212a:	f00c fc9d 	bl	800ea68 <fmodf>
 800212e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < 0) angle += 360.0f;
 8002132:	edd7 7a01 	vldr	s15, [r7, #4]
 8002136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	d507      	bpl.n	8002150 <normalizeAngle+0x38>
 8002140:	edd7 7a01 	vldr	s15, [r7, #4]
 8002144:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002160 <normalizeAngle+0x48>
 8002148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800214c:	edc7 7a01 	vstr	s15, [r7, #4]
	return angle;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	ee07 3a90 	vmov	s15, r3
}
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	43b40000 	.word	0x43b40000

08002164 <ADC_Read_Channel>:


/////// IR Sensor Functions////////
uint32_t ADC_Read_Channel(uint32_t channel) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;  // dynamically set ADC channel
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4619      	mov	r1, r3
 800218c:	480f      	ldr	r0, [pc, #60]	@ (80021cc <ADC_Read_Channel+0x68>)
 800218e:	f002 fa65 	bl	800465c <HAL_ADC_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <ADC_Read_Channel+0x38>
		Error_Handler();
 8002198:	f001 f88c 	bl	80032b4 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 800219c:	480b      	ldr	r0, [pc, #44]	@ (80021cc <ADC_Read_Channel+0x68>)
 800219e:	f002 f8bf 	bl	8004320 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK) {
 80021a2:	210a      	movs	r1, #10
 80021a4:	4809      	ldr	r0, [pc, #36]	@ (80021cc <ADC_Read_Channel+0x68>)
 80021a6:	f002 f9c0 	bl	800452a <HAL_ADC_PollForConversion>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <ADC_Read_Channel+0x50>
		return 0;  // error handling
 80021b0:	2300      	movs	r3, #0
 80021b2:	e007      	b.n	80021c4 <ADC_Read_Channel+0x60>
	}
	uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <ADC_Read_Channel+0x68>)
 80021b6:	f002 fa43 	bl	8004640 <HAL_ADC_GetValue>
 80021ba:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 80021bc:	4803      	ldr	r0, [pc, #12]	@ (80021cc <ADC_Read_Channel+0x68>)
 80021be:	f002 f981 	bl	80044c4 <HAL_ADC_Stop>
	return adcVal;
 80021c2:	69fb      	ldr	r3, [r7, #28]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	2000026c 	.word	0x2000026c

080021d0 <read_IR_Left>:

uint32_t read_IR_Left(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	return ADC_Read_Channel(ADC_CHANNEL_11); // PC1
 80021d4:	200b      	movs	r0, #11
 80021d6:	f7ff ffc5 	bl	8002164 <ADC_Read_Channel>
 80021da:	4603      	mov	r3, r0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}

080021e0 <read_IR_Right>:

uint32_t read_IR_Right(void) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	return ADC_Read_Channel(ADC_CHANNEL_12); // PC2
 80021e4:	200c      	movs	r0, #12
 80021e6:	f7ff ffbd 	bl	8002164 <ADC_Read_Channel>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <IR_ADC_to_Distance>:

float IR_ADC_to_Distance(uint32_t adcValue) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    if (adcValue > 3000) return 5.0f;        // ~5 cm (very close)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <IR_ADC_to_Distance+0x16>
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <IR_ADC_to_Distance+0x6c>)
 8002204:	e020      	b.n	8002248 <IR_ADC_to_Distance+0x58>
    else if (adcValue > 2500) return 7.0f;   // approximately 7 cm
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <IR_ADC_to_Distance+0x24>
 8002210:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <IR_ADC_to_Distance+0x70>)
 8002212:	e019      	b.n	8002248 <IR_ADC_to_Distance+0x58>
    else if (adcValue > 2000) return 10.0f;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800221a:	d901      	bls.n	8002220 <IR_ADC_to_Distance+0x30>
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <IR_ADC_to_Distance+0x74>)
 800221e:	e013      	b.n	8002248 <IR_ADC_to_Distance+0x58>
    else if (adcValue > 1500) return 15.0f;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <IR_ADC_to_Distance+0x3e>
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <IR_ADC_to_Distance+0x78>)
 800222c:	e00c      	b.n	8002248 <IR_ADC_to_Distance+0x58>
    else if (adcValue > 1000) return 20.0f;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002234:	d901      	bls.n	800223a <IR_ADC_to_Distance+0x4a>
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <IR_ADC_to_Distance+0x7c>)
 8002238:	e006      	b.n	8002248 <IR_ADC_to_Distance+0x58>
    else if (adcValue > 500) return 30.0f;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002240:	d901      	bls.n	8002246 <IR_ADC_to_Distance+0x56>
 8002242:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <IR_ADC_to_Distance+0x80>)
 8002244:	e000      	b.n	8002248 <IR_ADC_to_Distance+0x58>

    return 50.0f;  // Default if far away or sensor out of range
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <IR_ADC_to_Distance+0x84>)
}
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40a00000 	.word	0x40a00000
 8002260:	40e00000 	.word	0x40e00000
 8002264:	41200000 	.word	0x41200000
 8002268:	41700000 	.word	0x41700000
 800226c:	41a00000 	.word	0x41a00000
 8002270:	41f00000 	.word	0x41f00000
 8002274:	42480000 	.word	0x42480000

08002278 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	OLED_Clear();
 8002280:	f001 f8a0 	bl	80033c4 <OLED_Clear>
	int counter = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002288:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800228c:	480b      	ldr	r0, [pc, #44]	@ (80022bc <StartDefaultTask+0x44>)
 800228e:	f002 ff74 	bl	800517a <HAL_GPIO_TogglePin>
		sprintf((char*)OLEDBuffer, "Count: %d", counter);
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	490a      	ldr	r1, [pc, #40]	@ (80022c0 <StartDefaultTask+0x48>)
 8002296:	480b      	ldr	r0, [pc, #44]	@ (80022c4 <StartDefaultTask+0x4c>)
 8002298:	f00a f95e 	bl	800c558 <siprintf>
		OLED_ShowString(10, 10, OLEDBuffer);
 800229c:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <StartDefaultTask+0x4c>)
 800229e:	210a      	movs	r1, #10
 80022a0:	200a      	movs	r0, #10
 80022a2:	f001 f981 	bl	80035a8 <OLED_ShowString>
		//snprintf((char*)OLEDBuffer, sizeof(OLEDBuffer), "Yaw: %d", (int)heading);
		//OLED_ShowString(10, 30, OLEDBuffer);
		OLED_Refresh_Gram();
 80022a6:	f001 f80b 	bl	80032c0 <OLED_Refresh_Gram>
		counter++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
		osDelay(1000);
 80022b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022b4:	f006 fbe4 	bl	8008a80 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80022b8:	bf00      	nop
 80022ba:	e7e5      	b.n	8002288 <StartDefaultTask+0x10>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	0800ec60 	.word	0x0800ec60
 80022c4:	2000048c 	.word	0x2000048c

080022c8 <commandTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_commandTask */
void commandTask(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN commandTask */
	uint32_t u32Cmd;
	uint16_t distanceCmd = 0, angleCmd = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	81fb      	strh	r3, [r7, #14]
 80022d4:	2300      	movs	r3, #0
 80022d6:	81bb      	strh	r3, [r7, #12]

	/* Infinite loop */
	for(;;)
	{
		if (PopFromQueue_MTR_Cmd(&u32Cmd))
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ff01 	bl	80010e4 <PopFromQueue_MTR_Cmd>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 82b3 	beq.w	8002850 <commandTask+0x588>
		{
			speedCmd = ((u32Cmd % 100000) / 1000.0f) * MAX_ENCODER_SPEED;
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	0953      	lsrs	r3, r2, #5
 80022ee:	49ae      	ldr	r1, [pc, #696]	@ (80025a8 <commandTask+0x2e0>)
 80022f0:	fba1 1303 	umull	r1, r3, r1, r3
 80022f4:	09db      	lsrs	r3, r3, #7
 80022f6:	49ad      	ldr	r1, [pc, #692]	@ (80025ac <commandTask+0x2e4>)
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002306:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 80025b0 <commandTask+0x2e8>
 800230a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230e:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80025b4 <commandTask+0x2ec>
 8002312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231a:	ee17 3a90 	vmov	r3, s15
 800231e:	b29a      	uxth	r2, r3
 8002320:	4ba5      	ldr	r3, [pc, #660]	@ (80025b8 <commandTask+0x2f0>)
 8002322:	801a      	strh	r2, [r3, #0]
			commandStatus = true;
 8002324:	4ba5      	ldr	r3, [pc, #660]	@ (80025bc <commandTask+0x2f4>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
			cmdID = u32Cmd / 100000;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	4a9e      	ldr	r2, [pc, #632]	@ (80025a8 <commandTask+0x2e0>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	09db      	lsrs	r3, r3, #7
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4ba1      	ldr	r3, [pc, #644]	@ (80025c0 <commandTask+0x2f8>)
 800233a:	701a      	strb	r2, [r3, #0]
			if(cmdID != MOVE_FORWARD && cmdID != MOVE_BACKWARD && cmdID != STOP && cmdID != SNAP)
 800233c:	4ba0      	ldr	r3, [pc, #640]	@ (80025c0 <commandTask+0x2f8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d031      	beq.n	80023a8 <commandTask+0xe0>
 8002344:	4b9e      	ldr	r3, [pc, #632]	@ (80025c0 <commandTask+0x2f8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d02d      	beq.n	80023a8 <commandTask+0xe0>
 800234c:	4b9c      	ldr	r3, [pc, #624]	@ (80025c0 <commandTask+0x2f8>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b0b      	cmp	r3, #11
 8002352:	d029      	beq.n	80023a8 <commandTask+0xe0>
 8002354:	4b9a      	ldr	r3, [pc, #616]	@ (80025c0 <commandTask+0x2f8>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d025      	beq.n	80023a8 <commandTask+0xe0>
			{
				angleCmd      = u32Cmd % 1000;
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	4b99      	ldr	r3, [pc, #612]	@ (80025c4 <commandTask+0x2fc>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	81bb      	strh	r3, [r7, #12]
				targetAngle = normalizeAngle(heading + angleCmd);
 8002372:	89bb      	ldrh	r3, [r7, #12]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237c:	4b92      	ldr	r3, [pc, #584]	@ (80025c8 <commandTask+0x300>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	f7ff fec5 	bl	8002118 <normalizeAngle>
 800238e:	eef0 7a40 	vmov.f32	s15, s0
 8002392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002396:	ee17 3a90 	vmov	r3, s15
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b8b      	ldr	r3, [pc, #556]	@ (80025cc <commandTask+0x304>)
 800239e:	801a      	strh	r2, [r3, #0]
				targetDistance  = 0;
 80023a0:	4b8b      	ldr	r3, [pc, #556]	@ (80025d0 <commandTask+0x308>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e01f      	b.n	80023e8 <commandTask+0x120>
			}
			else
			{
				distanceCmd = (u32Cmd % 1000) * PULSE_PER_DISTANCE; // Convert duty cycle to encoder count
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	4b86      	ldr	r3, [pc, #536]	@ (80025c4 <commandTask+0x2fc>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f8a1 	bl	8000504 <__aeabi_ui2d>
 80023c2:	a377      	add	r3, pc, #476	@ (adr r3, 80025a0 <commandTask+0x2d8>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f916 	bl	80005f8 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fbe8 	bl	8000ba8 <__aeabi_d2uiz>
 80023d8:	4603      	mov	r3, r0
 80023da:	81fb      	strh	r3, [r7, #14]
				targetDistance = distanceCmd;
 80023dc:	4a7c      	ldr	r2, [pc, #496]	@ (80025d0 <commandTask+0x308>)
 80023de:	89fb      	ldrh	r3, [r7, #14]
 80023e0:	8013      	strh	r3, [r2, #0]
				targetAngle = 0;
 80023e2:	4b7a      	ldr	r3, [pc, #488]	@ (80025cc <commandTask+0x304>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	801a      	strh	r2, [r3, #0]
			//SendMsg_RPI((uint8_t*)debugBuffer, strlen(debugBuffer));

			//float newTarget = heading;

			// **Execute Command**
			switch (cmdID)
 80023e8:	4b75      	ldr	r3, [pc, #468]	@ (80025c0 <commandTask+0x2f8>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	2b0b      	cmp	r3, #11
 80023f0:	f200 822e 	bhi.w	8002850 <commandTask+0x588>
 80023f4:	a201      	add	r2, pc, #4	@ (adr r2, 80023fc <commandTask+0x134>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	0800242d 	.word	0x0800242d
 8002400:	08002485 	.word	0x08002485
 8002404:	080024e3 	.word	0x080024e3
 8002408:	0800253f 	.word	0x0800253f
 800240c:	080025f5 	.word	0x080025f5
 8002410:	08002651 	.word	0x08002651
 8002414:	080026ad 	.word	0x080026ad
 8002418:	08002709 	.word	0x08002709
 800241c:	08002765 	.word	0x08002765
 8002420:	080027c1 	.word	0x080027c1
 8002424:	0800281d 	.word	0x0800281d
 8002428:	08002847 	.word	0x08002847
			{
			case MOVE_FORWARD:
				faceFront();
 800242c:	f7ff fc82 	bl	8001d34 <faceFront>
				leftTotalCount = 0; // Reset encoder counts
 8002430:	4b68      	ldr	r3, [pc, #416]	@ (80025d4 <commandTask+0x30c>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
				rightTotalCount = 0;
 8002436:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <commandTask+0x310>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 800243c:	4b67      	ldr	r3, [pc, #412]	@ (80025dc <commandTask+0x314>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002444:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <commandTask+0x318>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
				resetEncoderFlag = true;
 800244c:	4b65      	ldr	r3, [pc, #404]	@ (80025e4 <commandTask+0x31c>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
				if (osMutexAcquire(headingMutex, osWaitForever) == osOK) {
 8002452:	4b65      	ldr	r3, [pc, #404]	@ (80025e8 <commandTask+0x320>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800245a:	4618      	mov	r0, r3
 800245c:	f006 fbb1 	bl	8008bc2 <osMutexAcquire>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <commandTask+0x1b0>
					targetHeading = heading;
 8002466:	4b58      	ldr	r3, [pc, #352]	@ (80025c8 <commandTask+0x300>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a60      	ldr	r2, [pc, #384]	@ (80025ec <commandTask+0x324>)
 800246c:	6013      	str	r3, [r2, #0]
					osMutexRelease(headingMutex);
 800246e:	4b5e      	ldr	r3, [pc, #376]	@ (80025e8 <commandTask+0x320>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f006 fbf0 	bl	8008c58 <osMutexRelease>
				}
				setMotorForward();
 8002478:	f7ff fc8e 	bl	8001d98 <setMotorForward>
				//PID_init(&left_pid, PID_POSITION, pid_param_left, max_out, max_iout);
				//PID_init(&right_pid, PID_POSITION, pid_param_right, max_out, max_iout);
				commandStatus = true; // Set command status to true
 800247c:	4b4f      	ldr	r3, [pc, #316]	@ (80025bc <commandTask+0x2f4>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
				break;
 8002482:	e1e5      	b.n	8002850 <commandTask+0x588>
			case MOVE_BACKWARD:
				faceFront();
 8002484:	f7ff fc56 	bl	8001d34 <faceFront>
				leftTotalCount = 0; // Reset encoder counts
 8002488:	4b52      	ldr	r3, [pc, #328]	@ (80025d4 <commandTask+0x30c>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
				rightTotalCount = 0;
 800248e:	4b52      	ldr	r3, [pc, #328]	@ (80025d8 <commandTask+0x310>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002494:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <commandTask+0x314>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim4, 0);
 800249c:	4b50      	ldr	r3, [pc, #320]	@ (80025e0 <commandTask+0x318>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
				resetEncoderFlag = true;
 80024a4:	4b4f      	ldr	r3, [pc, #316]	@ (80025e4 <commandTask+0x31c>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
				osDelay(100);
 80024aa:	2064      	movs	r0, #100	@ 0x64
 80024ac:	f006 fae8 	bl	8008a80 <osDelay>
				if (osMutexAcquire(headingMutex, osWaitForever) == osOK) {
 80024b0:	4b4d      	ldr	r3, [pc, #308]	@ (80025e8 <commandTask+0x320>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b8:	4618      	mov	r0, r3
 80024ba:	f006 fb82 	bl	8008bc2 <osMutexAcquire>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <commandTask+0x20e>
					targetHeading = heading;
 80024c4:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <commandTask+0x300>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a48      	ldr	r2, [pc, #288]	@ (80025ec <commandTask+0x324>)
 80024ca:	6013      	str	r3, [r2, #0]
					osMutexRelease(headingMutex);
 80024cc:	4b46      	ldr	r3, [pc, #280]	@ (80025e8 <commandTask+0x320>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f006 fbc1 	bl	8008c58 <osMutexRelease>
				}
				setMotorBackward();
 80024d6:	f7ff fc7f 	bl	8001dd8 <setMotorBackward>
				//PID_init(&left_pid, PID_POSITION, pid_param_left, max_out, max_iout);
				//PID_init(&right_pid, PID_POSITION, pid_param_right, max_out, max_iout);
				commandStatus = true; // Set command status to true
 80024da:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <commandTask+0x2f4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
				break;
 80024e0:	e1b6      	b.n	8002850 <commandTask+0x588>
			case TURN_FORWARD_LEFT:
				targetAngle = normalizeAngle(heading - (u32Cmd % 1000));
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <commandTask+0x300>)
 80024e4:	ed93 7a00 	vldr	s14, [r3]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <commandTask+0x2fc>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	eeb0 0a67 	vmov.f32	s0, s15
 800250c:	f7ff fe04 	bl	8002118 <normalizeAngle>
 8002510:	eef0 7a40 	vmov.f32	s15, s0
 8002514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002518:	ee17 3a90 	vmov	r3, s15
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <commandTask+0x304>)
 8002520:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 8002522:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <commandTask+0x308>)
 8002524:	2200      	movs	r2, #0
 8002526:	801a      	strh	r2, [r3, #0]
				turnLeft();
 8002528:	f7ff fbcc 	bl	8001cc4 <turnLeft>
				osDelay(100);
 800252c:	2064      	movs	r0, #100	@ 0x64
 800252e:	f006 faa7 	bl	8008a80 <osDelay>
				setMotorForward();
 8002532:	f7ff fc31 	bl	8001d98 <setMotorForward>
				Hdirection = 1;
 8002536:	4b2e      	ldr	r3, [pc, #184]	@ (80025f0 <commandTask+0x328>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
				break;
 800253c:	e188      	b.n	8002850 <commandTask+0x588>
			case TURN_FORWARD_RIGHT:
				targetAngle = normalizeAngle(heading + (u32Cmd % 1000));
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <commandTask+0x2fc>)
 8002542:	fba3 1302 	umull	r1, r3, r3, r2
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <commandTask+0x300>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	eeb0 0a67 	vmov.f32	s0, s15
 8002568:	f7ff fdd6 	bl	8002118 <normalizeAngle>
 800256c:	eef0 7a40 	vmov.f32	s15, s0
 8002570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002574:	ee17 3a90 	vmov	r3, s15
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <commandTask+0x304>)
 800257c:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 800257e:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <commandTask+0x308>)
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
				turnRight();
 8002584:	f7ff fbac 	bl	8001ce0 <turnRight>
				osDelay(100);
 8002588:	2064      	movs	r0, #100	@ 0x64
 800258a:	f006 fa79 	bl	8008a80 <osDelay>
				setMotorForward();
 800258e:	f7ff fc03 	bl	8001d98 <setMotorForward>
				Hdirection = 2;
 8002592:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <commandTask+0x328>)
 8002594:	2202      	movs	r2, #2
 8002596:	701a      	strb	r2, [r3, #0]
				break;
 8002598:	e15a      	b.n	8002850 <commandTask+0x588>
 800259a:	bf00      	nop
 800259c:	f3af 8000 	nop.w
 80025a0:	38380e58 	.word	0x38380e58
 80025a4:	404fd3ad 	.word	0x404fd3ad
 80025a8:	0a7c5ac5 	.word	0x0a7c5ac5
 80025ac:	000186a0 	.word	0x000186a0
 80025b0:	447a0000 	.word	0x447a0000
 80025b4:	45b6e000 	.word	0x45b6e000
 80025b8:	200004b6 	.word	0x200004b6
 80025bc:	200004bc 	.word	0x200004bc
 80025c0:	2000057c 	.word	0x2000057c
 80025c4:	10624dd3 	.word	0x10624dd3
 80025c8:	200004c0 	.word	0x200004c0
 80025cc:	200004ba 	.word	0x200004ba
 80025d0:	200004b8 	.word	0x200004b8
 80025d4:	200004cc 	.word	0x200004cc
 80025d8:	200004d0 	.word	0x200004d0
 80025dc:	20000350 	.word	0x20000350
 80025e0:	20000398 	.word	0x20000398
 80025e4:	20000584 	.word	0x20000584
 80025e8:	20000580 	.word	0x20000580
 80025ec:	20000578 	.word	0x20000578
 80025f0:	200004ca 	.word	0x200004ca
			case TURN_BACKWARD_LEFT:
				targetAngle = normalizeAngle(heading + (u32Cmd % 1000));
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	4b98      	ldr	r3, [pc, #608]	@ (8002858 <commandTask+0x590>)
 80025f8:	fba3 1302 	umull	r1, r3, r3, r2
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002610:	4b92      	ldr	r3, [pc, #584]	@ (800285c <commandTask+0x594>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	eeb0 0a67 	vmov.f32	s0, s15
 800261e:	f7ff fd7b 	bl	8002118 <normalizeAngle>
 8002622:	eef0 7a40 	vmov.f32	s15, s0
 8002626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262a:	ee17 3a90 	vmov	r3, s15
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b8b      	ldr	r3, [pc, #556]	@ (8002860 <commandTask+0x598>)
 8002632:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 8002634:	4b8b      	ldr	r3, [pc, #556]	@ (8002864 <commandTask+0x59c>)
 8002636:	2200      	movs	r2, #0
 8002638:	801a      	strh	r2, [r3, #0]
				turnLeft();
 800263a:	f7ff fb43 	bl	8001cc4 <turnLeft>
				osDelay(100);
 800263e:	2064      	movs	r0, #100	@ 0x64
 8002640:	f006 fa1e 	bl	8008a80 <osDelay>
				setMotorBackward();
 8002644:	f7ff fbc8 	bl	8001dd8 <setMotorBackward>
				Hdirection = 3;
 8002648:	4b87      	ldr	r3, [pc, #540]	@ (8002868 <commandTask+0x5a0>)
 800264a:	2203      	movs	r2, #3
 800264c:	701a      	strb	r2, [r3, #0]
				break;
 800264e:	e0ff      	b.n	8002850 <commandTask+0x588>
			case TURN_BACKWARD_RIGHT:
				targetAngle = normalizeAngle(heading - (u32Cmd % 1000));
 8002650:	4b82      	ldr	r3, [pc, #520]	@ (800285c <commandTask+0x594>)
 8002652:	ed93 7a00 	vldr	s14, [r3]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4b7f      	ldr	r3, [pc, #508]	@ (8002858 <commandTask+0x590>)
 800265a:	fba3 1302 	umull	r1, r3, r3, r2
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	f7ff fd4d 	bl	8002118 <normalizeAngle>
 800267e:	eef0 7a40 	vmov.f32	s15, s0
 8002682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002686:	ee17 3a90 	vmov	r3, s15
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b74      	ldr	r3, [pc, #464]	@ (8002860 <commandTask+0x598>)
 800268e:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 8002690:	4b74      	ldr	r3, [pc, #464]	@ (8002864 <commandTask+0x59c>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
				turnRight();
 8002696:	f7ff fb23 	bl	8001ce0 <turnRight>
				osDelay(100);
 800269a:	2064      	movs	r0, #100	@ 0x64
 800269c:	f006 f9f0 	bl	8008a80 <osDelay>
				setMotorBackward();
 80026a0:	f7ff fb9a 	bl	8001dd8 <setMotorBackward>
				Hdirection = 4;
 80026a4:	4b70      	ldr	r3, [pc, #448]	@ (8002868 <commandTask+0x5a0>)
 80026a6:	2204      	movs	r2, #4
 80026a8:	701a      	strb	r2, [r3, #0]
				break;
 80026aa:	e0d1      	b.n	8002850 <commandTask+0x588>
			case OFFSET_FORWARD_LEFT:
				targetAngle = normalizeAngle(heading - (u32Cmd % 1000));
 80026ac:	4b6b      	ldr	r3, [pc, #428]	@ (800285c <commandTask+0x594>)
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	4b68      	ldr	r3, [pc, #416]	@ (8002858 <commandTask+0x590>)
 80026b6:	fba3 1302 	umull	r1, r3, r3, r2
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	f7ff fd1f 	bl	8002118 <normalizeAngle>
 80026da:	eef0 7a40 	vmov.f32	s15, s0
 80026de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e2:	ee17 3a90 	vmov	r3, s15
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002860 <commandTask+0x598>)
 80026ea:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 80026ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <commandTask+0x59c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
				offsetLeft();
 80026f2:	f7ff fb03 	bl	8001cfc <offsetLeft>
				osDelay(100);
 80026f6:	2064      	movs	r0, #100	@ 0x64
 80026f8:	f006 f9c2 	bl	8008a80 <osDelay>
				setMotorForward();
 80026fc:	f7ff fb4c 	bl	8001d98 <setMotorForward>
				Hdirection = 1;
 8002700:	4b59      	ldr	r3, [pc, #356]	@ (8002868 <commandTask+0x5a0>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
				break;
 8002706:	e0a3      	b.n	8002850 <commandTask+0x588>
			case OFFSET_FORWARD_RIGHT:
				targetAngle = normalizeAngle(heading + (u32Cmd % 1000));
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	4b53      	ldr	r3, [pc, #332]	@ (8002858 <commandTask+0x590>)
 800270c:	fba3 1302 	umull	r1, r3, r3, r2
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002724:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <commandTask+0x594>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f7ff fcf1 	bl	8002118 <normalizeAngle>
 8002736:	eef0 7a40 	vmov.f32	s15, s0
 800273a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273e:	ee17 3a90 	vmov	r3, s15
 8002742:	b29a      	uxth	r2, r3
 8002744:	4b46      	ldr	r3, [pc, #280]	@ (8002860 <commandTask+0x598>)
 8002746:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 8002748:	4b46      	ldr	r3, [pc, #280]	@ (8002864 <commandTask+0x59c>)
 800274a:	2200      	movs	r2, #0
 800274c:	801a      	strh	r2, [r3, #0]
				offsetRight();
 800274e:	f7ff fae3 	bl	8001d18 <offsetRight>
				osDelay(100);
 8002752:	2064      	movs	r0, #100	@ 0x64
 8002754:	f006 f994 	bl	8008a80 <osDelay>
				setMotorForward();
 8002758:	f7ff fb1e 	bl	8001d98 <setMotorForward>
				Hdirection = 2;
 800275c:	4b42      	ldr	r3, [pc, #264]	@ (8002868 <commandTask+0x5a0>)
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]
				break;
 8002762:	e075      	b.n	8002850 <commandTask+0x588>
			case OFFSET_BACKWARD_LEFT:
				targetAngle = normalizeAngle(heading + (u32Cmd % 1000));
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <commandTask+0x590>)
 8002768:	fba3 1302 	umull	r1, r3, r3, r2
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002780:	4b36      	ldr	r3, [pc, #216]	@ (800285c <commandTask+0x594>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	f7ff fcc3 	bl	8002118 <normalizeAngle>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279a:	ee17 3a90 	vmov	r3, s15
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <commandTask+0x598>)
 80027a2:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 80027a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <commandTask+0x59c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]
				offsetLeft();
 80027aa:	f7ff faa7 	bl	8001cfc <offsetLeft>
				osDelay(100);
 80027ae:	2064      	movs	r0, #100	@ 0x64
 80027b0:	f006 f966 	bl	8008a80 <osDelay>
				setMotorBackward();
 80027b4:	f7ff fb10 	bl	8001dd8 <setMotorBackward>
				Hdirection  = 3;
 80027b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002868 <commandTask+0x5a0>)
 80027ba:	2203      	movs	r2, #3
 80027bc:	701a      	strb	r2, [r3, #0]
				break;
 80027be:	e047      	b.n	8002850 <commandTask+0x588>
			case OFFSET_BACKWARD_RIGHT:
				targetAngle = normalizeAngle(heading - (u32Cmd % 1000));
 80027c0:	4b26      	ldr	r3, [pc, #152]	@ (800285c <commandTask+0x594>)
 80027c2:	ed93 7a00 	vldr	s14, [r3]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <commandTask+0x590>)
 80027ca:	fba3 1302 	umull	r1, r3, r3, r2
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ea:	f7ff fc95 	bl	8002118 <normalizeAngle>
 80027ee:	eef0 7a40 	vmov.f32	s15, s0
 80027f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f6:	ee17 3a90 	vmov	r3, s15
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <commandTask+0x598>)
 80027fe:	801a      	strh	r2, [r3, #0]
				targetDistance = 0;
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <commandTask+0x59c>)
 8002802:	2200      	movs	r2, #0
 8002804:	801a      	strh	r2, [r3, #0]
				offsetRight();
 8002806:	f7ff fa87 	bl	8001d18 <offsetRight>
				osDelay(100);
 800280a:	2064      	movs	r0, #100	@ 0x64
 800280c:	f006 f938 	bl	8008a80 <osDelay>
				setMotorBackward();
 8002810:	f7ff fae2 	bl	8001dd8 <setMotorBackward>
				Hdirection = 4;
 8002814:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <commandTask+0x5a0>)
 8002816:	2204      	movs	r2, #4
 8002818:	701a      	strb	r2, [r3, #0]
				break;
 800281a:	e019      	b.n	8002850 <commandTask+0x588>
			case STOP:
				motorStop();
 800281c:	f7ff fafc 	bl	8001e18 <motorStop>
				osDelay(100);
 8002820:	2064      	movs	r0, #100	@ 0x64
 8002822:	f006 f92d 	bl	8008a80 <osDelay>
				SendMsg_RPI((uint8_t*)"ACK\n", strlen("ACK\n"));
 8002826:	2104      	movs	r1, #4
 8002828:	4810      	ldr	r0, [pc, #64]	@ (800286c <commandTask+0x5a4>)
 800282a:	f7ff f917 	bl	8001a5c <SendMsg_RPI>
				faceFront();
 800282e:	f7ff fa81 	bl	8001d34 <faceFront>
				commandStatus = false;
 8002832:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <commandTask+0x5a8>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
				targetDistance = 0;
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <commandTask+0x59c>)
 800283a:	2200      	movs	r2, #0
 800283c:	801a      	strh	r2, [r3, #0]
				targetAngle = 0;
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <commandTask+0x598>)
 8002840:	2200      	movs	r2, #0
 8002842:	801a      	strh	r2, [r3, #0]
				break;
 8002844:	e004      	b.n	8002850 <commandTask+0x588>
			case SNAP:
				SendMsg_RPI((uint8_t*)"SNAP\n", strlen("SNAP\n"));
 8002846:	2105      	movs	r1, #5
 8002848:	480a      	ldr	r0, [pc, #40]	@ (8002874 <commandTask+0x5ac>)
 800284a:	f7ff f907 	bl	8001a5c <SendMsg_RPI>
				break;
 800284e:	bf00      	nop
			}
		}
		osDelay(100);
 8002850:	2064      	movs	r0, #100	@ 0x64
 8002852:	f006 f915 	bl	8008a80 <osDelay>
		if (PopFromQueue_MTR_Cmd(&u32Cmd))
 8002856:	e53f      	b.n	80022d8 <commandTask+0x10>
 8002858:	10624dd3 	.word	0x10624dd3
 800285c:	200004c0 	.word	0x200004c0
 8002860:	200004ba 	.word	0x200004ba
 8002864:	200004b8 	.word	0x200004b8
 8002868:	200004ca 	.word	0x200004ca
 800286c:	0800ec6c 	.word	0x0800ec6c
 8002870:	200004bc 	.word	0x200004bc
 8002874:	0800ec74 	.word	0x0800ec74

08002878 <imuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_imuTask */
void imuTask(void *argument)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af04      	add	r7, sp, #16
 800287e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN imuTask */
	// 1. Calibrate offset at startup (robot must be still)
	CalibrateGyroZOffset(&hi2c1);
 8002880:	4844      	ldr	r0, [pc, #272]	@ (8002994 <imuTask+0x11c>)
 8002882:	f7ff fb9d 	bl	8001fc0 <CalibrateGyroZOffset>

	// 2. Initialize heading to 0
	heading = 0.0f;
 8002886:	4b44      	ldr	r3, [pc, #272]	@ (8002998 <imuTask+0x120>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

	// Remember last time for delta-t
	uint32_t lastTick = HAL_GetTick();
 800288e:	f001 fcd3 	bl	8004238 <HAL_GetTick>
 8002892:	61f8      	str	r0, [r7, #28]

	/* Infinite loop */
	for(;;)
	{
		// 3. Compute time step
		uint32_t currentTick = HAL_GetTick();
 8002894:	f001 fcd0 	bl	8004238 <HAL_GetTick>
 8002898:	61b8      	str	r0, [r7, #24]
		float dt = (currentTick - lastTick) / 1000.0f;  // ms -> s
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028a8:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800299c <imuTask+0x124>
 80028ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b0:	edc7 7a05 	vstr	s15, [r7, #20]
		lastTick = currentTick;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	61fb      	str	r3, [r7, #28]

		// 4. Read raw gyroZ
		int16_t gyroZ_raw = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	827b      	strh	r3, [r7, #18]
		__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ_raw);
 80028bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028c0:	9302      	str	r3, [sp, #8]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <imuTask+0x128>)
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2301      	movs	r3, #1
 80028cc:	2237      	movs	r2, #55	@ 0x37
 80028ce:	21d0      	movs	r1, #208	@ 0xd0
 80028d0:	4830      	ldr	r0, [pc, #192]	@ (8002994 <imuTask+0x11c>)
 80028d2:	f002 feab 	bl	800562c <HAL_I2C_Mem_Read>
 80028d6:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <imuTask+0x128>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	b21a      	sxth	r2, r3
 80028de:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <imuTask+0x128>)
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	827b      	strh	r3, [r7, #18]

		// 5. Subtract offset
		int16_t gyroZ_corrected = gyroZ_raw - gyroZ_offset;
 80028e8:	8a7a      	ldrh	r2, [r7, #18]
 80028ea:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <imuTask+0x12c>)
 80028ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	823b      	strh	r3, [r7, #16]

		// 6. Convert to deg/s
		float gyroZ_dps = gyroZ_corrected / GYRO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 80028f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002904:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80029a8 <imuTask+0x130>
 8002908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (osMutexAcquire(headingMutex, osWaitForever) == osOK) {
 8002910:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <imuTask+0x134>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002918:	4618      	mov	r0, r3
 800291a:	f006 f952 	bl	8008bc2 <osMutexAcquire>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d132      	bne.n	800298a <imuTask+0x112>
			heading -= gyroZ_dps * dt;
 8002924:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <imuTask+0x120>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	edd7 6a03 	vldr	s13, [r7, #12]
 800292e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <imuTask+0x120>)
 800293c:	edc3 7a00 	vstr	s15, [r3]
			heading = fmodf(heading, 360.0f);
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <imuTask+0x120>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80029b0 <imuTask+0x138>
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	f00c f88b 	bl	800ea68 <fmodf>
 8002952:	eef0 7a40 	vmov.f32	s15, s0
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <imuTask+0x120>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
			if (heading < 0.0f) heading += 360.0f;
 800295c:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <imuTask+0x120>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	d509      	bpl.n	8002980 <imuTask+0x108>
 800296c:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <imuTask+0x120>)
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80029b0 <imuTask+0x138>
 8002976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <imuTask+0x120>)
 800297c:	edc3 7a00 	vstr	s15, [r3]
			osMutexRelease(headingMutex);  // 🔹 Unlock the mutex
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <imuTask+0x134>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f006 f967 	bl	8008c58 <osMutexRelease>
		}

		// Optional: debug print
		//snprintf(debugBuffer, sizeof(debugBuffer), "Heading: %.2f\r\n", heading);
		//SendMsg_RPI((uint8_t*)debugBuffer, strlen(debugBuffer));
		osDelay(50);
 800298a:	2032      	movs	r0, #50	@ 0x32
 800298c:	f006 f878 	bl	8008a80 <osDelay>
	{
 8002990:	e780      	b.n	8002894 <imuTask+0x1c>
 8002992:	bf00      	nop
 8002994:	200002b4 	.word	0x200002b4
 8002998:	200004c0 	.word	0x200004c0
 800299c:	447a0000 	.word	0x447a0000
 80029a0:	200004c8 	.word	0x200004c8
 80029a4:	200004c4 	.word	0x200004c4
 80029a8:	41833333 	.word	0x41833333
 80029ac:	20000580 	.word	0x20000580
 80029b0:	43b40000 	.word	0x43b40000
 80029b4:	00000000 	.word	0x00000000

080029b8 <pidTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_pidTask */
void pidTask(void *argument)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	@ 0x38
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN pidTask */
	uint16_t leftCount1 = 0, rightCount1 = 0,
 80029c0:	2300      	movs	r3, #0
 80029c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80029c4:	2300      	movs	r3, #0
 80029c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
			leftCount2 = 0, rightCount2 = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	867b      	strh	r3, [r7, #50]	@ 0x32
 80029cc:	2300      	movs	r3, #0
 80029ce:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint32_t leftDelta = 0, rightDelta = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]

	float kp_heading = 4.2, ki_heading = 0.1, kd_heading = 1.2;
 80029d8:	4ba5      	ldr	r3, [pc, #660]	@ (8002c70 <pidTask+0x2b8>)
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	4ba5      	ldr	r3, [pc, #660]	@ (8002c74 <pidTask+0x2bc>)
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4ba5      	ldr	r3, [pc, #660]	@ (8002c78 <pidTask+0x2c0>)
 80029e2:	613b      	str	r3, [r7, #16]

	static float distance_error_sum = 0.0f;
	static float distance_last_error = 0.0f;

	leftCount1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim2);
 80029e4:	4ba5      	ldr	r3, [pc, #660]	@ (8002c7c <pidTask+0x2c4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
	rightCount1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4);
 80029ec:	4ba4      	ldr	r3, [pc, #656]	@ (8002c80 <pidTask+0x2c8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	86bb      	strh	r3, [r7, #52]	@ 0x34

	if (commandStatus && targetHeading == 0) {
 80029f4:	4ba3      	ldr	r3, [pc, #652]	@ (8002c84 <pidTask+0x2cc>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <pidTask+0x5c>
 80029fc:	4ba2      	ldr	r3, [pc, #648]	@ (8002c88 <pidTask+0x2d0>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	d103      	bne.n	8002a14 <pidTask+0x5c>
		targetHeading = heading;
 8002a0c:	4b9f      	ldr	r3, [pc, #636]	@ (8002c8c <pidTask+0x2d4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a9d      	ldr	r2, [pc, #628]	@ (8002c88 <pidTask+0x2d0>)
 8002a12:	6013      	str	r3, [r2, #0]
	}

	/* Infinite loop */
	for(;;)
	{
		if (commandStatus)
 8002a14:	4b9b      	ldr	r3, [pc, #620]	@ (8002c84 <pidTask+0x2cc>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8223 	beq.w	8002e64 <pidTask+0x4ac>
		{
			if (resetEncoderFlag)
 8002a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8002c90 <pidTask+0x2d8>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <pidTask+0x84>
			{
				leftCount1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8002a26:	4b95      	ldr	r3, [pc, #596]	@ (8002c7c <pidTask+0x2c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
				rightCount1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8002a2e:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <pidTask+0x2c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	86bb      	strh	r3, [r7, #52]	@ 0x34
				resetEncoderFlag = false;
 8002a36:	4b96      	ldr	r3, [pc, #600]	@ (8002c90 <pidTask+0x2d8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
			}

			if(targetDistance != 0 && targetAngle == 0)
 8002a3c:	4b95      	ldr	r3, [pc, #596]	@ (8002c94 <pidTask+0x2dc>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 820a 	beq.w	8002e5c <pidTask+0x4a4>
 8002a48:	4b93      	ldr	r3, [pc, #588]	@ (8002c98 <pidTask+0x2e0>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 8204 	bne.w	8002e5c <pidTask+0x4a4>
			{
				// Get encoder readings
				leftCount2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8002a54:	4b89      	ldr	r3, [pc, #548]	@ (8002c7c <pidTask+0x2c4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	867b      	strh	r3, [r7, #50]	@ 0x32
				rightCount2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8002a5c:	4b88      	ldr	r3, [pc, #544]	@ (8002c80 <pidTask+0x2c8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	863b      	strh	r3, [r7, #48]	@ 0x30

				// Compute encoder delta
				leftDelta = getEncoderDelta(leftCount1, leftCount2, &htim2);
 8002a64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a66:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8002a68:	4a84      	ldr	r2, [pc, #528]	@ (8002c7c <pidTask+0x2c4>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fa64 	bl	8001f38 <getEncoderDelta>
 8002a70:	6238      	str	r0, [r7, #32]
				rightDelta = getEncoderDelta(rightCount1, rightCount2, &htim4);
 8002a72:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002a74:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8002a76:	4a82      	ldr	r2, [pc, #520]	@ (8002c80 <pidTask+0x2c8>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fa5d 	bl	8001f38 <getEncoderDelta>
 8002a7e:	61f8      	str	r0, [r7, #28]

				// Accumulate total distance traveled
				leftTotalCount += leftDelta;
 8002a80:	4b86      	ldr	r3, [pc, #536]	@ (8002c9c <pidTask+0x2e4>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	4413      	add	r3, r2
 8002a88:	4a84      	ldr	r2, [pc, #528]	@ (8002c9c <pidTask+0x2e4>)
 8002a8a:	6013      	str	r3, [r2, #0]
				rightTotalCount += rightDelta;
 8002a8c:	4b84      	ldr	r3, [pc, #528]	@ (8002ca0 <pidTask+0x2e8>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a82      	ldr	r2, [pc, #520]	@ (8002ca0 <pidTask+0x2e8>)
 8002a96:	6013      	str	r3, [r2, #0]

				// Compute motor output using PID
				if(cmdID == MOVE_FORWARD){
 8002a98:	4b82      	ldr	r3, [pc, #520]	@ (8002ca4 <pidTask+0x2ec>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d132      	bne.n	8002b06 <pidTask+0x14e>
					leftOutputPWM = PID_calc(&forward_pid, leftTotalCount, targetDistance);
 8002aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8002c9c <pidTask+0x2e4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aac:	4b79      	ldr	r3, [pc, #484]	@ (8002c94 <pidTask+0x2dc>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	ee07 3a10 	vmov	s14, r3
 8002ab6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002aba:	eef0 0a47 	vmov.f32	s1, s14
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	4879      	ldr	r0, [pc, #484]	@ (8002ca8 <pidTask+0x2f0>)
 8002ac4:	f000 fe85 	bl	80037d2 <PID_calc>
 8002ac8:	eef0 7a40 	vmov.f32	s15, s0
 8002acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad0:	ee17 3a90 	vmov	r3, s15
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b75      	ldr	r3, [pc, #468]	@ (8002cac <pidTask+0x2f4>)
 8002ad8:	801a      	strh	r2, [r3, #0]
					leftOutputPWM*= 0.6;
 8002ada:	4b74      	ldr	r3, [pc, #464]	@ (8002cac <pidTask+0x2f4>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd1f 	bl	8000524 <__aeabi_i2d>
 8002ae6:	a360      	add	r3, pc, #384	@ (adr r3, 8002c68 <pidTask+0x2b0>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fd84 	bl	80005f8 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fe f856 	bl	8000ba8 <__aeabi_d2uiz>
 8002afc:	4603      	mov	r3, r0
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b6a      	ldr	r3, [pc, #424]	@ (8002cac <pidTask+0x2f4>)
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	e01c      	b.n	8002b40 <pidTask+0x188>
				}
				else {
					leftOutputPWM = PID_calc(&backward_pid, leftTotalCount, targetDistance);
 8002b06:	4b65      	ldr	r3, [pc, #404]	@ (8002c9c <pidTask+0x2e4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	4b60      	ldr	r3, [pc, #384]	@ (8002c94 <pidTask+0x2dc>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ee07 3a10 	vmov	s14, r3
 8002b1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002b20:	eef0 0a47 	vmov.f32	s1, s14
 8002b24:	eeb0 0a67 	vmov.f32	s0, s15
 8002b28:	4861      	ldr	r0, [pc, #388]	@ (8002cb0 <pidTask+0x2f8>)
 8002b2a:	f000 fe52 	bl	80037d2 <PID_calc>
 8002b2e:	eef0 7a40 	vmov.f32	s15, s0
 8002b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b36:	ee17 3a90 	vmov	r3, s15
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <pidTask+0x2f4>)
 8002b3e:	801a      	strh	r2, [r3, #0]
				}
				rightOutputPWM = leftOutputPWM;
 8002b40:	4b5a      	ldr	r3, [pc, #360]	@ (8002cac <pidTask+0x2f4>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb4 <pidTask+0x2fc>)
 8002b48:	801a      	strh	r2, [r3, #0]
				//leftOutputPWM = PID_calc(&left_pid, leftTotalCount, targetDistance);
				//rightOutputPWM = PID_calc(&right_pid, rightTotalCount, targetDistance);

				// Get IMU heading data
				float currentHeading;
				if (osMutexAcquire(headingMutex, osWaitForever) == osOK) {
 8002b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb8 <pidTask+0x300>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b52:	4618      	mov	r0, r3
 8002b54:	f006 f835 	bl	8008bc2 <osMutexAcquire>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <pidTask+0x1b6>
					currentHeading = heading;
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c8c <pidTask+0x2d4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
					osMutexRelease(headingMutex);
 8002b64:	4b54      	ldr	r3, [pc, #336]	@ (8002cb8 <pidTask+0x300>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f006 f875 	bl	8008c58 <osMutexRelease>
				}
				float headingError = targetHeading - currentHeading;
 8002b6e:	4b46      	ldr	r3, [pc, #280]	@ (8002c88 <pidTask+0x2d0>)
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

				// Normalize heading error (-180 to 180)
				if (headingError > 180.0f) headingError -= 360.0f;
 8002b80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b84:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8002cbc <pidTask+0x304>
 8002b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	dd08      	ble.n	8002ba4 <pidTask+0x1ec>
 8002b92:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b96:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002cc0 <pidTask+0x308>
 8002b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b9e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8002ba2:	e010      	b.n	8002bc6 <pidTask+0x20e>
				else if (headingError < -180.0f) headingError += 360.0f;
 8002ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ba8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002cc4 <pidTask+0x30c>
 8002bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	d507      	bpl.n	8002bc6 <pidTask+0x20e>
 8002bb6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002bba:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002cc0 <pidTask+0x308>
 8002bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bc2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

				float heading_derivative = headingError - distance_last_error;
 8002bc6:	4b40      	ldr	r3, [pc, #256]	@ (8002cc8 <pidTask+0x310>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd4:	edc7 7a03 	vstr	s15, [r7, #12]
				distance_error_sum += headingError;
 8002bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ccc <pidTask+0x314>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <pidTask+0x314>)
 8002be8:	edc3 7a00 	vstr	s15, [r3]

				// Integral Windup Prevention
				if (distance_error_sum > 50.0f) distance_error_sum = 50.0f;
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <pidTask+0x314>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002cd0 <pidTask+0x318>
 8002bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	dd02      	ble.n	8002c06 <pidTask+0x24e>
 8002c00:	4b32      	ldr	r3, [pc, #200]	@ (8002ccc <pidTask+0x314>)
 8002c02:	4a34      	ldr	r2, [pc, #208]	@ (8002cd4 <pidTask+0x31c>)
 8002c04:	601a      	str	r2, [r3, #0]
				if (distance_error_sum < -50.0f) distance_error_sum = -50.0f;
 8002c06:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <pidTask+0x314>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002cd8 <pidTask+0x320>
 8002c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	d502      	bpl.n	8002c20 <pidTask+0x268>
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <pidTask+0x314>)
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8002cdc <pidTask+0x324>)
 8002c1e:	601a      	str	r2, [r3, #0]

				// Compute Servo Angle Correction
				float servoCorrection;
				if (cmdID == MOVE_FORWARD) {
 8002c20:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <pidTask+0x2ec>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d15d      	bne.n	8002ce4 <pidTask+0x32c>
					servoCorrection = CENTER_POS_PWM + (kp_heading * headingError) +
 8002c28:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002ce0 <pidTask+0x328>
 8002c38:	ee37 7a87 	vadd.f32	s14, s15, s14
							(ki_heading * distance_error_sum) +
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <pidTask+0x314>)
 8002c3e:	edd3 6a00 	vldr	s13, [r3]
 8002c42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
					servoCorrection = CENTER_POS_PWM + (kp_heading * headingError) +
 8002c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
							(kd_heading * heading_derivative);
 8002c4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002c52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
					servoCorrection = CENTER_POS_PWM + (kp_heading * headingError) +
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002c62:	e05c      	b.n	8002d1e <pidTask+0x366>
 8002c64:	f3af 8000 	nop.w
 8002c68:	33333333 	.word	0x33333333
 8002c6c:	3fe33333 	.word	0x3fe33333
 8002c70:	40866666 	.word	0x40866666
 8002c74:	3dcccccd 	.word	0x3dcccccd
 8002c78:	3f99999a 	.word	0x3f99999a
 8002c7c:	20000350 	.word	0x20000350
 8002c80:	20000398 	.word	0x20000398
 8002c84:	200004bc 	.word	0x200004bc
 8002c88:	20000578 	.word	0x20000578
 8002c8c:	200004c0 	.word	0x200004c0
 8002c90:	20000584 	.word	0x20000584
 8002c94:	200004b8 	.word	0x200004b8
 8002c98:	200004ba 	.word	0x200004ba
 8002c9c:	200004cc 	.word	0x200004cc
 8002ca0:	200004d0 	.word	0x200004d0
 8002ca4:	2000057c 	.word	0x2000057c
 8002ca8:	200004d8 	.word	0x200004d8
 8002cac:	200004d4 	.word	0x200004d4
 8002cb0:	20000528 	.word	0x20000528
 8002cb4:	200004d6 	.word	0x200004d6
 8002cb8:	20000580 	.word	0x20000580
 8002cbc:	43340000 	.word	0x43340000
 8002cc0:	43b40000 	.word	0x43b40000
 8002cc4:	c3340000 	.word	0xc3340000
 8002cc8:	20000588 	.word	0x20000588
 8002ccc:	2000058c 	.word	0x2000058c
 8002cd0:	42480000 	.word	0x42480000
 8002cd4:	42480000 	.word	0x42480000
 8002cd8:	c2480000 	.word	0xc2480000
 8002cdc:	c2480000 	.word	0xc2480000
 8002ce0:	43170000 	.word	0x43170000
				} else {
					servoCorrection = CENTER_POS_PWM - (kp_heading * headingError) -
 8002ce4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf0:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002ce0 <pidTask+0x328>
 8002cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
							(ki_heading * distance_error_sum) -
 8002cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e78 <pidTask+0x4c0>)
 8002cfa:	edd3 6a00 	vldr	s13, [r3]
 8002cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
					servoCorrection = CENTER_POS_PWM - (kp_heading * headingError) -
 8002d06:	ee37 7a67 	vsub.f32	s14, s14, s15
							(kd_heading * heading_derivative);
 8002d0a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
					servoCorrection = CENTER_POS_PWM - (kp_heading * headingError) -
 8002d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				}


				// Clamp servo position within allowed range
				if (servoCorrection > (CENTER_POS_PWM + RIGHT_DELTA))
 8002d1e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d22:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002e7c <pidTask+0x4c4>
 8002d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	dd01      	ble.n	8002d34 <pidTask+0x37c>
					servoCorrection = CENTER_POS_PWM + RIGHT_DELTA;
 8002d30:	4b53      	ldr	r3, [pc, #332]	@ (8002e80 <pidTask+0x4c8>)
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
				if (servoCorrection < (CENTER_POS_PWM - LEFT_DELTA))
 8002d34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d38:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8002e84 <pidTask+0x4cc>
 8002d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	d501      	bpl.n	8002d4a <pidTask+0x392>
					servoCorrection = CENTER_POS_PWM - LEFT_DELTA;
 8002d46:	4b50      	ldr	r3, [pc, #320]	@ (8002e88 <pidTask+0x4d0>)
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24

				// Set Servo Position for Steering
				htim1.Instance->CCR4 = (uint16_t)servoCorrection;
 8002d4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d52:	ee17 3a90 	vmov	r3, s15
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <pidTask+0x4d4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	641a      	str	r2, [r3, #64]	@ 0x40
				// Debug Heading & Servo Correction
				//snprintf(debugBuffer, sizeof(debugBuffer), "Heading: %.2f, Target: %.2f, Error: %.2f, Servo: %.2f\n",
				//		currentHeading, targetHeading, headingError, servoCorrection);
				//SendMsg_RPI((uint8_t*)debugBuffer, strlen(debugBuffer));

				distance_last_error = headingError;
 8002d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e90 <pidTask+0x4d8>)
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	6013      	str	r3, [r2, #0]

				// Ensure PWM Values Stay in Range
				if (leftOutputPWM < 500) leftOutputPWM = 500;
 8002d64:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <pidTask+0x4dc>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d6e:	d203      	bcs.n	8002d78 <pidTask+0x3c0>
 8002d70:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <pidTask+0x4dc>)
 8002d72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d76:	801a      	strh	r2, [r3, #0]
				if (rightOutputPWM < 500) rightOutputPWM = 500;
 8002d78:	4b47      	ldr	r3, [pc, #284]	@ (8002e98 <pidTask+0x4e0>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d82:	d203      	bcs.n	8002d8c <pidTask+0x3d4>
 8002d84:	4b44      	ldr	r3, [pc, #272]	@ (8002e98 <pidTask+0x4e0>)
 8002d86:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d8a:	801a      	strh	r2, [r3, #0]
				if (leftOutputPWM > MAX_MOTOR_PWM) leftOutputPWM = MAX_MOTOR_PWM;
 8002d8c:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <pidTask+0x4dc>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d903      	bls.n	8002da2 <pidTask+0x3ea>
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e94 <pidTask+0x4dc>)
 8002d9c:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002da0:	801a      	strh	r2, [r3, #0]
				if (rightOutputPWM > MAX_MOTOR_PWM) rightOutputPWM = MAX_MOTOR_PWM;
 8002da2:	4b3d      	ldr	r3, [pc, #244]	@ (8002e98 <pidTask+0x4e0>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d903      	bls.n	8002db8 <pidTask+0x400>
 8002db0:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <pidTask+0x4e0>)
 8002db2:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002db6:	801a      	strh	r2, [r3, #0]

				// Set motor PWM
				setLeftPWM(leftOutputPWM * 0.85);
 8002db8:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <pidTask+0x4dc>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fbb0 	bl	8000524 <__aeabi_i2d>
 8002dc4:	a32a      	add	r3, pc, #168	@ (adr r3, 8002e70 <pidTask+0x4b8>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	f7fd fc15 	bl	80005f8 <__aeabi_dmul>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7fd fee7 	bl	8000ba8 <__aeabi_d2uiz>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ffb6 	bl	8001d50 <setLeftPWM>
				setRightPWM(rightOutputPWM * 0.85);
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <pidTask+0x4e0>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb9a 	bl	8000524 <__aeabi_i2d>
 8002df0:	a31f      	add	r3, pc, #124	@ (adr r3, 8002e70 <pidTask+0x4b8>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fbff 	bl	80005f8 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7fd fed1 	bl	8000ba8 <__aeabi_d2uiz>
 8002e06:	4603      	mov	r3, r0
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe ffb2 	bl	8001d74 <setRightPWM>



				// **Stop Condition: When distance is reached**
				if (leftTotalCount >= targetDistance || rightTotalCount >= targetDistance)
 8002e10:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <pidTask+0x4e4>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b21      	ldr	r3, [pc, #132]	@ (8002ea0 <pidTask+0x4e8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d907      	bls.n	8002e30 <pidTask+0x478>
 8002e20:	4b1e      	ldr	r3, [pc, #120]	@ (8002e9c <pidTask+0x4e4>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <pidTask+0x4ec>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d815      	bhi.n	8002e5c <pidTask+0x4a4>
				{
					motorStop();
 8002e30:	f7fe fff2 	bl	8001e18 <motorStop>
					commandStatus = false;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <pidTask+0x4f0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
					leftTotalCount = 0;
 8002e3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <pidTask+0x4e8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
					rightTotalCount = 0;
 8002e40:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <pidTask+0x4ec>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
					targetDistance = 0;
 8002e46:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <pidTask+0x4e4>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	801a      	strh	r2, [r3, #0]
					htim1.Instance->CCR4 = CENTER_POS_PWM;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <pidTask+0x4d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2297      	movs	r2, #151	@ 0x97
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40
					SendMsg_RPI((uint8_t*)"ACK\n", strlen("ACK\n"));
 8002e54:	2104      	movs	r1, #4
 8002e56:	4815      	ldr	r0, [pc, #84]	@ (8002eac <pidTask+0x4f4>)
 8002e58:	f7fe fe00 	bl	8001a5c <SendMsg_RPI>
				}
			}
			// Update last encoder readings
			leftCount1 = leftCount2;
 8002e5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
			rightCount1 = rightCount2;
 8002e60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002e62:	86bb      	strh	r3, [r7, #52]	@ 0x34
		}

		osDelay(20);
 8002e64:	2014      	movs	r0, #20
 8002e66:	f005 fe0b 	bl	8008a80 <osDelay>
		if (commandStatus)
 8002e6a:	e5d3      	b.n	8002a14 <pidTask+0x5c>
 8002e6c:	f3af 8000 	nop.w
 8002e70:	33333333 	.word	0x33333333
 8002e74:	3feb3333 	.word	0x3feb3333
 8002e78:	2000058c 	.word	0x2000058c
 8002e7c:	435d0000 	.word	0x435d0000
 8002e80:	435d0000 	.word	0x435d0000
 8002e84:	42d00000 	.word	0x42d00000
 8002e88:	42d00000 	.word	0x42d00000
 8002e8c:	20000308 	.word	0x20000308
 8002e90:	20000588 	.word	0x20000588
 8002e94:	200004d4 	.word	0x200004d4
 8002e98:	200004d6 	.word	0x200004d6
 8002e9c:	200004b8 	.word	0x200004b8
 8002ea0:	200004cc 	.word	0x200004cc
 8002ea4:	200004d0 	.word	0x200004d0
 8002ea8:	200004bc 	.word	0x200004bc
 8002eac:	0800ec6c 	.word	0x0800ec6c

08002eb0 <Ultrasonic_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ultrasonic_Task */
void Ultrasonic_Task(void *argument)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Ultrasonic_Task */
	uint32_t distance_cm = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		TriggerPulse();  // Send trigger pulse
 8002ebc:	f7fe ffd2 	bl	8001e64 <TriggerPulse>
		uint32_t echoTime = MeasureEchoTime();  // Measure pulse duration
 8002ec0:	f7fe ffec 	bl	8001e9c <MeasureEchoTime>
 8002ec4:	60b8      	str	r0, [r7, #8]
		distance_cm = CalculateDistance(echoTime);  // Convert to cm
 8002ec6:	68b8      	ldr	r0, [r7, #8]
 8002ec8:	f7ff f81a 	bl	8001f00 <CalculateDistance>
 8002ecc:	eef0 7a40 	vmov.f32	s15, s0
 8002ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed4:	ee17 3a90 	vmov	r3, s15
 8002ed8:	60fb      	str	r3, [r7, #12]

		// Update OLED Display
		//sprintf((char *)OLEDBuffer, "Dist: %lu cm", (unsigned long)distance_cm);
		//OLED_ShowString(10, 30, OLEDBuffer);
		//OLED_Refresh_Gram();
		osDelay(200);
 8002eda:	20c8      	movs	r0, #200	@ 0xc8
 8002edc:	f005 fdd0 	bl	8008a80 <osDelay>
	{
 8002ee0:	bf00      	nop
 8002ee2:	e7eb      	b.n	8002ebc <Ultrasonic_Task+0xc>
 8002ee4:	0000      	movs	r0, r0
	...

08002ee8 <Heading_PID>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Heading_PID */
void Heading_PID(void *argument)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b096      	sub	sp, #88	@ 0x58
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Heading_PID */
	float kp_left = 0.75, ki_left = 0.002, kd_left = 0.6;  // Fine-tuned for left turns
 8002ef0:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8002ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ef6:	4ba8      	ldr	r3, [pc, #672]	@ (8003198 <Heading_PID+0x2b0>)
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002efa:	4ba8      	ldr	r3, [pc, #672]	@ (800319c <Heading_PID+0x2b4>)
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
	float kp_right = 2.0, ki_right = 0.2, kd_right = 0.32;  // Fine-tuned for right turns
 8002efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f04:	4ba6      	ldr	r3, [pc, #664]	@ (80031a0 <Heading_PID+0x2b8>)
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f08:	4ba6      	ldr	r3, [pc, #664]	@ (80031a4 <Heading_PID+0x2bc>)
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	float kp_backward_left = 0.5, ki_backward_left = 0.001, kd_backward_left = 0.45;
 8002f0c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f12:	4ba5      	ldr	r3, [pc, #660]	@ (80031a8 <Heading_PID+0x2c0>)
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	4ba5      	ldr	r3, [pc, #660]	@ (80031ac <Heading_PID+0x2c4>)
 8002f18:	61fb      	str	r3, [r7, #28]
	float kp_backward_right = 0.6, ki_backward_right = 0.0, kd_backward_right = 0.5;
 8002f1a:	4ba0      	ldr	r3, [pc, #640]	@ (800319c <Heading_PID+0x2b4>)
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002f28:	613b      	str	r3, [r7, #16]
	static float heading_last_error = 0.0f;

	/* Infinite loop */
	for(;;)
	{
		if(targetDistance == 0 && targetAngle != 0)
 8002f2a:	4ba1      	ldr	r3, [pc, #644]	@ (80031b0 <Heading_PID+0x2c8>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 817f 	bne.w	8003234 <Heading_PID+0x34c>
 8002f36:	4b9f      	ldr	r3, [pc, #636]	@ (80031b4 <Heading_PID+0x2cc>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8179 	beq.w	8003234 <Heading_PID+0x34c>
		{
			float currentHeading;
			if (osMutexAcquire(headingMutex, osWaitForever) == osOK) {
 8002f42:	4b9d      	ldr	r3, [pc, #628]	@ (80031b8 <Heading_PID+0x2d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 fe39 	bl	8008bc2 <osMutexAcquire>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <Heading_PID+0x7e>
				currentHeading = heading;
 8002f56:	4b99      	ldr	r3, [pc, #612]	@ (80031bc <Heading_PID+0x2d4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	657b      	str	r3, [r7, #84]	@ 0x54
				osMutexRelease(headingMutex);  // 🔹 Unlock mutex
 8002f5c:	4b96      	ldr	r3, [pc, #600]	@ (80031b8 <Heading_PID+0x2d0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f005 fe79 	bl	8008c58 <osMutexRelease>
			}
			float angleError = targetAngle - currentHeading;
 8002f66:	4b93      	ldr	r3, [pc, #588]	@ (80031b4 <Heading_PID+0x2cc>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f74:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

			// If you only need to rotate e.g. +90 or -90, you may want to normalize angleError
			// so that it does the "shortest turn":
			if (angleError > 180.0f) {
 8002f80:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002f84:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80031c0 <Heading_PID+0x2d8>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	dd08      	ble.n	8002fa4 <Heading_PID+0xbc>
				angleError -= 360.0f;
 8002f92:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002f96:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80031c4 <Heading_PID+0x2dc>
 8002f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f9e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002fa2:	e010      	b.n	8002fc6 <Heading_PID+0xde>
			} else if (angleError < -180.0f) {
 8002fa4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002fa8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80031c8 <Heading_PID+0x2e0>
 8002fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb4:	d507      	bpl.n	8002fc6 <Heading_PID+0xde>
				angleError += 360.0f;
 8002fb6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002fba:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80031c4 <Heading_PID+0x2dc>
 8002fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			}

			float kp, ki, kd;
			if (Hdirection == 1) {  // Left turn
 8002fc6:	4b81      	ldr	r3, [pc, #516]	@ (80031cc <Heading_PID+0x2e4>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d106      	bne.n	8002fdc <Heading_PID+0xf4>
				kp = kp_left;
 8002fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
				ki = ki_left;
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
				kd = kd_left;
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fda:	e01f      	b.n	800301c <Heading_PID+0x134>
			} else if (Hdirection == 2) {  // Right turn
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <Heading_PID+0x2e4>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d106      	bne.n	8002ff2 <Heading_PID+0x10a>
				kp = kp_right;
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
				ki = ki_right;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
				kd = kd_right;
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff0:	e014      	b.n	800301c <Heading_PID+0x134>
			} else if (Hdirection == 3) {  // Right turn
 8002ff2:	4b76      	ldr	r3, [pc, #472]	@ (80031cc <Heading_PID+0x2e4>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d106      	bne.n	8003008 <Heading_PID+0x120>
				kp = kp_backward_left;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
				ki = ki_backward_left;
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	64bb      	str	r3, [r7, #72]	@ 0x48
				kd = kd_backward_left;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	647b      	str	r3, [r7, #68]	@ 0x44
 8003006:	e009      	b.n	800301c <Heading_PID+0x134>
			} else if (Hdirection == 4) {  // Right turn
 8003008:	4b70      	ldr	r3, [pc, #448]	@ (80031cc <Heading_PID+0x2e4>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d105      	bne.n	800301c <Heading_PID+0x134>
				kp = kp_backward_right;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	64fb      	str	r3, [r7, #76]	@ 0x4c
				ki = ki_backward_right;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	64bb      	str	r3, [r7, #72]	@ 0x48
				kd = kd_backward_right;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	647b      	str	r3, [r7, #68]	@ 0x44
			}

			// Then do your PID control with angleError
			heading_error_sum += angleError;
 800301c:	4b6c      	ldr	r3, [pc, #432]	@ (80031d0 <Heading_PID+0x2e8>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	4b69      	ldr	r3, [pc, #420]	@ (80031d0 <Heading_PID+0x2e8>)
 800302c:	edc3 7a00 	vstr	s15, [r3]
			float heading_derivative = angleError - heading_last_error;
 8003030:	4b68      	ldr	r3, [pc, #416]	@ (80031d4 <Heading_PID+0x2ec>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800303a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303e:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate motor speed
			float motorSpeed = kp * angleError + ki * heading_error_sum + kd * heading_derivative;
 8003042:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003046:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800304a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304e:	4b60      	ldr	r3, [pc, #384]	@ (80031d0 <Heading_PID+0x2e8>)
 8003050:	edd3 6a00 	vldr	s13, [r3]
 8003054:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003060:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8003064:	edd7 7a03 	vldr	s15, [r7, #12]
 8003068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	edc7 7a02 	vstr	s15, [r7, #8]
			uint16_t dutyCycle = (uint16_t) (fabs(motorSpeed) * MAX_MOTOR_PWM);
 8003074:	edd7 7a02 	vldr	s15, [r7, #8]
 8003078:	eef0 7ae7 	vabs.f32	s15, s15
 800307c:	ee17 0a90 	vmov	r0, s15
 8003080:	f7fd fa62 	bl	8000548 <__aeabi_f2d>
 8003084:	a340      	add	r3, pc, #256	@ (adr r3, 8003188 <Heading_PID+0x2a0>)
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	f7fd fab5 	bl	80005f8 <__aeabi_dmul>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f7fd fd87 	bl	8000ba8 <__aeabi_d2uiz>
 800309a:	4603      	mov	r3, r0
 800309c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			if (dutyCycle > MAX_MOTOR_PWM) dutyCycle = MAX_MOTOR_PWM;
 80030a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030a4:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d903      	bls.n	80030b4 <Heading_PID+0x1cc>
 80030ac:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80030b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			// Reduce speed when close to target
			if (fabs(angleError) < 15.0f) {
 80030b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80030b8:	eef0 7ae7 	vabs.f32	s15, s15
 80030bc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d512      	bpl.n	80030f0 <Heading_PID+0x208>
				dutyCycle *= 0.5;
 80030ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fa28 	bl	8000524 <__aeabi_i2d>
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <Heading_PID+0x2f0>)
 80030da:	f7fd fa8d 	bl	80005f8 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7fd fd5f 	bl	8000ba8 <__aeabi_d2uiz>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			}

			if(Hdirection == 1){
 80030f0:	4b36      	ldr	r3, [pc, #216]	@ (80031cc <Heading_PID+0x2e4>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d119      	bne.n	800312c <Heading_PID+0x244>
				setLeftPWM(1600);
 80030f8:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80030fc:	f7fe fe28 	bl	8001d50 <setLeftPWM>
				setRightPWM(dutyCycle*0.7);
 8003100:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa0d 	bl	8000524 <__aeabi_i2d>
 800310a:	a321      	add	r3, pc, #132	@ (adr r3, 8003190 <Heading_PID+0x2a8>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd fa72 	bl	80005f8 <__aeabi_dmul>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f7fd fd44 	bl	8000ba8 <__aeabi_d2uiz>
 8003120:	4603      	mov	r3, r0
 8003122:	b29b      	uxth	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fe25 	bl	8001d74 <setRightPWM>
 800312a:	e064      	b.n	80031f6 <Heading_PID+0x30e>
			} else if(Hdirection == 2){
 800312c:	4b27      	ldr	r3, [pc, #156]	@ (80031cc <Heading_PID+0x2e4>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d109      	bne.n	8003148 <Heading_PID+0x260>
				setRightPWM(700);
 8003134:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003138:	f7fe fe1c 	bl	8001d74 <setRightPWM>
				setLeftPWM(dutyCycle);
 800313c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fe05 	bl	8001d50 <setLeftPWM>
 8003146:	e056      	b.n	80031f6 <Heading_PID+0x30e>
			} else if (Hdirection == 3) {  // Backward Left turn
 8003148:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <Heading_PID+0x2e4>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d145      	bne.n	80031dc <Heading_PID+0x2f4>
				setLeftPWM(2000);
 8003150:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003154:	f7fe fdfc 	bl	8001d50 <setLeftPWM>
				setRightPWM(dutyCycle*0.7);  // Slightly higher for smooth turning
 8003158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9e1 	bl	8000524 <__aeabi_i2d>
 8003162:	a30b      	add	r3, pc, #44	@ (adr r3, 8003190 <Heading_PID+0x2a8>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fa46 	bl	80005f8 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f7fd fd18 	bl	8000ba8 <__aeabi_d2uiz>
 8003178:	4603      	mov	r3, r0
 800317a:	b29b      	uxth	r3, r3
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fdf9 	bl	8001d74 <setRightPWM>
 8003182:	e038      	b.n	80031f6 <Heading_PID+0x30e>
 8003184:	f3af 8000 	nop.w
 8003188:	00000000 	.word	0x00000000
 800318c:	40ab5800 	.word	0x40ab5800
 8003190:	66666666 	.word	0x66666666
 8003194:	3fe66666 	.word	0x3fe66666
 8003198:	3b03126f 	.word	0x3b03126f
 800319c:	3f19999a 	.word	0x3f19999a
 80031a0:	3e4ccccd 	.word	0x3e4ccccd
 80031a4:	3ea3d70a 	.word	0x3ea3d70a
 80031a8:	3a83126f 	.word	0x3a83126f
 80031ac:	3ee66666 	.word	0x3ee66666
 80031b0:	200004b8 	.word	0x200004b8
 80031b4:	200004ba 	.word	0x200004ba
 80031b8:	20000580 	.word	0x20000580
 80031bc:	200004c0 	.word	0x200004c0
 80031c0:	43340000 	.word	0x43340000
 80031c4:	43b40000 	.word	0x43b40000
 80031c8:	c3340000 	.word	0xc3340000
 80031cc:	200004ca 	.word	0x200004ca
 80031d0:	20000590 	.word	0x20000590
 80031d4:	20000594 	.word	0x20000594
 80031d8:	3fe00000 	.word	0x3fe00000
			} else if (Hdirection == 4) {  // Backward Right turn
 80031dc:	4b17      	ldr	r3, [pc, #92]	@ (800323c <Heading_PID+0x354>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d108      	bne.n	80031f6 <Heading_PID+0x30e>
				setRightPWM(700);
 80031e4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80031e8:	f7fe fdc4 	bl	8001d74 <setRightPWM>
				setLeftPWM(dutyCycle);  // Reduce slightly for better balance
 80031ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe fdad 	bl	8001d50 <setLeftPWM>
			}
			//setLeftPWM(dutyCycle);
			//setRightPWM(dutyCycle);

			if (fabs(angleError) < 8.0f) {
 80031f6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80031fa:	eef0 7ae7 	vabs.f32	s15, s15
 80031fe:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8003202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	d510      	bpl.n	800322e <Heading_PID+0x346>
				faceFront();
 800320c:	f7fe fd92 	bl	8001d34 <faceFront>
				motorStop();
 8003210:	f7fe fe02 	bl	8001e18 <motorStop>
				commandStatus = false;
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <Heading_PID+0x358>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
				targetAngle = 0;
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <Heading_PID+0x35c>)
 800321c:	2200      	movs	r2, #0
 800321e:	801a      	strh	r2, [r3, #0]
				Hdirection = 0;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <Heading_PID+0x354>)
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
				SendMsg_RPI((uint8_t*)"ACK\n", strlen("ACK\n"));
 8003226:	2104      	movs	r1, #4
 8003228:	4807      	ldr	r0, [pc, #28]	@ (8003248 <Heading_PID+0x360>)
 800322a:	f7fe fc17 	bl	8001a5c <SendMsg_RPI>
			}
			heading_last_error = angleError;
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <Heading_PID+0x364>)
 8003230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003232:	6013      	str	r3, [r2, #0]
		}
		osDelay(100);
 8003234:	2064      	movs	r0, #100	@ 0x64
 8003236:	f005 fc23 	bl	8008a80 <osDelay>
		if(targetDistance == 0 && targetAngle != 0)
 800323a:	e676      	b.n	8002f2a <Heading_PID+0x42>
 800323c:	200004ca 	.word	0x200004ca
 8003240:	200004bc 	.word	0x200004bc
 8003244:	200004ba 	.word	0x200004ba
 8003248:	0800ec6c 	.word	0x0800ec6c
 800324c:	20000594 	.word	0x20000594

08003250 <IRSensor_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IRSensor_Task */
void IRSensor_Task(void *argument)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b096      	sub	sp, #88	@ 0x58
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	float obsDistLeft, obsDistRight;
	char debugBuffer[64];
	/* Infinite loop */
	for(;;)
	{
		irLeftVal = read_IR_Left();
 8003258:	f7fe ffba 	bl	80021d0 <read_IR_Left>
 800325c:	6578      	str	r0, [r7, #84]	@ 0x54
		irRightVal = read_IR_Right();
 800325e:	f7fe ffbf 	bl	80021e0 <read_IR_Right>
 8003262:	6538      	str	r0, [r7, #80]	@ 0x50

		// Convert ADC values to distances (example calibration, modify as needed)
		obsDistLeft = IR_ADC_to_Distance(irLeftVal);
 8003264:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003266:	f7fe ffc3 	bl	80021f0 <IR_ADC_to_Distance>
 800326a:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
		obsDistRight = IR_ADC_to_Distance(irRightVal);
 800326e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003270:	f7fe ffbe 	bl	80021f0 <IR_ADC_to_Distance>
 8003274:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
		// Send to RPI for debugging
		//snprintf(debugBuffer, sizeof(debugBuffer), "IR L:%.1fcm R:%.1fcm\n", obsDistLeft, obsDistRight);
		//SendMsg_RPI((uint8_t*)debugBuffer, strlen(debugBuffer));

		// If obstacle detected close enough, stop the robot
		if (obsDistLeft < 10.0f || obsDistRight < 10.0f) {  // obstacle within 10 cm
 8003278:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800327c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	d408      	bmi.n	800329c <IRSensor_Task+0x4c>
 800328a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800328e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	d505      	bpl.n	80032a8 <IRSensor_Task+0x58>
			motorStop();
 800329c:	f7fe fdbc 	bl	8001e18 <motorStop>
			SendMsg_RPI((uint8_t*)"Obstacle Detected\n", strlen("Obstacle Detected\n"));
 80032a0:	2112      	movs	r1, #18
 80032a2:	4803      	ldr	r0, [pc, #12]	@ (80032b0 <IRSensor_Task+0x60>)
 80032a4:	f7fe fbda 	bl	8001a5c <SendMsg_RPI>
		}

		osDelay(100);
 80032a8:	2064      	movs	r0, #100	@ 0x64
 80032aa:	f005 fbe9 	bl	8008a80 <osDelay>
		irLeftVal = read_IR_Left();
 80032ae:	e7d3      	b.n	8003258 <IRSensor_Task+0x8>
 80032b0:	0800ec7c 	.word	0x0800ec7c

080032b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b8:	b672      	cpsid	i
}
 80032ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <Error_Handler+0x8>

080032c0 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80032c6:	2300      	movs	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
 80032ca:	e026      	b.n	800331a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	3b50      	subs	r3, #80	@ 0x50
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f82b 	bl	8003330 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80032da:	2100      	movs	r1, #0
 80032dc:	2000      	movs	r0, #0
 80032de:	f000 f827 	bl	8003330 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80032e2:	2100      	movs	r1, #0
 80032e4:	2010      	movs	r0, #16
 80032e6:	f000 f823 	bl	8003330 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80032ea:	2300      	movs	r3, #0
 80032ec:	71bb      	strb	r3, [r7, #6]
 80032ee:	e00d      	b.n	800330c <OLED_Refresh_Gram+0x4c>
 80032f0:	79ba      	ldrb	r2, [r7, #6]
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	490d      	ldr	r1, [pc, #52]	@ (800332c <OLED_Refresh_Gram+0x6c>)
 80032f6:	00d2      	lsls	r2, r2, #3
 80032f8:	440a      	add	r2, r1
 80032fa:	4413      	add	r3, r2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f815 	bl	8003330 <OLED_WR_Byte>
 8003306:	79bb      	ldrb	r3, [r7, #6]
 8003308:	3301      	adds	r3, #1
 800330a:	71bb      	strb	r3, [r7, #6]
 800330c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003310:	2b00      	cmp	r3, #0
 8003312:	daed      	bge.n	80032f0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	3301      	adds	r3, #1
 8003318:	71fb      	strb	r3, [r7, #7]
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	2b07      	cmp	r3, #7
 800331e:	d9d5      	bls.n	80032cc <OLED_Refresh_Gram+0xc>
	}   
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000598 	.word	0x20000598

08003330 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	460a      	mov	r2, r1
 800333a:	71fb      	strb	r3, [r7, #7]
 800333c:	4613      	mov	r3, r2
 800333e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003340:	79bb      	ldrb	r3, [r7, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003346:	2201      	movs	r2, #1
 8003348:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800334c:	481c      	ldr	r0, [pc, #112]	@ (80033c0 <OLED_WR_Byte+0x90>)
 800334e:	f001 fefb 	bl	8005148 <HAL_GPIO_WritePin>
 8003352:	e005      	b.n	8003360 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800335a:	4819      	ldr	r0, [pc, #100]	@ (80033c0 <OLED_WR_Byte+0x90>)
 800335c:	f001 fef4 	bl	8005148 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e01e      	b.n	80033a4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003366:	2200      	movs	r2, #0
 8003368:	2120      	movs	r1, #32
 800336a:	4815      	ldr	r0, [pc, #84]	@ (80033c0 <OLED_WR_Byte+0x90>)
 800336c:	f001 feec 	bl	8005148 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da05      	bge.n	8003384 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003378:	2201      	movs	r2, #1
 800337a:	2140      	movs	r1, #64	@ 0x40
 800337c:	4810      	ldr	r0, [pc, #64]	@ (80033c0 <OLED_WR_Byte+0x90>)
 800337e:	f001 fee3 	bl	8005148 <HAL_GPIO_WritePin>
 8003382:	e004      	b.n	800338e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003384:	2200      	movs	r2, #0
 8003386:	2140      	movs	r1, #64	@ 0x40
 8003388:	480d      	ldr	r0, [pc, #52]	@ (80033c0 <OLED_WR_Byte+0x90>)
 800338a:	f001 fedd 	bl	8005148 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800338e:	2201      	movs	r2, #1
 8003390:	2120      	movs	r1, #32
 8003392:	480b      	ldr	r0, [pc, #44]	@ (80033c0 <OLED_WR_Byte+0x90>)
 8003394:	f001 fed8 	bl	8005148 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	3301      	adds	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b07      	cmp	r3, #7
 80033a8:	d9dd      	bls.n	8003366 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80033aa:	2201      	movs	r2, #1
 80033ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033b0:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <OLED_WR_Byte+0x90>)
 80033b2:	f001 fec9 	bl	8005148 <HAL_GPIO_WritePin>
} 
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80033ca:	2300      	movs	r3, #0
 80033cc:	71fb      	strb	r3, [r7, #7]
 80033ce:	e014      	b.n	80033fa <OLED_Clear+0x36>
 80033d0:	2300      	movs	r3, #0
 80033d2:	71bb      	strb	r3, [r7, #6]
 80033d4:	e00a      	b.n	80033ec <OLED_Clear+0x28>
 80033d6:	79ba      	ldrb	r2, [r7, #6]
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	490c      	ldr	r1, [pc, #48]	@ (800340c <OLED_Clear+0x48>)
 80033dc:	00d2      	lsls	r2, r2, #3
 80033de:	440a      	add	r2, r1
 80033e0:	4413      	add	r3, r2
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	79bb      	ldrb	r3, [r7, #6]
 80033e8:	3301      	adds	r3, #1
 80033ea:	71bb      	strb	r3, [r7, #6]
 80033ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	daf0      	bge.n	80033d6 <OLED_Clear+0x12>
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	3301      	adds	r3, #1
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d9e7      	bls.n	80033d0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003400:	f7ff ff5e 	bl	80032c0 <OLED_Refresh_Gram>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000598 	.word	0x20000598

08003410 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
 800341a:	460b      	mov	r3, r1
 800341c:	71bb      	strb	r3, [r7, #6]
 800341e:	4613      	mov	r3, r2
 8003420:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	db41      	blt.n	80034b2 <OLED_DrawPoint+0xa2>
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	2b3f      	cmp	r3, #63	@ 0x3f
 8003432:	d83e      	bhi.n	80034b2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003434:	79bb      	ldrb	r3, [r7, #6]
 8003436:	08db      	lsrs	r3, r3, #3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2201      	movs	r2, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003456:	797b      	ldrb	r3, [r7, #5]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <OLED_DrawPoint+0x72>
 800345c:	79fa      	ldrb	r2, [r7, #7]
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	4917      	ldr	r1, [pc, #92]	@ (80034c0 <OLED_DrawPoint+0xb0>)
 8003462:	00d2      	lsls	r2, r2, #3
 8003464:	440a      	add	r2, r1
 8003466:	4413      	add	r3, r2
 8003468:	7818      	ldrb	r0, [r3, #0]
 800346a:	79fa      	ldrb	r2, [r7, #7]
 800346c:	7bbb      	ldrb	r3, [r7, #14]
 800346e:	7bf9      	ldrb	r1, [r7, #15]
 8003470:	4301      	orrs	r1, r0
 8003472:	b2c8      	uxtb	r0, r1
 8003474:	4912      	ldr	r1, [pc, #72]	@ (80034c0 <OLED_DrawPoint+0xb0>)
 8003476:	00d2      	lsls	r2, r2, #3
 8003478:	440a      	add	r2, r1
 800347a:	4413      	add	r3, r2
 800347c:	4602      	mov	r2, r0
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e018      	b.n	80034b4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003482:	79fa      	ldrb	r2, [r7, #7]
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	490e      	ldr	r1, [pc, #56]	@ (80034c0 <OLED_DrawPoint+0xb0>)
 8003488:	00d2      	lsls	r2, r2, #3
 800348a:	440a      	add	r2, r1
 800348c:	4413      	add	r3, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b25a      	sxtb	r2, r3
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	43db      	mvns	r3, r3
 8003498:	b25b      	sxtb	r3, r3
 800349a:	4013      	ands	r3, r2
 800349c:	b259      	sxtb	r1, r3
 800349e:	79fa      	ldrb	r2, [r7, #7]
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	b2c8      	uxtb	r0, r1
 80034a4:	4906      	ldr	r1, [pc, #24]	@ (80034c0 <OLED_DrawPoint+0xb0>)
 80034a6:	00d2      	lsls	r2, r2, #3
 80034a8:	440a      	add	r2, r1
 80034aa:	4413      	add	r3, r2
 80034ac:	4602      	mov	r2, r0
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e000      	b.n	80034b4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80034b2:	bf00      	nop
}
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000598 	.word	0x20000598

080034c4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4604      	mov	r4, r0
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	71fb      	strb	r3, [r7, #7]
 80034d6:	4603      	mov	r3, r0
 80034d8:	71bb      	strb	r3, [r7, #6]
 80034da:	460b      	mov	r3, r1
 80034dc:	717b      	strb	r3, [r7, #5]
 80034de:	4613      	mov	r3, r2
 80034e0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80034e2:	79bb      	ldrb	r3, [r7, #6]
 80034e4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80034e6:	797b      	ldrb	r3, [r7, #5]
 80034e8:	3b20      	subs	r3, #32
 80034ea:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	73bb      	strb	r3, [r7, #14]
 80034f0:	e04d      	b.n	800358e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80034f2:	793b      	ldrb	r3, [r7, #4]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	d10b      	bne.n	8003510 <OLED_ShowChar+0x4c>
 80034f8:	797a      	ldrb	r2, [r7, #5]
 80034fa:	7bb9      	ldrb	r1, [r7, #14]
 80034fc:	4828      	ldr	r0, [pc, #160]	@ (80035a0 <OLED_ShowChar+0xdc>)
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	440b      	add	r3, r1
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e007      	b.n	8003520 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003510:	797a      	ldrb	r2, [r7, #5]
 8003512:	7bbb      	ldrb	r3, [r7, #14]
 8003514:	4923      	ldr	r1, [pc, #140]	@ (80035a4 <OLED_ShowChar+0xe0>)
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	440a      	add	r2, r1
 800351a:	4413      	add	r3, r2
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003520:	2300      	movs	r3, #0
 8003522:	737b      	strb	r3, [r7, #13]
 8003524:	e02d      	b.n	8003582 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	da07      	bge.n	800353e <OLED_ShowChar+0x7a>
 800352e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003532:	79b9      	ldrb	r1, [r7, #6]
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff6a 	bl	8003410 <OLED_DrawPoint>
 800353c:	e00c      	b.n	8003558 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800353e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	79b9      	ldrb	r1, [r7, #6]
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff5c 	bl	8003410 <OLED_DrawPoint>
			temp<<=1;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
			y++;
 800355e:	79bb      	ldrb	r3, [r7, #6]
 8003560:	3301      	adds	r3, #1
 8003562:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003564:	79ba      	ldrb	r2, [r7, #6]
 8003566:	7b3b      	ldrb	r3, [r7, #12]
 8003568:	1ad2      	subs	r2, r2, r3
 800356a:	793b      	ldrb	r3, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d105      	bne.n	800357c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003570:	7b3b      	ldrb	r3, [r7, #12]
 8003572:	71bb      	strb	r3, [r7, #6]
				x++;
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	3301      	adds	r3, #1
 8003578:	71fb      	strb	r3, [r7, #7]
				break;
 800357a:	e005      	b.n	8003588 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800357c:	7b7b      	ldrb	r3, [r7, #13]
 800357e:	3301      	adds	r3, #1
 8003580:	737b      	strb	r3, [r7, #13]
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	2b07      	cmp	r3, #7
 8003586:	d9ce      	bls.n	8003526 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	3301      	adds	r3, #1
 800358c:	73bb      	strb	r3, [r7, #14]
 800358e:	7bba      	ldrb	r2, [r7, #14]
 8003590:	793b      	ldrb	r3, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	d3ad      	bcc.n	80034f2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	0800edb4 	.word	0x0800edb4
 80035a4:	0800f228 	.word	0x0800f228

080035a8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	4603      	mov	r3, r0
 80035b0:	603a      	str	r2, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
 80035b4:	460b      	mov	r3, r1
 80035b6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80035b8:	e01f      	b.n	80035fa <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b7a      	cmp	r3, #122	@ 0x7a
 80035be:	d904      	bls.n	80035ca <OLED_ShowString+0x22>
 80035c0:	2300      	movs	r3, #0
 80035c2:	71fb      	strb	r3, [r7, #7]
 80035c4:	79bb      	ldrb	r3, [r7, #6]
 80035c6:	3310      	adds	r3, #16
 80035c8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80035ca:	79bb      	ldrb	r3, [r7, #6]
 80035cc:	2b3a      	cmp	r3, #58	@ 0x3a
 80035ce:	d905      	bls.n	80035dc <OLED_ShowString+0x34>
 80035d0:	2300      	movs	r3, #0
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	71bb      	strb	r3, [r7, #6]
 80035d8:	f7ff fef4 	bl	80033c4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	79b9      	ldrb	r1, [r7, #6]
 80035e2:	79f8      	ldrb	r0, [r7, #7]
 80035e4:	2301      	movs	r3, #1
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	230c      	movs	r3, #12
 80035ea:	f7ff ff6b 	bl	80034c4 <OLED_ShowChar>
        x+=8;
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	3308      	adds	r3, #8
 80035f2:	71fb      	strb	r3, [r7, #7]
        p++;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1db      	bne.n	80035ba <OLED_ShowString+0x12>
    }  
}	 
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <OLED_Init>:

void OLED_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003610:	f002 fdf2 	bl	80061f8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003614:	4b41      	ldr	r3, [pc, #260]	@ (800371c <OLED_Init+0x110>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	4a40      	ldr	r2, [pc, #256]	@ (800371c <OLED_Init+0x110>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003620:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <OLED_Init+0x110>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003624:	4a3d      	ldr	r2, [pc, #244]	@ (800371c <OLED_Init+0x110>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800362c:	f002 fdf8 	bl	8006220 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003630:	2200      	movs	r2, #0
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	483a      	ldr	r0, [pc, #232]	@ (8003720 <OLED_Init+0x114>)
 8003636:	f001 fd87 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800363a:	2064      	movs	r0, #100	@ 0x64
 800363c:	f000 fe08 	bl	8004250 <HAL_Delay>
	OLED_RST_Set();
 8003640:	2201      	movs	r2, #1
 8003642:	2180      	movs	r1, #128	@ 0x80
 8003644:	4836      	ldr	r0, [pc, #216]	@ (8003720 <OLED_Init+0x114>)
 8003646:	f001 fd7f 	bl	8005148 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800364a:	2100      	movs	r1, #0
 800364c:	20ae      	movs	r0, #174	@ 0xae
 800364e:	f7ff fe6f 	bl	8003330 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003652:	2100      	movs	r1, #0
 8003654:	20d5      	movs	r0, #213	@ 0xd5
 8003656:	f7ff fe6b 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800365a:	2100      	movs	r1, #0
 800365c:	2050      	movs	r0, #80	@ 0x50
 800365e:	f7ff fe67 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003662:	2100      	movs	r1, #0
 8003664:	20a8      	movs	r0, #168	@ 0xa8
 8003666:	f7ff fe63 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800366a:	2100      	movs	r1, #0
 800366c:	203f      	movs	r0, #63	@ 0x3f
 800366e:	f7ff fe5f 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003672:	2100      	movs	r1, #0
 8003674:	20d3      	movs	r0, #211	@ 0xd3
 8003676:	f7ff fe5b 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800367a:	2100      	movs	r1, #0
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff fe57 	bl	8003330 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003682:	2100      	movs	r1, #0
 8003684:	2040      	movs	r0, #64	@ 0x40
 8003686:	f7ff fe53 	bl	8003330 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800368a:	2100      	movs	r1, #0
 800368c:	208d      	movs	r0, #141	@ 0x8d
 800368e:	f7ff fe4f 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003692:	2100      	movs	r1, #0
 8003694:	2014      	movs	r0, #20
 8003696:	f7ff fe4b 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800369a:	2100      	movs	r1, #0
 800369c:	2020      	movs	r0, #32
 800369e:	f7ff fe47 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80036a2:	2100      	movs	r1, #0
 80036a4:	2002      	movs	r0, #2
 80036a6:	f7ff fe43 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80036aa:	2100      	movs	r1, #0
 80036ac:	20a1      	movs	r0, #161	@ 0xa1
 80036ae:	f7ff fe3f 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80036b2:	2100      	movs	r1, #0
 80036b4:	20c0      	movs	r0, #192	@ 0xc0
 80036b6:	f7ff fe3b 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80036ba:	2100      	movs	r1, #0
 80036bc:	20da      	movs	r0, #218	@ 0xda
 80036be:	f7ff fe37 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f7ff fe33 	bl	8003330 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80036ca:	2100      	movs	r1, #0
 80036cc:	2081      	movs	r0, #129	@ 0x81
 80036ce:	f7ff fe2f 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80036d2:	2100      	movs	r1, #0
 80036d4:	20ef      	movs	r0, #239	@ 0xef
 80036d6:	f7ff fe2b 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80036da:	2100      	movs	r1, #0
 80036dc:	20d9      	movs	r0, #217	@ 0xd9
 80036de:	f7ff fe27 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80036e2:	2100      	movs	r1, #0
 80036e4:	20f1      	movs	r0, #241	@ 0xf1
 80036e6:	f7ff fe23 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80036ea:	2100      	movs	r1, #0
 80036ec:	20db      	movs	r0, #219	@ 0xdb
 80036ee:	f7ff fe1f 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80036f2:	2100      	movs	r1, #0
 80036f4:	2030      	movs	r0, #48	@ 0x30
 80036f6:	f7ff fe1b 	bl	8003330 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80036fa:	2100      	movs	r1, #0
 80036fc:	20a4      	movs	r0, #164	@ 0xa4
 80036fe:	f7ff fe17 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003702:	2100      	movs	r1, #0
 8003704:	20a6      	movs	r0, #166	@ 0xa6
 8003706:	f7ff fe13 	bl	8003330 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800370a:	2100      	movs	r1, #0
 800370c:	20af      	movs	r0, #175	@ 0xaf
 800370e:	f7ff fe0f 	bl	8003330 <OLED_WR_Byte>
	OLED_Clear(); 
 8003712:	f7ff fe57 	bl	80033c4 <OLED_Clear>
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40021000 	.word	0x40021000

08003724 <PID_init>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const fp32 PID[3], fp32 max_out, fp32 max_iout)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6178      	str	r0, [r7, #20]
 800372c:	460b      	mov	r3, r1
 800372e:	60fa      	str	r2, [r7, #12]
 8003730:	ed87 0a02 	vstr	s0, [r7, #8]
 8003734:	edc7 0a01 	vstr	s1, [r7, #4]
 8003738:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d042      	beq.n	80037c6 <PID_init+0xa2>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d03f      	beq.n	80037c6 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	7cfa      	ldrb	r2, [r7, #19]
 800374a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3304      	adds	r3, #4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3308      	adds	r3, #8
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	639a      	str	r2, [r3, #56]	@ 0x38
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	635a      	str	r2, [r3, #52]	@ 0x34
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037c4:	e000      	b.n	80037c8 <PID_init+0xa4>
        return;
 80037c6:	bf00      	nop
}
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <PID_calc>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
fp32 PID_calc(pid_type_def *pid, fp32 ref, fp32 set)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	ed87 0a02 	vstr	s0, [r7, #8]
 80037de:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <PID_calc+0x1c>
    {
        return 0.0f;
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e130      	b.n	8003a50 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800380a:	ed97 7a01 	vldr	s14, [r7, #4]
 800380e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 8095 	bne.w	8003950 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	ed93 7a01 	vldr	s14, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	edd3 6a02 	vldr	s13, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800384e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	ed93 7a03 	vldr	s14, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80038a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	dd04      	ble.n	80038b8 <PID_calc+0xe6>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038b6:	e014      	b.n	80038e2 <PID_calc+0x110>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80038c4:	eef1 7a67 	vneg.f32	s15, s15
 80038c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d507      	bpl.n	80038e2 <PID_calc+0x110>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80038d8:	eef1 7a67 	vneg.f32	s15, s15
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80038ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80038f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	ed93 7a08 	vldr	s14, [r3, #32]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	edd3 7a04 	vldr	s15, [r3, #16]
 800390e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	dd04      	ble.n	8003922 <PID_calc+0x150>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	621a      	str	r2, [r3, #32]
 8003920:	e094      	b.n	8003a4c <PID_calc+0x27a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	ed93 7a08 	vldr	s14, [r3, #32]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	edd3 7a04 	vldr	s15, [r3, #16]
 800392e:	eef1 7a67 	vneg.f32	s15, s15
 8003932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	f140 8087 	bpl.w	8003a4c <PID_calc+0x27a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	edd3 7a04 	vldr	s15, [r3, #16]
 8003944:	eef1 7a67 	vneg.f32	s15, s15
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	edc3 7a08 	vstr	s15, [r3, #32]
 800394e:	e07d      	b.n	8003a4c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d179      	bne.n	8003a4c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	ed93 7a01 	vldr	s14, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800396a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	ed93 7a02 	vldr	s14, [r3, #8]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80039aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80039b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	ed93 7a08 	vldr	s14, [r3, #32]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80039ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80039f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a16:	dd04      	ble.n	8003a22 <PID_calc+0x250>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]
 8003a20:	e014      	b.n	8003a4c <PID_calc+0x27a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a2e:	eef1 7a67 	vneg.f32	s15, s15
 8003a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3a:	d507      	bpl.n	8003a4c <PID_calc+0x27a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a42:	eef1 7a67 	vneg.f32	s15, s15
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
}
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_MspInit+0x54>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	4a11      	ldr	r2, [pc, #68]	@ (8003ab8 <HAL_MspInit+0x54>)
 8003a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <HAL_MspInit+0x54>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_MspInit+0x54>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <HAL_MspInit+0x54>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a96:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <HAL_MspInit+0x54>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	210f      	movs	r1, #15
 8003aa6:	f06f 0001 	mvn.w	r0, #1
 8003aaa:	f001 f8d0 	bl	8004c4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	@ 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <HAL_ADC_MspInit+0x7c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d127      	bne.n	8003b2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b16      	ldr	r3, [pc, #88]	@ (8003b3c <HAL_ADC_MspInit+0x80>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <HAL_ADC_MspInit+0x80>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aee:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <HAL_ADC_MspInit+0x80>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_ADC_MspInit+0x80>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4a0e      	ldr	r2, [pc, #56]	@ (8003b3c <HAL_ADC_MspInit+0x80>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <HAL_ADC_MspInit+0x80>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003b16:	2306      	movs	r3, #6
 8003b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4619      	mov	r1, r3
 8003b28:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <HAL_ADC_MspInit+0x84>)
 8003b2a:	f001 f959 	bl	8004de0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003b2e:	bf00      	nop
 8003b30:	3728      	adds	r7, #40	@ 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40012000 	.word	0x40012000
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40020800 	.word	0x40020800

08003b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a19      	ldr	r2, [pc, #100]	@ (8003bc8 <HAL_I2C_MspInit+0x84>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d12c      	bne.n	8003bc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b18      	ldr	r3, [pc, #96]	@ (8003bcc <HAL_I2C_MspInit+0x88>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	4a17      	ldr	r2, [pc, #92]	@ (8003bcc <HAL_I2C_MspInit+0x88>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_I2C_MspInit+0x88>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b88:	2312      	movs	r3, #18
 8003b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b94:	2304      	movs	r3, #4
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	480c      	ldr	r0, [pc, #48]	@ (8003bd0 <HAL_I2C_MspInit+0x8c>)
 8003ba0:	f001 f91e 	bl	8004de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <HAL_I2C_MspInit+0x88>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_I2C_MspInit+0x88>)
 8003bae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_I2C_MspInit+0x88>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003bc0:	bf00      	nop
 8003bc2:	3728      	adds	r7, #40	@ 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40005400 	.word	0x40005400
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020400 	.word	0x40020400

08003bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <HAL_TIM_PWM_MspInit+0x64>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b14      	ldr	r3, [pc, #80]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x68>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	4a13      	ldr	r2, [pc, #76]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x68>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf6:	4b11      	ldr	r3, [pc, #68]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x68>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c02:	e012      	b.n	8003c2a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10d      	bne.n	8003c2a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x68>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	4a09      	ldr	r2, [pc, #36]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x68>)
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c1e:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x68>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40010400 	.word	0x40010400

08003c44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	@ 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 031c 	add.w	r3, r7, #28
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c64:	d14b      	bne.n	8003cfe <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c76:	4b3c      	ldr	r3, [pc, #240]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	4a37      	ldr	r2, [pc, #220]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c92:	4b35      	ldr	r3, [pc, #212]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	4a30      	ldr	r2, [pc, #192]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cae:	4b2e      	ldr	r3, [pc, #184]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd0:	f107 031c 	add.w	r3, r7, #28
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4825      	ldr	r0, [pc, #148]	@ (8003d6c <HAL_TIM_Encoder_MspInit+0x128>)
 8003cd8:	f001 f882 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cdc:	2308      	movs	r3, #8
 8003cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cec:	2301      	movs	r3, #1
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	481e      	ldr	r0, [pc, #120]	@ (8003d70 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003cf8:	f001 f872 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003cfc:	e030      	b.n	8003d60 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_TIM_Encoder_MspInit+0x130>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d12b      	bne.n	8003d60 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d34:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d40:	23c0      	movs	r3, #192	@ 0xc0
 8003d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d50:	2302      	movs	r3, #2
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 031c 	add.w	r3, r7, #28
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4805      	ldr	r0, [pc, #20]	@ (8003d70 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d5c:	f001 f840 	bl	8004de0 <HAL_GPIO_Init>
}
 8003d60:	bf00      	nop
 8003d62:	3730      	adds	r7, #48	@ 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40000800 	.word	0x40000800

08003d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	@ 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a25      	ldr	r2, [pc, #148]	@ (8003e2c <HAL_TIM_MspPostInit+0xb4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d11f      	bne.n	8003dda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <HAL_TIM_MspPostInit+0xb8>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <HAL_TIM_MspPostInit+0xb8>)
 8003da4:	f043 0310 	orr.w	r3, r3, #16
 8003da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003daa:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <HAL_TIM_MspPostInit+0xb8>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003db6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4818      	ldr	r0, [pc, #96]	@ (8003e34 <HAL_TIM_MspPostInit+0xbc>)
 8003dd4:	f001 f804 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003dd8:	e023      	b.n	8003e22 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a16      	ldr	r2, [pc, #88]	@ (8003e38 <HAL_TIM_MspPostInit+0xc0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d11e      	bne.n	8003e22 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <HAL_TIM_MspPostInit+0xb8>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	4a10      	ldr	r2, [pc, #64]	@ (8003e30 <HAL_TIM_MspPostInit+0xb8>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_TIM_MspPostInit+0xb8>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMC_Pin;
 8003e00:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	2302      	movs	r3, #2
 8003e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e12:	2303      	movs	r3, #3
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4807      	ldr	r0, [pc, #28]	@ (8003e3c <HAL_TIM_MspPostInit+0xc4>)
 8003e1e:	f000 ffdf 	bl	8004de0 <HAL_GPIO_Init>
}
 8003e22:	bf00      	nop
 8003e24:	3728      	adds	r7, #40	@ 0x28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40020800 	.word	0x40020800

08003e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	@ 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_UART_MspInit+0xb8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d145      	bne.n	8003eee <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	4b25      	ldr	r3, [pc, #148]	@ (8003efc <HAL_UART_MspInit+0xbc>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	4a24      	ldr	r2, [pc, #144]	@ (8003efc <HAL_UART_MspInit+0xbc>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e72:	4b22      	ldr	r3, [pc, #136]	@ (8003efc <HAL_UART_MspInit+0xbc>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <HAL_UART_MspInit+0xbc>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	4a1d      	ldr	r2, [pc, #116]	@ (8003efc <HAL_UART_MspInit+0xbc>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_UART_MspInit+0xbc>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003eac:	2307      	movs	r3, #7
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4812      	ldr	r0, [pc, #72]	@ (8003f00 <HAL_UART_MspInit+0xc0>)
 8003eb8:	f000 ff92 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ebc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ece:	2307      	movs	r3, #7
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ed2:	f107 0314 	add.w	r3, r7, #20
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4809      	ldr	r0, [pc, #36]	@ (8003f00 <HAL_UART_MspInit+0xc0>)
 8003eda:	f000 ff81 	bl	8004de0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2105      	movs	r1, #5
 8003ee2:	2027      	movs	r0, #39	@ 0x27
 8003ee4:	f000 feb3 	bl	8004c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ee8:	2027      	movs	r0, #39	@ 0x27
 8003eea:	f000 fecc 	bl	8004c86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003eee:	bf00      	nop
 8003ef0:	3728      	adds	r7, #40	@ 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40004800 	.word	0x40004800
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40020800 	.word	0x40020800

08003f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <NMI_Handler+0x4>

08003f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <HardFault_Handler+0x4>

08003f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <MemManage_Handler+0x4>

08003f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <BusFault_Handler+0x4>

08003f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <UsageFault_Handler+0x4>

08003f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f3e:	f000 f967 	bl	8004210 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f42:	f006 fcff 	bl	800a944 <xTaskGetSchedulerState>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f4c:	f007 fbf4 	bl	800b738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f58:	4802      	ldr	r0, [pc, #8]	@ (8003f64 <USART3_IRQHandler+0x10>)
 8003f5a:	f003 fd2b 	bl	80079b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000428 	.word	0x20000428

08003f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return 1;
 8003f6c:	2301      	movs	r3, #1
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <_kill>:

int _kill(int pid, int sig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f82:	f008 fc6f 	bl	800c864 <__errno>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2216      	movs	r2, #22
 8003f8a:	601a      	str	r2, [r3, #0]
  return -1;
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_exit>:

void _exit (int status)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ffe7 	bl	8003f78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <_exit+0x12>

08003fae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e00a      	b.n	8003fd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fc0:	f3af 8000 	nop.w
 8003fc4:	4601      	mov	r1, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	60ba      	str	r2, [r7, #8]
 8003fcc:	b2ca      	uxtb	r2, r1
 8003fce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	dbf0      	blt.n	8003fc0 <_read+0x12>
  }

  return len;
 8003fde:	687b      	ldr	r3, [r7, #4]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e009      	b.n	800400e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	60ba      	str	r2, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	dbf1      	blt.n	8003ffa <_write+0x12>
  }
  return len;
 8004016:	687b      	ldr	r3, [r7, #4]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_close>:

int _close(int file)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004048:	605a      	str	r2, [r3, #4]
  return 0;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_isatty>:

int _isatty(int file)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004060:	2301      	movs	r3, #1
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004090:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <_sbrk+0x5c>)
 8004092:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <_sbrk+0x60>)
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800409c:	4b13      	ldr	r3, [pc, #76]	@ (80040ec <_sbrk+0x64>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <_sbrk+0x64>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <_sbrk+0x68>)
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <_sbrk+0x64>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d207      	bcs.n	80040c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040b8:	f008 fbd4 	bl	800c864 <__errno>
 80040bc:	4603      	mov	r3, r0
 80040be:	220c      	movs	r2, #12
 80040c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040c6:	e009      	b.n	80040dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040c8:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ce:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <_sbrk+0x64>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	4a05      	ldr	r2, [pc, #20]	@ (80040ec <_sbrk+0x64>)
 80040d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20020000 	.word	0x20020000
 80040e8:	00000400 	.word	0x00000400
 80040ec:	20000998 	.word	0x20000998
 80040f0:	20005440 	.word	0x20005440

080040f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <SystemInit+0x20>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	4a05      	ldr	r2, [pc, #20]	@ (8004114 <SystemInit+0x20>)
 8004100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004150 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800411c:	f7ff ffea 	bl	80040f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004120:	480c      	ldr	r0, [pc, #48]	@ (8004154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004122:	490d      	ldr	r1, [pc, #52]	@ (8004158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004124:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004128:	e002      	b.n	8004130 <LoopCopyDataInit>

0800412a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800412c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800412e:	3304      	adds	r3, #4

08004130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004134:	d3f9      	bcc.n	800412a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004136:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004138:	4c0a      	ldr	r4, [pc, #40]	@ (8004164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800413c:	e001      	b.n	8004142 <LoopFillZerobss>

0800413e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800413e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004140:	3204      	adds	r2, #4

08004142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004144:	d3fb      	bcc.n	800413e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004146:	f008 fb93 	bl	800c870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800414a:	f7fd f809 	bl	8001160 <main>
  bx  lr    
 800414e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004158:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800415c:	0800fbb8 	.word	0x0800fbb8
  ldr r2, =_sbss
 8004160:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004164:	2000543c 	.word	0x2000543c

08004168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004168:	e7fe      	b.n	8004168 <ADC_IRQHandler>
	...

0800416c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <HAL_Init+0x40>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <HAL_Init+0x40>)
 8004176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800417a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <HAL_Init+0x40>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <HAL_Init+0x40>)
 8004182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004188:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <HAL_Init+0x40>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a07      	ldr	r2, [pc, #28]	@ (80041ac <HAL_Init+0x40>)
 800418e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004194:	2003      	movs	r0, #3
 8004196:	f000 fd4f 	bl	8004c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800419a:	200f      	movs	r0, #15
 800419c:	f000 f808 	bl	80041b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a0:	f7ff fc60 	bl	8003a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023c00 	.word	0x40023c00

080041b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b8:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <HAL_InitTick+0x54>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_InitTick+0x58>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fd67 	bl	8004ca2 <HAL_SYSTICK_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00e      	b.n	80041fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d80a      	bhi.n	80041fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e4:	2200      	movs	r2, #0
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041ec:	f000 fd2f 	bl	8004c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f0:	4a06      	ldr	r2, [pc, #24]	@ (800420c <HAL_InitTick+0x5c>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e000      	b.n	80041fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000028 	.word	0x20000028
 8004208:	20000030 	.word	0x20000030
 800420c:	2000002c 	.word	0x2000002c

08004210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_IncTick+0x20>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_IncTick+0x24>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4413      	add	r3, r2
 8004220:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <HAL_IncTick+0x24>)
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000030 	.word	0x20000030
 8004234:	2000099c 	.word	0x2000099c

08004238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return uwTick;
 800423c:	4b03      	ldr	r3, [pc, #12]	@ (800424c <HAL_GetTick+0x14>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000099c 	.word	0x2000099c

08004250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004258:	f7ff ffee 	bl	8004238 <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004268:	d005      	beq.n	8004276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800426a:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <HAL_Delay+0x44>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004276:	bf00      	nop
 8004278:	f7ff ffde 	bl	8004238 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	429a      	cmp	r2, r3
 8004286:	d8f7      	bhi.n	8004278 <HAL_Delay+0x28>
  {
  }
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000030 	.word	0x20000030

08004298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e033      	b.n	8004316 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fc00 	bl	8003abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042de:	f023 0302 	bic.w	r3, r3, #2
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fad8 	bl	80048a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	f043 0201 	orr.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	641a      	str	r2, [r3, #64]	@ 0x40
 8004306:	e001      	b.n	800430c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_ADC_Start+0x1a>
 8004336:	2302      	movs	r3, #2
 8004338:	e0b2      	b.n	80044a0 <HAL_ADC_Start+0x180>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d018      	beq.n	8004382 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004360:	4b52      	ldr	r3, [pc, #328]	@ (80044ac <HAL_ADC_Start+0x18c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a52      	ldr	r2, [pc, #328]	@ (80044b0 <HAL_ADC_Start+0x190>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0c9a      	lsrs	r2, r3, #18
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004374:	e002      	b.n	800437c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3b01      	subs	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f9      	bne.n	8004376 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d17a      	bne.n	8004486 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ce:	d106      	bne.n	80043de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	f023 0206 	bic.w	r2, r3, #6
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
 80043dc:	e002      	b.n	80043e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043ec:	4b31      	ldr	r3, [pc, #196]	@ (80044b4 <HAL_ADC_Start+0x194>)
 80043ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2b00      	cmp	r3, #0
 8004404:	d12a      	bne.n	800445c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <HAL_ADC_Start+0x198>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d015      	beq.n	800443c <HAL_ADC_Start+0x11c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a29      	ldr	r2, [pc, #164]	@ (80044bc <HAL_ADC_Start+0x19c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d105      	bne.n	8004426 <HAL_ADC_Start+0x106>
 800441a:	4b26      	ldr	r3, [pc, #152]	@ (80044b4 <HAL_ADC_Start+0x194>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a25      	ldr	r2, [pc, #148]	@ (80044c0 <HAL_ADC_Start+0x1a0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d136      	bne.n	800449e <HAL_ADC_Start+0x17e>
 8004430:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_ADC_Start+0x194>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d130      	bne.n	800449e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d129      	bne.n	800449e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	e020      	b.n	800449e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a15      	ldr	r2, [pc, #84]	@ (80044b8 <HAL_ADC_Start+0x198>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d11b      	bne.n	800449e <HAL_ADC_Start+0x17e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d114      	bne.n	800449e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	e00b      	b.n	800449e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f043 0210 	orr.w	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	20000028 	.word	0x20000028
 80044b0:	431bde83 	.word	0x431bde83
 80044b4:	40012300 	.word	0x40012300
 80044b8:	40012000 	.word	0x40012000
 80044bc:	40012100 	.word	0x40012100
 80044c0:	40012200 	.word	0x40012200

080044c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_ADC_Stop+0x16>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e021      	b.n	800451e <HAL_ADC_Stop+0x5a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f043 0201 	orr.w	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004546:	d113      	bne.n	8004570 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004556:	d10b      	bne.n	8004570 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e063      	b.n	8004638 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004570:	f7ff fe62 	bl	8004238 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004576:	e021      	b.n	80045bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800457e:	d01d      	beq.n	80045bc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_ADC_PollForConversion+0x6c>
 8004586:	f7ff fe57 	bl	8004238 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d212      	bcs.n	80045bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d00b      	beq.n	80045bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	f043 0204 	orr.w	r2, r3, #4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e03d      	b.n	8004638 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d1d6      	bne.n	8004578 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0212 	mvn.w	r2, #18
 80045d2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d123      	bne.n	8004636 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d11f      	bne.n	8004636 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004600:	2b00      	cmp	r3, #0
 8004602:	d006      	beq.n	8004612 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d111      	bne.n	8004636 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x1c>
 8004674:	2302      	movs	r3, #2
 8004676:	e105      	b.n	8004884 <HAL_ADC_ConfigChannel+0x228>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b09      	cmp	r3, #9
 8004686:	d925      	bls.n	80046d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68d9      	ldr	r1, [r3, #12]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	4613      	mov	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4413      	add	r3, r2
 800469c:	3b1e      	subs	r3, #30
 800469e:	2207      	movs	r2, #7
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43da      	mvns	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	400a      	ands	r2, r1
 80046ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68d9      	ldr	r1, [r3, #12]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4618      	mov	r0, r3
 80046c0:	4603      	mov	r3, r0
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	4403      	add	r3, r0
 80046c6:	3b1e      	subs	r3, #30
 80046c8:	409a      	lsls	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e022      	b.n	800471a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6919      	ldr	r1, [r3, #16]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	2207      	movs	r2, #7
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43da      	mvns	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	400a      	ands	r2, r1
 80046f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	4618      	mov	r0, r3
 800470a:	4603      	mov	r3, r0
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4403      	add	r3, r0
 8004710:	409a      	lsls	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b06      	cmp	r3, #6
 8004720:	d824      	bhi.n	800476c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	3b05      	subs	r3, #5
 8004734:	221f      	movs	r2, #31
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	400a      	ands	r2, r1
 8004742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	4618      	mov	r0, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	3b05      	subs	r3, #5
 800475e:	fa00 f203 	lsl.w	r2, r0, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	635a      	str	r2, [r3, #52]	@ 0x34
 800476a:	e04c      	b.n	8004806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d824      	bhi.n	80047be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	3b23      	subs	r3, #35	@ 0x23
 8004786:	221f      	movs	r2, #31
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43da      	mvns	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	400a      	ands	r2, r1
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	3b23      	subs	r3, #35	@ 0x23
 80047b0:	fa00 f203 	lsl.w	r2, r0, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80047bc:	e023      	b.n	8004806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	3b41      	subs	r3, #65	@ 0x41
 80047d0:	221f      	movs	r2, #31
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43da      	mvns	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	400a      	ands	r2, r1
 80047de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4618      	mov	r0, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	3b41      	subs	r3, #65	@ 0x41
 80047fa:	fa00 f203 	lsl.w	r2, r0, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004806:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <HAL_ADC_ConfigChannel+0x234>)
 8004808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a21      	ldr	r2, [pc, #132]	@ (8004894 <HAL_ADC_ConfigChannel+0x238>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d109      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x1cc>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b12      	cmp	r3, #18
 800481a:	d105      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <HAL_ADC_ConfigChannel+0x238>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d123      	bne.n	800487a <HAL_ADC_ConfigChannel+0x21e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b10      	cmp	r3, #16
 8004838:	d003      	beq.n	8004842 <HAL_ADC_ConfigChannel+0x1e6>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b11      	cmp	r3, #17
 8004840:	d11b      	bne.n	800487a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b10      	cmp	r3, #16
 8004854:	d111      	bne.n	800487a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004856:	4b10      	ldr	r3, [pc, #64]	@ (8004898 <HAL_ADC_ConfigChannel+0x23c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a10      	ldr	r2, [pc, #64]	@ (800489c <HAL_ADC_ConfigChannel+0x240>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	0c9a      	lsrs	r2, r3, #18
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800486c:	e002      	b.n	8004874 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3b01      	subs	r3, #1
 8004872:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f9      	bne.n	800486e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40012300 	.word	0x40012300
 8004894:	40012000 	.word	0x40012000
 8004898:	20000028 	.word	0x20000028
 800489c:	431bde83 	.word	0x431bde83

080048a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a8:	4b79      	ldr	r3, [pc, #484]	@ (8004a90 <ADC_Init+0x1f0>)
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80048f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800491a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	4a58      	ldr	r2, [pc, #352]	@ (8004a94 <ADC_Init+0x1f4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6899      	ldr	r1, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	e00f      	b.n	800499e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800498c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800499c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0202 	bic.w	r2, r2, #2
 80049ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7e1b      	ldrb	r3, [r3, #24]
 80049b8:	005a      	lsls	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01b      	beq.n	8004a04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	3b01      	subs	r3, #1
 80049f8:	035a      	lsls	r2, r3, #13
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	e007      	b.n	8004a14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	051a      	lsls	r2, r3, #20
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a56:	025a      	lsls	r2, r3, #9
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	029a      	lsls	r2, r3, #10
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012300 	.word	0x40012300
 8004a94:	0f000001 	.word	0x0f000001

08004a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aca:	4a04      	ldr	r2, [pc, #16]	@ (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	60d3      	str	r3, [r2, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae4:	4b04      	ldr	r3, [pc, #16]	@ (8004af8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 0307 	and.w	r3, r3, #7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db0b      	blt.n	8004b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <__NVIC_EnableIRQ+0x38>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	@ (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	@ 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
         );
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c04:	d301      	bcc.n	8004c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c06:	2301      	movs	r3, #1
 8004c08:	e00f      	b.n	8004c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c34 <SysTick_Config+0x40>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c12:	210f      	movs	r1, #15
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c18:	f7ff ff8e 	bl	8004b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c1c:	4b05      	ldr	r3, [pc, #20]	@ (8004c34 <SysTick_Config+0x40>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c22:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <SysTick_Config+0x40>)
 8004c24:	2207      	movs	r2, #7
 8004c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	e000e010 	.word	0xe000e010

08004c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff29 	bl	8004a98 <__NVIC_SetPriorityGrouping>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	4603      	mov	r3, r0
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c60:	f7ff ff3e 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8004c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7ff ff8e 	bl	8004b8c <NVIC_EncodePriority>
 8004c70:	4602      	mov	r2, r0
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ff5d 	bl	8004b38 <__NVIC_SetPriority>
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ff31 	bl	8004afc <__NVIC_EnableIRQ>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff ffa2 	bl	8004bf4 <SysTick_Config>
 8004cb0:	4603      	mov	r3, r0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cc8:	f7ff fab6 	bl	8004238 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d008      	beq.n	8004cec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e052      	b.n	8004d92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0216 	bic.w	r2, r2, #22
 8004cfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <HAL_DMA_Abort+0x62>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0208 	bic.w	r2, r2, #8
 8004d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d3c:	e013      	b.n	8004d66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3e:	f7ff fa7b 	bl	8004238 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d90c      	bls.n	8004d66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e015      	b.n	8004d92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e4      	bne.n	8004d3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	223f      	movs	r2, #63	@ 0x3f
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d004      	beq.n	8004db8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e00c      	b.n	8004dd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	@ 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e16b      	b.n	80050d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	f040 815a 	bne.w	80050ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d005      	beq.n	8004e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d130      	bne.n	8004e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 0201 	and.w	r2, r3, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d017      	beq.n	8004ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d123      	bne.n	8004f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3208      	adds	r2, #8
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80b4 	beq.w	80050ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	4b60      	ldr	r3, [pc, #384]	@ (80050ec <HAL_GPIO_Init+0x30c>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6e:	4a5f      	ldr	r2, [pc, #380]	@ (80050ec <HAL_GPIO_Init+0x30c>)
 8004f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f76:	4b5d      	ldr	r3, [pc, #372]	@ (80050ec <HAL_GPIO_Init+0x30c>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f82:	4a5b      	ldr	r2, [pc, #364]	@ (80050f0 <HAL_GPIO_Init+0x310>)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	3302      	adds	r3, #2
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	220f      	movs	r2, #15
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	@ (80050f4 <HAL_GPIO_Init+0x314>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02b      	beq.n	8005006 <HAL_GPIO_Init+0x226>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a51      	ldr	r2, [pc, #324]	@ (80050f8 <HAL_GPIO_Init+0x318>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d025      	beq.n	8005002 <HAL_GPIO_Init+0x222>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a50      	ldr	r2, [pc, #320]	@ (80050fc <HAL_GPIO_Init+0x31c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01f      	beq.n	8004ffe <HAL_GPIO_Init+0x21e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8005100 <HAL_GPIO_Init+0x320>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d019      	beq.n	8004ffa <HAL_GPIO_Init+0x21a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8005104 <HAL_GPIO_Init+0x324>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_GPIO_Init+0x216>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8005108 <HAL_GPIO_Init+0x328>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00d      	beq.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800510c <HAL_GPIO_Init+0x32c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <HAL_GPIO_Init+0x20e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8005110 <HAL_GPIO_Init+0x330>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <HAL_GPIO_Init+0x20a>
 8004fe6:	2307      	movs	r3, #7
 8004fe8:	e00e      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8004fea:	2308      	movs	r3, #8
 8004fec:	e00c      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8004fee:	2306      	movs	r3, #6
 8004ff0:	e00a      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8004ff2:	2305      	movs	r3, #5
 8004ff4:	e008      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	e006      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e004      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e002      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_GPIO_Init+0x228>
 8005006:	2300      	movs	r3, #0
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	f002 0203 	and.w	r2, r2, #3
 800500e:	0092      	lsls	r2, r2, #2
 8005010:	4093      	lsls	r3, r2
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005018:	4935      	ldr	r1, [pc, #212]	@ (80050f0 <HAL_GPIO_Init+0x310>)
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	3302      	adds	r3, #2
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005026:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <HAL_GPIO_Init+0x334>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800504a:	4a32      	ldr	r2, [pc, #200]	@ (8005114 <HAL_GPIO_Init+0x334>)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005050:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <HAL_GPIO_Init+0x334>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005074:	4a27      	ldr	r2, [pc, #156]	@ (8005114 <HAL_GPIO_Init+0x334>)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800507a:	4b26      	ldr	r3, [pc, #152]	@ (8005114 <HAL_GPIO_Init+0x334>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	43db      	mvns	r3, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4013      	ands	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800509e:	4a1d      	ldr	r2, [pc, #116]	@ (8005114 <HAL_GPIO_Init+0x334>)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005114 <HAL_GPIO_Init+0x334>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050c8:	4a12      	ldr	r2, [pc, #72]	@ (8005114 <HAL_GPIO_Init+0x334>)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3301      	adds	r3, #1
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	f67f ae90 	bls.w	8004dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3724      	adds	r7, #36	@ 0x24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40013800 	.word	0x40013800
 80050f4:	40020000 	.word	0x40020000
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40020800 	.word	0x40020800
 8005100:	40020c00 	.word	0x40020c00
 8005104:	40021000 	.word	0x40021000
 8005108:	40021400 	.word	0x40021400
 800510c:	40021800 	.word	0x40021800
 8005110:	40021c00 	.word	0x40021c00
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e001      	b.n	800513a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
 8005154:	4613      	mov	r3, r2
 8005156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005158:	787b      	ldrb	r3, [r7, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005164:	e003      	b.n	800516e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	041a      	lsls	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	619a      	str	r2, [r3, #24]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	460b      	mov	r3, r1
 8005184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800518c:	887a      	ldrh	r2, [r7, #2]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4013      	ands	r3, r2
 8005192:	041a      	lsls	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	43d9      	mvns	r1, r3
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	400b      	ands	r3, r1
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	619a      	str	r2, [r3, #24]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e12b      	b.n	800541a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fe fcb4 	bl	8003b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	@ 0x24
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005214:	f001 fc48 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 8005218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4a81      	ldr	r2, [pc, #516]	@ (8005424 <HAL_I2C_Init+0x274>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d807      	bhi.n	8005234 <HAL_I2C_Init+0x84>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a80      	ldr	r2, [pc, #512]	@ (8005428 <HAL_I2C_Init+0x278>)
 8005228:	4293      	cmp	r3, r2
 800522a:	bf94      	ite	ls
 800522c:	2301      	movls	r3, #1
 800522e:	2300      	movhi	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	e006      	b.n	8005242 <HAL_I2C_Init+0x92>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a7d      	ldr	r2, [pc, #500]	@ (800542c <HAL_I2C_Init+0x27c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	bf94      	ite	ls
 800523c:	2301      	movls	r3, #1
 800523e:	2300      	movhi	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0e7      	b.n	800541a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a78      	ldr	r2, [pc, #480]	@ (8005430 <HAL_I2C_Init+0x280>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	0c9b      	lsrs	r3, r3, #18
 8005254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4a6a      	ldr	r2, [pc, #424]	@ (8005424 <HAL_I2C_Init+0x274>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d802      	bhi.n	8005284 <HAL_I2C_Init+0xd4>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	3301      	adds	r3, #1
 8005282:	e009      	b.n	8005298 <HAL_I2C_Init+0xe8>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	4a69      	ldr	r2, [pc, #420]	@ (8005434 <HAL_I2C_Init+0x284>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	099b      	lsrs	r3, r3, #6
 8005296:	3301      	adds	r3, #1
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	430b      	orrs	r3, r1
 800529e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	495c      	ldr	r1, [pc, #368]	@ (8005424 <HAL_I2C_Init+0x274>)
 80052b4:	428b      	cmp	r3, r1
 80052b6:	d819      	bhi.n	80052ec <HAL_I2C_Init+0x13c>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1e59      	subs	r1, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80052c6:	1c59      	adds	r1, r3, #1
 80052c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052cc:	400b      	ands	r3, r1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_I2C_Init+0x138>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1e59      	subs	r1, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e0:	3301      	adds	r3, #1
 80052e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e6:	e051      	b.n	800538c <HAL_I2C_Init+0x1dc>
 80052e8:	2304      	movs	r3, #4
 80052ea:	e04f      	b.n	800538c <HAL_I2C_Init+0x1dc>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d111      	bne.n	8005318 <HAL_I2C_Init+0x168>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1e58      	subs	r0, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	440b      	add	r3, r1
 8005302:	fbb0 f3f3 	udiv	r3, r0, r3
 8005306:	3301      	adds	r3, #1
 8005308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e012      	b.n	800533e <HAL_I2C_Init+0x18e>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1e58      	subs	r0, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	0099      	lsls	r1, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	fbb0 f3f3 	udiv	r3, r0, r3
 800532e:	3301      	adds	r3, #1
 8005330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_Init+0x196>
 8005342:	2301      	movs	r3, #1
 8005344:	e022      	b.n	800538c <HAL_I2C_Init+0x1dc>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10e      	bne.n	800536c <HAL_I2C_Init+0x1bc>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1e58      	subs	r0, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6859      	ldr	r1, [r3, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	440b      	add	r3, r1
 800535c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005360:	3301      	adds	r3, #1
 8005362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536a:	e00f      	b.n	800538c <HAL_I2C_Init+0x1dc>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1e58      	subs	r0, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	0099      	lsls	r1, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005382:	3301      	adds	r3, #1
 8005384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005388:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	6809      	ldr	r1, [r1, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80053ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6911      	ldr	r1, [r2, #16]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68d2      	ldr	r2, [r2, #12]
 80053c6:	4311      	orrs	r1, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	000186a0 	.word	0x000186a0
 8005428:	001e847f 	.word	0x001e847f
 800542c:	003d08ff 	.word	0x003d08ff
 8005430:	431bde83 	.word	0x431bde83
 8005434:	10624dd3 	.word	0x10624dd3

08005438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4603      	mov	r3, r0
 8005448:	817b      	strh	r3, [r7, #10]
 800544a:	460b      	mov	r3, r1
 800544c:	813b      	strh	r3, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005452:	f7fe fef1 	bl	8004238 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	f040 80d9 	bne.w	8005618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2319      	movs	r3, #25
 800546c:	2201      	movs	r2, #1
 800546e:	496d      	ldr	r1, [pc, #436]	@ (8005624 <HAL_I2C_Mem_Write+0x1ec>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fc8b 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	e0cc      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2C_Mem_Write+0x56>
 800548a:	2302      	movs	r3, #2
 800548c:	e0c5      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d007      	beq.n	80054b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2221      	movs	r2, #33	@ 0x21
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005628 <HAL_I2C_Mem_Write+0x1f0>)
 80054f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054f6:	88f8      	ldrh	r0, [r7, #6]
 80054f8:	893a      	ldrh	r2, [r7, #8]
 80054fa:	8979      	ldrh	r1, [r7, #10]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4603      	mov	r3, r0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fac2 	bl	8005a90 <I2C_RequestMemoryWrite>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d052      	beq.n	80055b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e081      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fd50 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b04      	cmp	r3, #4
 800552c:	d107      	bne.n	800553e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e06b      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b04      	cmp	r3, #4
 800557e:	d11b      	bne.n	80055b8 <HAL_I2C_Mem_Write+0x180>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d017      	beq.n	80055b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1aa      	bne.n	8005516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fd43 	bl	8006050 <I2C_WaitOnBTFFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d107      	bne.n	80055e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e016      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005618:	2302      	movs	r3, #2
  }
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	00100002 	.word	0x00100002
 8005628:	ffff0000 	.word	0xffff0000

0800562c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	@ 0x30
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	4608      	mov	r0, r1
 8005636:	4611      	mov	r1, r2
 8005638:	461a      	mov	r2, r3
 800563a:	4603      	mov	r3, r0
 800563c:	817b      	strh	r3, [r7, #10]
 800563e:	460b      	mov	r3, r1
 8005640:	813b      	strh	r3, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005646:	f7fe fdf7 	bl	8004238 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	f040 8214 	bne.w	8005a82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2319      	movs	r3, #25
 8005660:	2201      	movs	r2, #1
 8005662:	497b      	ldr	r1, [pc, #492]	@ (8005850 <HAL_I2C_Mem_Read+0x224>)
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fb91 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
 8005672:	e207      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_I2C_Mem_Read+0x56>
 800567e:	2302      	movs	r3, #2
 8005680:	e200      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d007      	beq.n	80056a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2222      	movs	r2, #34	@ 0x22
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2240      	movs	r2, #64	@ 0x40
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80056d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005854 <HAL_I2C_Mem_Read+0x228>)
 80056e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ea:	88f8      	ldrh	r0, [r7, #6]
 80056ec:	893a      	ldrh	r2, [r7, #8]
 80056ee:	8979      	ldrh	r1, [r7, #10]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4603      	mov	r3, r0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fa5e 	bl	8005bbc <I2C_RequestMemoryRead>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e1bc      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d113      	bne.n	800573a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e190      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573e:	2b01      	cmp	r3, #1
 8005740:	d11b      	bne.n	800577a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e170      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	2b02      	cmp	r3, #2
 8005780:	d11b      	bne.n	80057ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	e150      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057d0:	e144      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	f200 80f1 	bhi.w	80059be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d123      	bne.n	800582c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fc79 	bl	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e145      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800582a:	e117      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005830:	2b02      	cmp	r3, #2
 8005832:	d14e      	bne.n	80058d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	2200      	movs	r2, #0
 800583c:	4906      	ldr	r1, [pc, #24]	@ (8005858 <HAL_I2C_Mem_Read+0x22c>)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 faa4 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e11a      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
 800584e:	bf00      	nop
 8005850:	00100002 	.word	0x00100002
 8005854:	ffff0000 	.word	0xffff0000
 8005858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058d0:	e0c4      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	2200      	movs	r2, #0
 80058da:	496c      	ldr	r1, [pc, #432]	@ (8005a8c <HAL_I2C_Mem_Read+0x460>)
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fa55 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0cb      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	2200      	movs	r2, #0
 8005936:	4955      	ldr	r1, [pc, #340]	@ (8005a8c <HAL_I2C_Mem_Read+0x460>)
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fa27 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e09d      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059bc:	e04e      	b.n	8005a5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fb8c 	bl	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e058      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d124      	bne.n	8005a5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d107      	bne.n	8005a2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f aeb6 	bne.w	80057d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3728      	adds	r7, #40	@ 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	00010004 	.word	0x00010004

08005a90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	4608      	mov	r0, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	817b      	strh	r3, [r7, #10]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	813b      	strh	r3, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f960 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00d      	beq.n	8005aee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae0:	d103      	bne.n	8005aea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e05f      	b.n	8005bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	6a3a      	ldr	r2, [r7, #32]
 8005b02:	492d      	ldr	r1, [pc, #180]	@ (8005bb8 <I2C_RequestMemoryWrite+0x128>)
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f9bb 	bl	8005e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e04c      	b.n	8005bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2c:	6a39      	ldr	r1, [r7, #32]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fa46 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d107      	bne.n	8005b52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e02b      	b.n	8005bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5c:	893b      	ldrh	r3, [r7, #8]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	611a      	str	r2, [r3, #16]
 8005b66:	e021      	b.n	8005bac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b68:	893b      	ldrh	r3, [r7, #8]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa20 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d107      	bne.n	8005b9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e005      	b.n	8005bae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba2:	893b      	ldrh	r3, [r7, #8]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	00010002 	.word	0x00010002

08005bbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	817b      	strh	r3, [r7, #10]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	813b      	strh	r3, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005be4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f8c2 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c1c:	d103      	bne.n	8005c26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e0aa      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c2a:	897b      	ldrh	r3, [r7, #10]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	4952      	ldr	r1, [pc, #328]	@ (8005d88 <I2C_RequestMemoryRead+0x1cc>)
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f91d 	bl	8005e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e097      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c68:	6a39      	ldr	r1, [r7, #32]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f9a8 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d107      	bne.n	8005c8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e076      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d105      	bne.n	8005ca4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c98:	893b      	ldrh	r3, [r7, #8]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	e021      	b.n	8005ce8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb4:	6a39      	ldr	r1, [r7, #32]
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f982 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d107      	bne.n	8005cda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e050      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cde:	893b      	ldrh	r3, [r7, #8]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cea:	6a39      	ldr	r1, [r7, #32]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f967 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00d      	beq.n	8005d14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d107      	bne.n	8005d10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e035      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f82b 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d4a:	d103      	bne.n	8005d54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e013      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d58:	897b      	ldrh	r3, [r7, #10]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	6a3a      	ldr	r2, [r7, #32]
 8005d6c:	4906      	ldr	r1, [pc, #24]	@ (8005d88 <I2C_RequestMemoryRead+0x1cc>)
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f886 	bl	8005e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	00010002 	.word	0x00010002

08005d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d9c:	e048      	b.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005da4:	d044      	beq.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fe fa47 	bl	8004238 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d139      	bne.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10d      	bne.n	8005de2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	43da      	mvns	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	e00c      	b.n	8005dfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	43da      	mvns	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d116      	bne.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e023      	b.n	8005e78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d10d      	bne.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	43da      	mvns	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	e00c      	b.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	43da      	mvns	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d093      	beq.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e8e:	e071      	b.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9e:	d123      	bne.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	f043 0204 	orr.w	r2, r3, #4
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e067      	b.n	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eee:	d041      	beq.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef0:	f7fe f9a2 	bl	8004238 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d136      	bne.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10c      	bne.n	8005f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	43da      	mvns	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e00b      	b.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	43da      	mvns	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e021      	b.n	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	0c1b      	lsrs	r3, r3, #16
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10c      	bne.n	8005f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	43da      	mvns	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e00b      	b.n	8005fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	43da      	mvns	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f af6d 	bne.w	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fcc:	e034      	b.n	8006038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f8e3 	bl	800619a <I2C_IsAcknowledgeFailed>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e034      	b.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fe4:	d028      	beq.n	8006038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fe f927 	bl	8004238 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11d      	bne.n	8006038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006006:	2b80      	cmp	r3, #128	@ 0x80
 8006008:	d016      	beq.n	8006038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e007      	b.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	2b80      	cmp	r3, #128	@ 0x80
 8006044:	d1c3      	bne.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800605c:	e034      	b.n	80060c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f89b 	bl	800619a <I2C_IsAcknowledgeFailed>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e034      	b.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006074:	d028      	beq.n	80060c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fe f8df 	bl	8004238 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11d      	bne.n	80060c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b04      	cmp	r3, #4
 8006098:	d016      	beq.n	80060c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	f043 0220 	orr.w	r2, r3, #32
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e007      	b.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d1c3      	bne.n	800605e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ec:	e049      	b.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d119      	bne.n	8006130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0210 	mvn.w	r2, #16
 8006104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e030      	b.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006130:	f7fe f882 	bl	8004238 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11d      	bne.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006150:	2b40      	cmp	r3, #64	@ 0x40
 8006152:	d016      	beq.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e007      	b.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d1ae      	bne.n	80060ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b0:	d11b      	bne.n	80061ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80061fe:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <HAL_PWR_EnableBkUpAccess+0x24>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800620a:	687b      	ldr	r3, [r7, #4]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	420e0020 	.word	0x420e0020
 800621c:	40007000 	.word	0x40007000

08006220 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <HAL_PWR_DisableBkUpAccess+0x24>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006232:	687b      	ldr	r3, [r7, #4]
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	420e0020 	.word	0x420e0020
 8006244:	40007000 	.word	0x40007000

08006248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e267      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d075      	beq.n	8006352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006266:	4b88      	ldr	r3, [pc, #544]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
 800626e:	2b04      	cmp	r3, #4
 8006270:	d00c      	beq.n	800628c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006272:	4b85      	ldr	r3, [pc, #532]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800627a:	2b08      	cmp	r3, #8
 800627c:	d112      	bne.n	80062a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800627e:	4b82      	ldr	r3, [pc, #520]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800628a:	d10b      	bne.n	80062a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628c:	4b7e      	ldr	r3, [pc, #504]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05b      	beq.n	8006350 <HAL_RCC_OscConfig+0x108>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d157      	bne.n	8006350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e242      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ac:	d106      	bne.n	80062bc <HAL_RCC_OscConfig+0x74>
 80062ae:	4b76      	ldr	r3, [pc, #472]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a75      	ldr	r2, [pc, #468]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e01d      	b.n	80062f8 <HAL_RCC_OscConfig+0xb0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x98>
 80062c6:	4b70      	ldr	r3, [pc, #448]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a6f      	ldr	r2, [pc, #444]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a6c      	ldr	r2, [pc, #432]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0xb0>
 80062e0:	4b69      	ldr	r3, [pc, #420]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a68      	ldr	r2, [pc, #416]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4b66      	ldr	r3, [pc, #408]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a65      	ldr	r2, [pc, #404]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80062f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d013      	beq.n	8006328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006300:	f7fd ff9a 	bl	8004238 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006308:	f7fd ff96 	bl	8004238 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b64      	cmp	r3, #100	@ 0x64
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e207      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631a:	4b5b      	ldr	r3, [pc, #364]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0xc0>
 8006326:	e014      	b.n	8006352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fd ff86 	bl	8004238 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006330:	f7fd ff82 	bl	8004238 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b64      	cmp	r3, #100	@ 0x64
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e1f3      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006342:	4b51      	ldr	r3, [pc, #324]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0xe8>
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d063      	beq.n	8006426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800635e:	4b4a      	ldr	r3, [pc, #296]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800636a:	4b47      	ldr	r3, [pc, #284]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006372:	2b08      	cmp	r3, #8
 8006374:	d11c      	bne.n	80063b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006376:	4b44      	ldr	r3, [pc, #272]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d116      	bne.n	80063b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006382:	4b41      	ldr	r3, [pc, #260]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_RCC_OscConfig+0x152>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d001      	beq.n	800639a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e1c7      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639a:	4b3b      	ldr	r3, [pc, #236]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4937      	ldr	r1, [pc, #220]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ae:	e03a      	b.n	8006426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d020      	beq.n	80063fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063b8:	4b34      	ldr	r3, [pc, #208]	@ (800648c <HAL_RCC_OscConfig+0x244>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063be:	f7fd ff3b 	bl	8004238 <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c6:	f7fd ff37 	bl	8004238 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e1a8      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f0      	beq.n	80063c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e4:	4b28      	ldr	r3, [pc, #160]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	4925      	ldr	r1, [pc, #148]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	600b      	str	r3, [r1, #0]
 80063f8:	e015      	b.n	8006426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063fa:	4b24      	ldr	r3, [pc, #144]	@ (800648c <HAL_RCC_OscConfig+0x244>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fd ff1a 	bl	8004238 <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006408:	f7fd ff16 	bl	8004238 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e187      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800641a:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f0      	bne.n	8006408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d036      	beq.n	80064a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800643a:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <HAL_RCC_OscConfig+0x248>)
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006440:	f7fd fefa 	bl	8004238 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006448:	f7fd fef6 	bl	8004238 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e167      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800645a:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <HAL_RCC_OscConfig+0x240>)
 800645c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0x200>
 8006466:	e01b      	b.n	80064a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006468:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <HAL_RCC_OscConfig+0x248>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800646e:	f7fd fee3 	bl	8004238 <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006474:	e00e      	b.n	8006494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006476:	f7fd fedf 	bl	8004238 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d907      	bls.n	8006494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e150      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
 8006488:	40023800 	.word	0x40023800
 800648c:	42470000 	.word	0x42470000
 8006490:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	4b88      	ldr	r3, [pc, #544]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ea      	bne.n	8006476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8097 	beq.w	80065dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b2:	4b81      	ldr	r3, [pc, #516]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10f      	bne.n	80064de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	4b7d      	ldr	r3, [pc, #500]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	4a7c      	ldr	r2, [pc, #496]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80064c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ce:	4b7a      	ldr	r3, [pc, #488]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064da:	2301      	movs	r3, #1
 80064dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064de:	4b77      	ldr	r3, [pc, #476]	@ (80066bc <HAL_RCC_OscConfig+0x474>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d118      	bne.n	800651c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ea:	4b74      	ldr	r3, [pc, #464]	@ (80066bc <HAL_RCC_OscConfig+0x474>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a73      	ldr	r2, [pc, #460]	@ (80066bc <HAL_RCC_OscConfig+0x474>)
 80064f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f6:	f7fd fe9f 	bl	8004238 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fe:	f7fd fe9b 	bl	8004238 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e10c      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006510:	4b6a      	ldr	r3, [pc, #424]	@ (80066bc <HAL_RCC_OscConfig+0x474>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d106      	bne.n	8006532 <HAL_RCC_OscConfig+0x2ea>
 8006524:	4b64      	ldr	r3, [pc, #400]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006528:	4a63      	ldr	r2, [pc, #396]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006530:	e01c      	b.n	800656c <HAL_RCC_OscConfig+0x324>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b05      	cmp	r3, #5
 8006538:	d10c      	bne.n	8006554 <HAL_RCC_OscConfig+0x30c>
 800653a:	4b5f      	ldr	r3, [pc, #380]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653e:	4a5e      	ldr	r2, [pc, #376]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006540:	f043 0304 	orr.w	r3, r3, #4
 8006544:	6713      	str	r3, [r2, #112]	@ 0x70
 8006546:	4b5c      	ldr	r3, [pc, #368]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	4a5b      	ldr	r2, [pc, #364]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	6713      	str	r3, [r2, #112]	@ 0x70
 8006552:	e00b      	b.n	800656c <HAL_RCC_OscConfig+0x324>
 8006554:	4b58      	ldr	r3, [pc, #352]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006558:	4a57      	ldr	r2, [pc, #348]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006560:	4b55      	ldr	r3, [pc, #340]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006564:	4a54      	ldr	r2, [pc, #336]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006566:	f023 0304 	bic.w	r3, r3, #4
 800656a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006574:	f7fd fe60 	bl	8004238 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800657a:	e00a      	b.n	8006592 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fd fe5c 	bl	8004238 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0cb      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006592:	4b49      	ldr	r3, [pc, #292]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0ee      	beq.n	800657c <HAL_RCC_OscConfig+0x334>
 800659e:	e014      	b.n	80065ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a0:	f7fd fe4a 	bl	8004238 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065a6:	e00a      	b.n	80065be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a8:	f7fd fe46 	bl	8004238 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e0b5      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065be:	4b3e      	ldr	r3, [pc, #248]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80065c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1ee      	bne.n	80065a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d105      	bne.n	80065dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d0:	4b39      	ldr	r3, [pc, #228]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	4a38      	ldr	r2, [pc, #224]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80065d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80a1 	beq.w	8006728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065e6:	4b34      	ldr	r3, [pc, #208]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d05c      	beq.n	80066ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d141      	bne.n	800667e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065fa:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <HAL_RCC_OscConfig+0x478>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fd fe1a 	bl	8004238 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006608:	f7fd fe16 	bl	8004238 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e087      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	4b27      	ldr	r3, [pc, #156]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f0      	bne.n	8006608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69da      	ldr	r2, [r3, #28]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	019b      	lsls	r3, r3, #6
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	3b01      	subs	r3, #1
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	061b      	lsls	r3, r3, #24
 800664a:	491b      	ldr	r1, [pc, #108]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 800664c:	4313      	orrs	r3, r2
 800664e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006650:	4b1b      	ldr	r3, [pc, #108]	@ (80066c0 <HAL_RCC_OscConfig+0x478>)
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006656:	f7fd fdef 	bl	8004238 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665e:	f7fd fdeb 	bl	8004238 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e05c      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006670:	4b11      	ldr	r3, [pc, #68]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <HAL_RCC_OscConfig+0x416>
 800667c:	e054      	b.n	8006728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667e:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <HAL_RCC_OscConfig+0x478>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006684:	f7fd fdd8 	bl	8004238 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668c:	f7fd fdd4 	bl	8004238 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e045      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCC_OscConfig+0x470>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x444>
 80066aa:	e03d      	b.n	8006728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d107      	bne.n	80066c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e038      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40007000 	.word	0x40007000
 80066c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006734 <HAL_RCC_OscConfig+0x4ec>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d028      	beq.n	8006724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d121      	bne.n	8006724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d11a      	bne.n	8006724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066f4:	4013      	ands	r3, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d111      	bne.n	8006724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	3b01      	subs	r3, #1
 800670e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006710:	429a      	cmp	r2, r3
 8006712:	d107      	bne.n	8006724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40023800 	.word	0x40023800

08006738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0cc      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800674c:	4b68      	ldr	r3, [pc, #416]	@ (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d90c      	bls.n	8006774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675a:	4b65      	ldr	r3, [pc, #404]	@ (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	4b63      	ldr	r3, [pc, #396]	@ (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0b8      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800678c:	4b59      	ldr	r3, [pc, #356]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4a58      	ldr	r2, [pc, #352]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a4:	4b53      	ldr	r3, [pc, #332]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4a52      	ldr	r2, [pc, #328]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b0:	4b50      	ldr	r3, [pc, #320]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	494d      	ldr	r1, [pc, #308]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d044      	beq.n	8006858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	4b47      	ldr	r3, [pc, #284]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d119      	bne.n	8006816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e07f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d003      	beq.n	80067f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d107      	bne.n	8006806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f6:	4b3f      	ldr	r3, [pc, #252]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e06f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006806:	4b3b      	ldr	r3, [pc, #236]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e067      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006816:	4b37      	ldr	r3, [pc, #220]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 0203 	bic.w	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	4934      	ldr	r1, [pc, #208]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	4313      	orrs	r3, r2
 8006826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006828:	f7fd fd06 	bl	8004238 <HAL_GetTick>
 800682c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682e:	e00a      	b.n	8006846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006830:	f7fd fd02 	bl	8004238 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e04f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006846:	4b2b      	ldr	r3, [pc, #172]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 020c 	and.w	r2, r3, #12
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	429a      	cmp	r2, r3
 8006856:	d1eb      	bne.n	8006830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006858:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d20c      	bcs.n	8006880 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006866:	4b22      	ldr	r3, [pc, #136]	@ (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e032      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800688c:	4b19      	ldr	r3, [pc, #100]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4916      	ldr	r1, [pc, #88]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	4313      	orrs	r3, r2
 800689c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	490e      	ldr	r1, [pc, #56]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068be:	f000 f821 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	490a      	ldr	r1, [pc, #40]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	5ccb      	ldrb	r3, [r1, r3]
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	4a09      	ldr	r2, [pc, #36]	@ (80068fc <HAL_RCC_ClockConfig+0x1c4>)
 80068d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068da:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <HAL_RCC_ClockConfig+0x1c8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fd fc66 	bl	80041b0 <HAL_InitTick>

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40023c00 	.word	0x40023c00
 80068f4:	40023800 	.word	0x40023800
 80068f8:	0800f818 	.word	0x0800f818
 80068fc:	20000028 	.word	0x20000028
 8006900:	2000002c 	.word	0x2000002c

08006904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006908:	b090      	sub	sp, #64	@ 0x40
 800690a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800691c:	4b59      	ldr	r3, [pc, #356]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 030c 	and.w	r3, r3, #12
 8006924:	2b08      	cmp	r3, #8
 8006926:	d00d      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x40>
 8006928:	2b08      	cmp	r3, #8
 800692a:	f200 80a1 	bhi.w	8006a70 <HAL_RCC_GetSysClockFreq+0x16c>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_RCC_GetSysClockFreq+0x34>
 8006932:	2b04      	cmp	r3, #4
 8006934:	d003      	beq.n	800693e <HAL_RCC_GetSysClockFreq+0x3a>
 8006936:	e09b      	b.n	8006a70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006938:	4b53      	ldr	r3, [pc, #332]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x184>)
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800693c:	e09b      	b.n	8006a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800693e:	4b53      	ldr	r3, [pc, #332]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006942:	e098      	b.n	8006a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006944:	4b4f      	ldr	r3, [pc, #316]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800694e:	4b4d      	ldr	r3, [pc, #308]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d028      	beq.n	80069ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800695a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	099b      	lsrs	r3, r3, #6
 8006960:	2200      	movs	r2, #0
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	627a      	str	r2, [r7, #36]	@ 0x24
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800696c:	2100      	movs	r1, #0
 800696e:	4b47      	ldr	r3, [pc, #284]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8006970:	fb03 f201 	mul.w	r2, r3, r1
 8006974:	2300      	movs	r3, #0
 8006976:	fb00 f303 	mul.w	r3, r0, r3
 800697a:	4413      	add	r3, r2
 800697c:	4a43      	ldr	r2, [pc, #268]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x188>)
 800697e:	fba0 1202 	umull	r1, r2, r0, r2
 8006982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006984:	460a      	mov	r2, r1
 8006986:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800698a:	4413      	add	r3, r2
 800698c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800698e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006990:	2200      	movs	r2, #0
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	61fa      	str	r2, [r7, #28]
 8006996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800699a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800699e:	f7fa f923 	bl	8000be8 <__aeabi_uldivmod>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4613      	mov	r3, r2
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069aa:	e053      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ac:	4b35      	ldr	r3, [pc, #212]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	099b      	lsrs	r3, r3, #6
 80069b2:	2200      	movs	r2, #0
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	617a      	str	r2, [r7, #20]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069be:	f04f 0b00 	mov.w	fp, #0
 80069c2:	4652      	mov	r2, sl
 80069c4:	465b      	mov	r3, fp
 80069c6:	f04f 0000 	mov.w	r0, #0
 80069ca:	f04f 0100 	mov.w	r1, #0
 80069ce:	0159      	lsls	r1, r3, #5
 80069d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069d4:	0150      	lsls	r0, r2, #5
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	ebb2 080a 	subs.w	r8, r2, sl
 80069de:	eb63 090b 	sbc.w	r9, r3, fp
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069f6:	ebb2 0408 	subs.w	r4, r2, r8
 80069fa:	eb63 0509 	sbc.w	r5, r3, r9
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	00eb      	lsls	r3, r5, #3
 8006a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a0c:	00e2      	lsls	r2, r4, #3
 8006a0e:	4614      	mov	r4, r2
 8006a10:	461d      	mov	r5, r3
 8006a12:	eb14 030a 	adds.w	r3, r4, sl
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	eb45 030b 	adc.w	r3, r5, fp
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	028b      	lsls	r3, r1, #10
 8006a2e:	4621      	mov	r1, r4
 8006a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a34:	4621      	mov	r1, r4
 8006a36:	028a      	lsls	r2, r1, #10
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	60fa      	str	r2, [r7, #12]
 8006a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a48:	f7fa f8ce 	bl	8000be8 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4613      	mov	r3, r2
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a54:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a6e:	e002      	b.n	8006a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3740      	adds	r7, #64	@ 0x40
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800
 8006a88:	00f42400 	.word	0x00f42400
 8006a8c:	017d7840 	.word	0x017d7840

08006a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a94:	4b03      	ldr	r3, [pc, #12]	@ (8006aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a96:	681b      	ldr	r3, [r3, #0]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000028 	.word	0x20000028

08006aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aac:	f7ff fff0 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	0a9b      	lsrs	r3, r3, #10
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	4903      	ldr	r1, [pc, #12]	@ (8006acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	0800f828 	.word	0x0800f828

08006ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ad4:	f7ff ffdc 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0b5b      	lsrs	r3, r3, #13
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	4903      	ldr	r1, [pc, #12]	@ (8006af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ae6:	5ccb      	ldrb	r3, [r1, r3]
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40023800 	.word	0x40023800
 8006af4:	0800f828 	.word	0x0800f828

08006af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e041      	b.n	8006b8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fd f858 	bl	8003bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f000 faec 	bl	8007114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <HAL_TIM_PWM_Start+0x24>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	bf14      	ite	ne
 8006bb4:	2301      	movne	r3, #1
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e022      	b.n	8006c02 <HAL_TIM_PWM_Start+0x6a>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d109      	bne.n	8006bd6 <HAL_TIM_PWM_Start+0x3e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	bf14      	ite	ne
 8006bce:	2301      	movne	r3, #1
 8006bd0:	2300      	moveq	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	e015      	b.n	8006c02 <HAL_TIM_PWM_Start+0x6a>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d109      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x58>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e008      	b.n	8006c02 <HAL_TIM_PWM_Start+0x6a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e07c      	b.n	8006d04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_TIM_PWM_Start+0x82>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c18:	e013      	b.n	8006c42 <HAL_TIM_PWM_Start+0xaa>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_PWM_Start+0x92>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c28:	e00b      	b.n	8006c42 <HAL_TIM_PWM_Start+0xaa>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_PWM_Start+0xa2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c38:	e003      	b.n	8006c42 <HAL_TIM_PWM_Start+0xaa>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2201      	movs	r2, #1
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fcbe 	bl	80075cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2d      	ldr	r2, [pc, #180]	@ (8006d0c <HAL_TIM_PWM_Start+0x174>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_TIM_PWM_Start+0xcc>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d10 <HAL_TIM_PWM_Start+0x178>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_TIM_PWM_Start+0xd0>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <HAL_TIM_PWM_Start+0xd2>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <HAL_TIM_PWM_Start+0x174>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d022      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c90:	d01d      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1f      	ldr	r2, [pc, #124]	@ (8006d14 <HAL_TIM_PWM_Start+0x17c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d018      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d18 <HAL_TIM_PWM_Start+0x180>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1c      	ldr	r2, [pc, #112]	@ (8006d1c <HAL_TIM_PWM_Start+0x184>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00e      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <HAL_TIM_PWM_Start+0x178>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <HAL_TIM_PWM_Start+0x188>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_TIM_PWM_Start+0x136>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a16      	ldr	r2, [pc, #88]	@ (8006d24 <HAL_TIM_PWM_Start+0x18c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d111      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b06      	cmp	r3, #6
 8006cde:	d010      	beq.n	8006d02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	e007      	b.n	8006d02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0201 	orr.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40010400 	.word	0x40010400
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40001800 	.word	0x40001800

08006d28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e097      	b.n	8006e6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fc ff77 	bl	8003c44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6c:	f023 0307 	bic.w	r3, r3, #7
 8006d70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f000 f9c9 	bl	8007114 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006dc8:	f023 030c 	bic.w	r3, r3, #12
 8006dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	4313      	orrs	r3, r2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	011a      	lsls	r2, r3, #4
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	031b      	lsls	r3, r3, #12
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d102      	bne.n	8006eb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eaa:	7b7b      	ldrb	r3, [r7, #13]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d001      	beq.n	8006eb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e069      	b.n	8006f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ec4:	e031      	b.n	8006f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d110      	bne.n	8006eee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d102      	bne.n	8006ed8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ed2:	7b3b      	ldrb	r3, [r7, #12]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d001      	beq.n	8006edc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e055      	b.n	8006f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eec:	e01d      	b.n	8006f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d108      	bne.n	8006f06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006efa:	7b7b      	ldrb	r3, [r7, #13]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d102      	bne.n	8006f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f00:	7b3b      	ldrb	r3, [r7, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d001      	beq.n	8006f0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e03e      	b.n	8006f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_TIM_Encoder_Start+0xc4>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d008      	beq.n	8006f48 <HAL_TIM_Encoder_Start+0xd4>
 8006f36:	e00f      	b.n	8006f58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fb43 	bl	80075cc <TIM_CCxChannelCmd>
      break;
 8006f46:	e016      	b.n	8006f76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	2104      	movs	r1, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fb3b 	bl	80075cc <TIM_CCxChannelCmd>
      break;
 8006f56:	e00e      	b.n	8006f76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fb33 	bl	80075cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2104      	movs	r1, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fb2c 	bl	80075cc <TIM_CCxChannelCmd>
      break;
 8006f74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e0ae      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	f200 809f 	bhi.w	80070fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006ff9 	.word	0x08006ff9
 8006fc8:	080070fd 	.word	0x080070fd
 8006fcc:	080070fd 	.word	0x080070fd
 8006fd0:	080070fd 	.word	0x080070fd
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	080070fd 	.word	0x080070fd
 8006fdc:	080070fd 	.word	0x080070fd
 8006fe0:	080070fd 	.word	0x080070fd
 8006fe4:	0800707b 	.word	0x0800707b
 8006fe8:	080070fd 	.word	0x080070fd
 8006fec:	080070fd 	.word	0x080070fd
 8006ff0:	080070fd 	.word	0x080070fd
 8006ff4:	080070bb 	.word	0x080070bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f934 	bl	800726c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0208 	orr.w	r2, r2, #8
 8007012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0204 	bic.w	r2, r2, #4
 8007022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6999      	ldr	r1, [r3, #24]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	619a      	str	r2, [r3, #24]
      break;
 8007036:	e064      	b.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	4618      	mov	r0, r3
 8007040:	f000 f984 	bl	800734c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6999      	ldr	r1, [r3, #24]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	021a      	lsls	r2, r3, #8
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	619a      	str	r2, [r3, #24]
      break;
 8007078:	e043      	b.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f9d9 	bl	8007438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0208 	orr.w	r2, r2, #8
 8007094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0204 	bic.w	r2, r2, #4
 80070a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69d9      	ldr	r1, [r3, #28]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	61da      	str	r2, [r3, #28]
      break;
 80070b8:	e023      	b.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fa2d 	bl	8007520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69da      	ldr	r2, [r3, #28]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69d9      	ldr	r1, [r3, #28]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	021a      	lsls	r2, r3, #8
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	61da      	str	r2, [r3, #28]
      break;
 80070fa:	e002      	b.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a46      	ldr	r2, [pc, #280]	@ (8007240 <TIM_Base_SetConfig+0x12c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007132:	d00f      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a43      	ldr	r2, [pc, #268]	@ (8007244 <TIM_Base_SetConfig+0x130>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00b      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a42      	ldr	r2, [pc, #264]	@ (8007248 <TIM_Base_SetConfig+0x134>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a41      	ldr	r2, [pc, #260]	@ (800724c <TIM_Base_SetConfig+0x138>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a40      	ldr	r2, [pc, #256]	@ (8007250 <TIM_Base_SetConfig+0x13c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d108      	bne.n	8007166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a35      	ldr	r2, [pc, #212]	@ (8007240 <TIM_Base_SetConfig+0x12c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d02b      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007174:	d027      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a32      	ldr	r2, [pc, #200]	@ (8007244 <TIM_Base_SetConfig+0x130>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d023      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a31      	ldr	r2, [pc, #196]	@ (8007248 <TIM_Base_SetConfig+0x134>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d01f      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a30      	ldr	r2, [pc, #192]	@ (800724c <TIM_Base_SetConfig+0x138>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01b      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2f      	ldr	r2, [pc, #188]	@ (8007250 <TIM_Base_SetConfig+0x13c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d017      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2e      	ldr	r2, [pc, #184]	@ (8007254 <TIM_Base_SetConfig+0x140>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007258 <TIM_Base_SetConfig+0x144>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2c      	ldr	r2, [pc, #176]	@ (800725c <TIM_Base_SetConfig+0x148>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007260 <TIM_Base_SetConfig+0x14c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007264 <TIM_Base_SetConfig+0x150>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a29      	ldr	r2, [pc, #164]	@ (8007268 <TIM_Base_SetConfig+0x154>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d108      	bne.n	80071d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a10      	ldr	r2, [pc, #64]	@ (8007240 <TIM_Base_SetConfig+0x12c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_Base_SetConfig+0xf8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a12      	ldr	r2, [pc, #72]	@ (8007250 <TIM_Base_SetConfig+0x13c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b01      	cmp	r3, #1
 8007224:	d105      	bne.n	8007232 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f023 0201 	bic.w	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	611a      	str	r2, [r3, #16]
  }
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40010400 	.word	0x40010400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800
 8007260:	40001800 	.word	0x40001800
 8007264:	40001c00 	.word	0x40001c00
 8007268:	40002000 	.word	0x40002000

0800726c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 0201 	bic.w	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 0302 	bic.w	r3, r3, #2
 80072b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a20      	ldr	r2, [pc, #128]	@ (8007344 <TIM_OC1_SetConfig+0xd8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_OC1_SetConfig+0x64>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007348 <TIM_OC1_SetConfig+0xdc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10c      	bne.n	80072ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0308 	bic.w	r3, r3, #8
 80072d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 0304 	bic.w	r3, r3, #4
 80072e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <TIM_OC1_SetConfig+0xd8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC1_SetConfig+0x8e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a14      	ldr	r2, [pc, #80]	@ (8007348 <TIM_OC1_SetConfig+0xdc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d111      	bne.n	800731e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	621a      	str	r2, [r3, #32]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40010000 	.word	0x40010000
 8007348:	40010400 	.word	0x40010400

0800734c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f023 0210 	bic.w	r2, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0320 	bic.w	r3, r3, #32
 8007396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a22      	ldr	r2, [pc, #136]	@ (8007430 <TIM_OC2_SetConfig+0xe4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC2_SetConfig+0x68>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a21      	ldr	r2, [pc, #132]	@ (8007434 <TIM_OC2_SetConfig+0xe8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d10d      	bne.n	80073d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a17      	ldr	r2, [pc, #92]	@ (8007430 <TIM_OC2_SetConfig+0xe4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC2_SetConfig+0x94>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a16      	ldr	r2, [pc, #88]	@ (8007434 <TIM_OC2_SetConfig+0xe8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d113      	bne.n	8007408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a21      	ldr	r2, [pc, #132]	@ (8007518 <TIM_OC3_SetConfig+0xe0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_OC3_SetConfig+0x66>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a20      	ldr	r2, [pc, #128]	@ (800751c <TIM_OC3_SetConfig+0xe4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10d      	bne.n	80074ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a16      	ldr	r2, [pc, #88]	@ (8007518 <TIM_OC3_SetConfig+0xe0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_OC3_SetConfig+0x92>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a15      	ldr	r2, [pc, #84]	@ (800751c <TIM_OC3_SetConfig+0xe4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d113      	bne.n	80074f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40010000 	.word	0x40010000
 800751c:	40010400 	.word	0x40010400

08007520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800756a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a12      	ldr	r2, [pc, #72]	@ (80075c4 <TIM_OC4_SetConfig+0xa4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_OC4_SetConfig+0x68>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a11      	ldr	r2, [pc, #68]	@ (80075c8 <TIM_OC4_SetConfig+0xa8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d109      	bne.n	800759c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800758e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	019b      	lsls	r3, r3, #6
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40010400 	.word	0x40010400

080075cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	2201      	movs	r2, #1
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	fa01 f303 	lsl.w	r3, r1, r3
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
	...

08007618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800762c:	2302      	movs	r3, #2
 800762e:	e05a      	b.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a21      	ldr	r2, [pc, #132]	@ (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d022      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767c:	d01d      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1d      	ldr	r2, [pc, #116]	@ (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d018      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1b      	ldr	r2, [pc, #108]	@ (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1a      	ldr	r2, [pc, #104]	@ (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a18      	ldr	r2, [pc, #96]	@ (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a17      	ldr	r2, [pc, #92]	@ (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a15      	ldr	r2, [pc, #84]	@ (800770c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d10c      	bne.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40010000 	.word	0x40010000
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40000800 	.word	0x40000800
 8007700:	40000c00 	.word	0x40000c00
 8007704:	40010400 	.word	0x40010400
 8007708:	40014000 	.word	0x40014000
 800770c:	40001800 	.word	0x40001800

08007710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007728:	2302      	movs	r3, #2
 800772a:	e03d      	b.n	80077a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e042      	b.n	800784c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fc fb30 	bl	8003e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2224      	movs	r2, #36	@ 0x24
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fdbd 	bl	8008378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800780c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695a      	ldr	r2, [r3, #20]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800781c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800782c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	@ 0x28
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	4613      	mov	r3, r2
 8007862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b20      	cmp	r3, #32
 8007872:	d175      	bne.n	8007960 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_UART_Transmit+0x2c>
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e06e      	b.n	8007962 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2221      	movs	r2, #33	@ 0x21
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007892:	f7fc fcd1 	bl	8004238 <HAL_GetTick>
 8007896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	88fa      	ldrh	r2, [r7, #6]
 800789c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ac:	d108      	bne.n	80078c0 <HAL_UART_Transmit+0x6c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	e003      	b.n	80078c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078c8:	e02e      	b.n	8007928 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2200      	movs	r2, #0
 80078d2:	2180      	movs	r1, #128	@ 0x80
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fb1f 	bl	8007f18 <UART_WaitOnFlagUntilTimeout>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e03a      	b.n	8007962 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007900:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	3302      	adds	r3, #2
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e007      	b.n	800791a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1cb      	bne.n	80078ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2200      	movs	r2, #0
 800793a:	2140      	movs	r1, #64	@ 0x40
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 faeb 	bl	8007f18 <UART_WaitOnFlagUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e006      	b.n	8007962 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	4613      	mov	r3, r2
 8007976:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b20      	cmp	r3, #32
 8007982:	d112      	bne.n	80079aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <HAL_UART_Receive_IT+0x26>
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e00b      	b.n	80079ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	461a      	mov	r2, r3
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fb12 	bl	8007fca <UART_Start_Receive_IT>
 80079a6:	4603      	mov	r3, r0
 80079a8:	e000      	b.n	80079ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80079aa:	2302      	movs	r3, #2
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b0ba      	sub	sp, #232	@ 0xe8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079da:	2300      	movs	r3, #0
 80079dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ea:	f003 030f 	and.w	r3, r3, #15
 80079ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10f      	bne.n	8007a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <HAL_UART_IRQHandler+0x66>
 8007a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fbf2 	bl	80081fc <UART_Receive_IT>
      return;
 8007a18:	e25b      	b.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80de 	beq.w	8007be0 <HAL_UART_IRQHandler+0x22c>
 8007a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d106      	bne.n	8007a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80d1 	beq.w	8007be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <HAL_UART_IRQHandler+0xae>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	f043 0201 	orr.w	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <HAL_UART_IRQHandler+0xd2>
 8007a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7e:	f043 0202 	orr.w	r2, r3, #2
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <HAL_UART_IRQHandler+0xf6>
 8007a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d011      	beq.n	8007ada <HAL_UART_IRQHandler+0x126>
 8007ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad2:	f043 0208 	orr.w	r2, r3, #8
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 81f2 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_UART_IRQHandler+0x14e>
 8007af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fb7d 	bl	80081fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0c:	2b40      	cmp	r3, #64	@ 0x40
 8007b0e:	bf0c      	ite	eq
 8007b10:	2301      	moveq	r3, #1
 8007b12:	2300      	movne	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d103      	bne.n	8007b2e <HAL_UART_IRQHandler+0x17a>
 8007b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d04f      	beq.n	8007bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa85 	bl	800803e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3e:	2b40      	cmp	r3, #64	@ 0x40
 8007b40:	d141      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3314      	adds	r3, #20
 8007b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3314      	adds	r3, #20
 8007b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1d9      	bne.n	8007b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d013      	beq.n	8007bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007d94 <HAL_UART_IRQHandler+0x3e0>)
 8007b9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fd f8f9 	bl	8004d9a <HAL_DMA_Abort_IT>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	e00e      	b.n	8007bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f994 	bl	8007eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	e00a      	b.n	8007bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f990 	bl	8007eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bcc:	e006      	b.n	8007bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f98c 	bl	8007eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007bda:	e175      	b.n	8007ec8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bdc:	bf00      	nop
    return;
 8007bde:	e173      	b.n	8007ec8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	f040 814f 	bne.w	8007e88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8148 	beq.w	8007e88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8141 	beq.w	8007e88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c06:	2300      	movs	r3, #0
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c26:	2b40      	cmp	r3, #64	@ 0x40
 8007c28:	f040 80b6 	bne.w	8007d98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8145 	beq.w	8007ecc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	f080 813e 	bcs.w	8007ecc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c62:	f000 8088 	beq.w	8007d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1d9      	bne.n	8007c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3314      	adds	r3, #20
 8007cb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3314      	adds	r3, #20
 8007cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e1      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3314      	adds	r3, #20
 8007cf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e3      	bne.n	8007cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	330c      	adds	r3, #12
 8007d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d46:	f023 0310 	bic.w	r3, r3, #16
 8007d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	330c      	adds	r3, #12
 8007d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e3      	bne.n	8007d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fc ffa2 	bl	8004cba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f8b7 	bl	8007f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d92:	e09b      	b.n	8007ecc <HAL_UART_IRQHandler+0x518>
 8007d94:	08008105 	.word	0x08008105
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 808e 	beq.w	8007ed0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8089 	beq.w	8007ed0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e3      	bne.n	8007dbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3314      	adds	r3, #20
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	623b      	str	r3, [r7, #32]
   return(result);
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e3      	bne.n	8007df6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	330c      	adds	r3, #12
 8007e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0310 	bic.w	r3, r3, #16
 8007e52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e60:	61fa      	str	r2, [r7, #28]
 8007e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	69b9      	ldr	r1, [r7, #24]
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e3      	bne.n	8007e3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f83d 	bl	8007f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e86:	e023      	b.n	8007ed0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <HAL_UART_IRQHandler+0x4f4>
 8007e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f943 	bl	800812c <UART_Transmit_IT>
    return;
 8007ea6:	e014      	b.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
 8007eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f983 	bl	80081cc <UART_EndTransmit_IT>
    return;
 8007ec6:	e004      	b.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007ec8:	bf00      	nop
 8007eca:	e002      	b.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ecc:	bf00      	nop
 8007ece:	e000      	b.n	8007ed2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ed0:	bf00      	nop
  }
}
 8007ed2:	37e8      	adds	r7, #232	@ 0xe8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4613      	mov	r3, r2
 8007f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f28:	e03b      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f30:	d037      	beq.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f32:	f7fc f981 	bl	8004238 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	6a3a      	ldr	r2, [r7, #32]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d302      	bcc.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e03a      	b.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d023      	beq.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b80      	cmp	r3, #128	@ 0x80
 8007f5e:	d020      	beq.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b40      	cmp	r3, #64	@ 0x40
 8007f64:	d01d      	beq.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d116      	bne.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f857 	bl	800803e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2208      	movs	r2, #8
 8007f94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e00f      	b.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4013      	ands	r3, r2
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	bf0c      	ite	eq
 8007fb2:	2301      	moveq	r3, #1
 8007fb4:	2300      	movne	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d0b4      	beq.n	8007f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2222      	movs	r2, #34	@ 0x22
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800800e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0220 	orr.w	r2, r2, #32
 800802e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800803e:	b480      	push	{r7}
 8008040:	b095      	sub	sp, #84	@ 0x54
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800805c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008066:	643a      	str	r2, [r7, #64]	@ 0x40
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800806c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3314      	adds	r3, #20
 8008080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	61fb      	str	r3, [r7, #28]
   return(result);
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3314      	adds	r3, #20
 8008098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800809a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800809c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e5      	bne.n	800807a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d119      	bne.n	80080ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f023 0310 	bic.w	r3, r3, #16
 80080cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	330c      	adds	r3, #12
 80080d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080d6:	61ba      	str	r2, [r7, #24]
 80080d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6979      	ldr	r1, [r7, #20]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	613b      	str	r3, [r7, #16]
   return(result);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e5      	bne.n	80080b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080f8:	bf00      	nop
 80080fa:	3754      	adds	r7, #84	@ 0x54
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fee4 	bl	8007eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b21      	cmp	r3, #33	@ 0x21
 800813e:	d13e      	bne.n	80081be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008148:	d114      	bne.n	8008174 <UART_Transmit_IT+0x48>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d110      	bne.n	8008174 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008166:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	1c9a      	adds	r2, r3, #2
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	621a      	str	r2, [r3, #32]
 8008172:	e008      	b.n	8008186 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	1c59      	adds	r1, r3, #1
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6211      	str	r1, [r2, #32]
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29b      	uxth	r3, r3
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4619      	mov	r1, r3
 8008194:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10f      	bne.n	80081ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081be:	2302      	movs	r3, #2
  }
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fe73 	bl	8007ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08c      	sub	sp, #48	@ 0x30
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b22      	cmp	r3, #34	@ 0x22
 800820e:	f040 80ae 	bne.w	800836e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821a:	d117      	bne.n	800824c <UART_Receive_IT+0x50>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d113      	bne.n	800824c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823a:	b29a      	uxth	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	1c9a      	adds	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	629a      	str	r2, [r3, #40]	@ 0x28
 800824a:	e026      	b.n	800829a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825e:	d007      	beq.n	8008270 <UART_Receive_IT+0x74>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <UART_Receive_IT+0x82>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b2da      	uxtb	r2, r3
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e008      	b.n	8008290 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4619      	mov	r1, r3
 80082a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d15d      	bne.n	800836a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0220 	bic.w	r2, r2, #32
 80082bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d135      	bne.n	8008360 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	613b      	str	r3, [r7, #16]
   return(result);
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f023 0310 	bic.w	r3, r3, #16
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330c      	adds	r3, #12
 8008318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800831a:	623a      	str	r2, [r7, #32]
 800831c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	69f9      	ldr	r1, [r7, #28]
 8008320:	6a3a      	ldr	r2, [r7, #32]
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	61bb      	str	r3, [r7, #24]
   return(result);
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b10      	cmp	r3, #16
 800833a:	d10a      	bne.n	8008352 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff fdd1 	bl	8007f00 <HAL_UARTEx_RxEventCallback>
 800835e:	e002      	b.n	8008366 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7f9 fb8d 	bl	8001a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e002      	b.n	8008370 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e000      	b.n	8008370 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800836e:	2302      	movs	r3, #2
  }
}
 8008370:	4618      	mov	r0, r3
 8008372:	3730      	adds	r7, #48	@ 0x30
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800837c:	b0c0      	sub	sp, #256	@ 0x100
 800837e:	af00      	add	r7, sp, #0
 8008380:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008394:	68d9      	ldr	r1, [r3, #12]
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	ea40 0301 	orr.w	r3, r0, r1
 80083a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80083d0:	f021 010c 	bic.w	r1, r1, #12
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083de:	430b      	orrs	r3, r1
 80083e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f2:	6999      	ldr	r1, [r3, #24]
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	ea40 0301 	orr.w	r3, r0, r1
 80083fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b8f      	ldr	r3, [pc, #572]	@ (8008644 <UART_SetConfig+0x2cc>)
 8008408:	429a      	cmp	r2, r3
 800840a:	d005      	beq.n	8008418 <UART_SetConfig+0xa0>
 800840c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b8d      	ldr	r3, [pc, #564]	@ (8008648 <UART_SetConfig+0x2d0>)
 8008414:	429a      	cmp	r2, r3
 8008416:	d104      	bne.n	8008422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008418:	f7fe fb5a 	bl	8006ad0 <HAL_RCC_GetPCLK2Freq>
 800841c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008420:	e003      	b.n	800842a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008422:	f7fe fb41 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 8008426:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008434:	f040 810c 	bne.w	8008650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800843c:	2200      	movs	r2, #0
 800843e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008442:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800844a:	4622      	mov	r2, r4
 800844c:	462b      	mov	r3, r5
 800844e:	1891      	adds	r1, r2, r2
 8008450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008452:	415b      	adcs	r3, r3
 8008454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800845a:	4621      	mov	r1, r4
 800845c:	eb12 0801 	adds.w	r8, r2, r1
 8008460:	4629      	mov	r1, r5
 8008462:	eb43 0901 	adc.w	r9, r3, r1
 8008466:	f04f 0200 	mov.w	r2, #0
 800846a:	f04f 0300 	mov.w	r3, #0
 800846e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800847a:	4690      	mov	r8, r2
 800847c:	4699      	mov	r9, r3
 800847e:	4623      	mov	r3, r4
 8008480:	eb18 0303 	adds.w	r3, r8, r3
 8008484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008488:	462b      	mov	r3, r5
 800848a:	eb49 0303 	adc.w	r3, r9, r3
 800848e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800849e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80084a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084a6:	460b      	mov	r3, r1
 80084a8:	18db      	adds	r3, r3, r3
 80084aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ac:	4613      	mov	r3, r2
 80084ae:	eb42 0303 	adc.w	r3, r2, r3
 80084b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80084b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80084bc:	f7f8 fb94 	bl	8000be8 <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4b61      	ldr	r3, [pc, #388]	@ (800864c <UART_SetConfig+0x2d4>)
 80084c6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	011c      	lsls	r4, r3, #4
 80084ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80084dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	1891      	adds	r1, r2, r2
 80084e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80084e8:	415b      	adcs	r3, r3
 80084ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084f0:	4641      	mov	r1, r8
 80084f2:	eb12 0a01 	adds.w	sl, r2, r1
 80084f6:	4649      	mov	r1, r9
 80084f8:	eb43 0b01 	adc.w	fp, r3, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800850c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008510:	4692      	mov	sl, r2
 8008512:	469b      	mov	fp, r3
 8008514:	4643      	mov	r3, r8
 8008516:	eb1a 0303 	adds.w	r3, sl, r3
 800851a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800851e:	464b      	mov	r3, r9
 8008520:	eb4b 0303 	adc.w	r3, fp, r3
 8008524:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008534:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800853c:	460b      	mov	r3, r1
 800853e:	18db      	adds	r3, r3, r3
 8008540:	643b      	str	r3, [r7, #64]	@ 0x40
 8008542:	4613      	mov	r3, r2
 8008544:	eb42 0303 	adc.w	r3, r2, r3
 8008548:	647b      	str	r3, [r7, #68]	@ 0x44
 800854a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800854e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008552:	f7f8 fb49 	bl	8000be8 <__aeabi_uldivmod>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4611      	mov	r1, r2
 800855c:	4b3b      	ldr	r3, [pc, #236]	@ (800864c <UART_SetConfig+0x2d4>)
 800855e:	fba3 2301 	umull	r2, r3, r3, r1
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	2264      	movs	r2, #100	@ 0x64
 8008566:	fb02 f303 	mul.w	r3, r2, r3
 800856a:	1acb      	subs	r3, r1, r3
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008572:	4b36      	ldr	r3, [pc, #216]	@ (800864c <UART_SetConfig+0x2d4>)
 8008574:	fba3 2302 	umull	r2, r3, r3, r2
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008580:	441c      	add	r4, r3
 8008582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800858c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008594:	4642      	mov	r2, r8
 8008596:	464b      	mov	r3, r9
 8008598:	1891      	adds	r1, r2, r2
 800859a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800859c:	415b      	adcs	r3, r3
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80085a4:	4641      	mov	r1, r8
 80085a6:	1851      	adds	r1, r2, r1
 80085a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80085aa:	4649      	mov	r1, r9
 80085ac:	414b      	adcs	r3, r1
 80085ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80085bc:	4659      	mov	r1, fp
 80085be:	00cb      	lsls	r3, r1, #3
 80085c0:	4651      	mov	r1, sl
 80085c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085c6:	4651      	mov	r1, sl
 80085c8:	00ca      	lsls	r2, r1, #3
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	4642      	mov	r2, r8
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085d8:	464b      	mov	r3, r9
 80085da:	460a      	mov	r2, r1
 80085dc:	eb42 0303 	adc.w	r3, r2, r3
 80085e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80085f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085f8:	460b      	mov	r3, r1
 80085fa:	18db      	adds	r3, r3, r3
 80085fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085fe:	4613      	mov	r3, r2
 8008600:	eb42 0303 	adc.w	r3, r2, r3
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800860a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800860e:	f7f8 faeb 	bl	8000be8 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <UART_SetConfig+0x2d4>)
 8008618:	fba3 1302 	umull	r1, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	2164      	movs	r1, #100	@ 0x64
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	3332      	adds	r3, #50	@ 0x32
 800862a:	4a08      	ldr	r2, [pc, #32]	@ (800864c <UART_SetConfig+0x2d4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f003 0207 	and.w	r2, r3, #7
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4422      	add	r2, r4
 800863e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008640:	e106      	b.n	8008850 <UART_SetConfig+0x4d8>
 8008642:	bf00      	nop
 8008644:	40011000 	.word	0x40011000
 8008648:	40011400 	.word	0x40011400
 800864c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008654:	2200      	movs	r2, #0
 8008656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800865a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800865e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008662:	4642      	mov	r2, r8
 8008664:	464b      	mov	r3, r9
 8008666:	1891      	adds	r1, r2, r2
 8008668:	6239      	str	r1, [r7, #32]
 800866a:	415b      	adcs	r3, r3
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
 800866e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008672:	4641      	mov	r1, r8
 8008674:	1854      	adds	r4, r2, r1
 8008676:	4649      	mov	r1, r9
 8008678:	eb43 0501 	adc.w	r5, r3, r1
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	00eb      	lsls	r3, r5, #3
 8008686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800868a:	00e2      	lsls	r2, r4, #3
 800868c:	4614      	mov	r4, r2
 800868e:	461d      	mov	r5, r3
 8008690:	4643      	mov	r3, r8
 8008692:	18e3      	adds	r3, r4, r3
 8008694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008698:	464b      	mov	r3, r9
 800869a:	eb45 0303 	adc.w	r3, r5, r3
 800869e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80086be:	4629      	mov	r1, r5
 80086c0:	008b      	lsls	r3, r1, #2
 80086c2:	4621      	mov	r1, r4
 80086c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c8:	4621      	mov	r1, r4
 80086ca:	008a      	lsls	r2, r1, #2
 80086cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80086d0:	f7f8 fa8a 	bl	8000be8 <__aeabi_uldivmod>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4b60      	ldr	r3, [pc, #384]	@ (800885c <UART_SetConfig+0x4e4>)
 80086da:	fba3 2302 	umull	r2, r3, r3, r2
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	011c      	lsls	r4, r3, #4
 80086e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	1891      	adds	r1, r2, r2
 80086fa:	61b9      	str	r1, [r7, #24]
 80086fc:	415b      	adcs	r3, r3
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008704:	4641      	mov	r1, r8
 8008706:	1851      	adds	r1, r2, r1
 8008708:	6139      	str	r1, [r7, #16]
 800870a:	4649      	mov	r1, r9
 800870c:	414b      	adcs	r3, r1
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800871c:	4659      	mov	r1, fp
 800871e:	00cb      	lsls	r3, r1, #3
 8008720:	4651      	mov	r1, sl
 8008722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008726:	4651      	mov	r1, sl
 8008728:	00ca      	lsls	r2, r1, #3
 800872a:	4610      	mov	r0, r2
 800872c:	4619      	mov	r1, r3
 800872e:	4603      	mov	r3, r0
 8008730:	4642      	mov	r2, r8
 8008732:	189b      	adds	r3, r3, r2
 8008734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008738:	464b      	mov	r3, r9
 800873a:	460a      	mov	r2, r1
 800873c:	eb42 0303 	adc.w	r3, r2, r3
 8008740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800874e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800875c:	4649      	mov	r1, r9
 800875e:	008b      	lsls	r3, r1, #2
 8008760:	4641      	mov	r1, r8
 8008762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008766:	4641      	mov	r1, r8
 8008768:	008a      	lsls	r2, r1, #2
 800876a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800876e:	f7f8 fa3b 	bl	8000be8 <__aeabi_uldivmod>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4611      	mov	r1, r2
 8008778:	4b38      	ldr	r3, [pc, #224]	@ (800885c <UART_SetConfig+0x4e4>)
 800877a:	fba3 2301 	umull	r2, r3, r3, r1
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	2264      	movs	r2, #100	@ 0x64
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	1acb      	subs	r3, r1, r3
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	3332      	adds	r3, #50	@ 0x32
 800878c:	4a33      	ldr	r2, [pc, #204]	@ (800885c <UART_SetConfig+0x4e4>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008798:	441c      	add	r4, r3
 800879a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800879e:	2200      	movs	r2, #0
 80087a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80087a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80087a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	1891      	adds	r1, r2, r2
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	415b      	adcs	r3, r3
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087b8:	4641      	mov	r1, r8
 80087ba:	1851      	adds	r1, r2, r1
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	4649      	mov	r1, r9
 80087c0:	414b      	adcs	r3, r1
 80087c2:	607b      	str	r3, [r7, #4]
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087d0:	4659      	mov	r1, fp
 80087d2:	00cb      	lsls	r3, r1, #3
 80087d4:	4651      	mov	r1, sl
 80087d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087da:	4651      	mov	r1, sl
 80087dc:	00ca      	lsls	r2, r1, #3
 80087de:	4610      	mov	r0, r2
 80087e0:	4619      	mov	r1, r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	4642      	mov	r2, r8
 80087e6:	189b      	adds	r3, r3, r2
 80087e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087ea:	464b      	mov	r3, r9
 80087ec:	460a      	mov	r2, r1
 80087ee:	eb42 0303 	adc.w	r3, r2, r3
 80087f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80087fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800880c:	4649      	mov	r1, r9
 800880e:	008b      	lsls	r3, r1, #2
 8008810:	4641      	mov	r1, r8
 8008812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008816:	4641      	mov	r1, r8
 8008818:	008a      	lsls	r2, r1, #2
 800881a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800881e:	f7f8 f9e3 	bl	8000be8 <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4b0d      	ldr	r3, [pc, #52]	@ (800885c <UART_SetConfig+0x4e4>)
 8008828:	fba3 1302 	umull	r1, r3, r3, r2
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	2164      	movs	r1, #100	@ 0x64
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	3332      	adds	r3, #50	@ 0x32
 800883a:	4a08      	ldr	r2, [pc, #32]	@ (800885c <UART_SetConfig+0x4e4>)
 800883c:	fba2 2303 	umull	r2, r3, r2, r3
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f003 020f 	and.w	r2, r3, #15
 8008846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4422      	add	r2, r4
 800884e:	609a      	str	r2, [r3, #8]
}
 8008850:	bf00      	nop
 8008852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008856:	46bd      	mov	sp, r7
 8008858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800885c:	51eb851f 	.word	0x51eb851f

08008860 <__NVIC_SetPriority>:
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800886c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008870:	2b00      	cmp	r3, #0
 8008872:	db0a      	blt.n	800888a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	490c      	ldr	r1, [pc, #48]	@ (80088ac <__NVIC_SetPriority+0x4c>)
 800887a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887e:	0112      	lsls	r2, r2, #4
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	440b      	add	r3, r1
 8008884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008888:	e00a      	b.n	80088a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4908      	ldr	r1, [pc, #32]	@ (80088b0 <__NVIC_SetPriority+0x50>)
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	3b04      	subs	r3, #4
 8008898:	0112      	lsls	r2, r2, #4
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	440b      	add	r3, r1
 800889e:	761a      	strb	r2, [r3, #24]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	e000e100 	.word	0xe000e100
 80088b0:	e000ed00 	.word	0xe000ed00

080088b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80088b8:	2100      	movs	r1, #0
 80088ba:	f06f 0004 	mvn.w	r0, #4
 80088be:	f7ff ffcf 	bl	8008860 <__NVIC_SetPriority>
#endif
}
 80088c2:	bf00      	nop
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	603b      	str	r3, [r7, #0]
  return(result);
 80088d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088da:	f06f 0305 	mvn.w	r3, #5
 80088de:	607b      	str	r3, [r7, #4]
 80088e0:	e00c      	b.n	80088fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088e2:	4b0a      	ldr	r3, [pc, #40]	@ (800890c <osKernelInitialize+0x44>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d105      	bne.n	80088f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088ea:	4b08      	ldr	r3, [pc, #32]	@ (800890c <osKernelInitialize+0x44>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	e002      	b.n	80088fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088fc:	687b      	ldr	r3, [r7, #4]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	200009a0 	.word	0x200009a0

08008910 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008916:	f3ef 8305 	mrs	r3, IPSR
 800891a:	603b      	str	r3, [r7, #0]
  return(result);
 800891c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008922:	f06f 0305 	mvn.w	r3, #5
 8008926:	607b      	str	r3, [r7, #4]
 8008928:	e010      	b.n	800894c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800892a:	4b0b      	ldr	r3, [pc, #44]	@ (8008958 <osKernelStart+0x48>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d109      	bne.n	8008946 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008932:	f7ff ffbf 	bl	80088b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008936:	4b08      	ldr	r3, [pc, #32]	@ (8008958 <osKernelStart+0x48>)
 8008938:	2202      	movs	r2, #2
 800893a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800893c:	f001 fba4 	bl	800a088 <vTaskStartScheduler>
      stat = osOK;
 8008940:	2300      	movs	r3, #0
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	e002      	b.n	800894c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800894a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800894c:	687b      	ldr	r3, [r7, #4]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200009a0 	.word	0x200009a0

0800895c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b08e      	sub	sp, #56	@ 0x38
 8008960:	af04      	add	r7, sp, #16
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800896c:	f3ef 8305 	mrs	r3, IPSR
 8008970:	617b      	str	r3, [r7, #20]
  return(result);
 8008972:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008974:	2b00      	cmp	r3, #0
 8008976:	d17e      	bne.n	8008a76 <osThreadNew+0x11a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d07b      	beq.n	8008a76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800897e:	2380      	movs	r3, #128	@ 0x80
 8008980:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008982:	2318      	movs	r3, #24
 8008984:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800898a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800898e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d045      	beq.n	8008a22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <osThreadNew+0x48>
        name = attr->name;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <osThreadNew+0x6e>
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	2b38      	cmp	r3, #56	@ 0x38
 80089bc:	d805      	bhi.n	80089ca <osThreadNew+0x6e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <osThreadNew+0x72>
        return (NULL);
 80089ca:	2300      	movs	r3, #0
 80089cc:	e054      	b.n	8008a78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	089b      	lsrs	r3, r3, #2
 80089dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00e      	beq.n	8008a04 <osThreadNew+0xa8>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80089ec:	d90a      	bls.n	8008a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d006      	beq.n	8008a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <osThreadNew+0xa8>
        mem = 1;
 80089fe:	2301      	movs	r3, #1
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	e010      	b.n	8008a26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10c      	bne.n	8008a26 <osThreadNew+0xca>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d108      	bne.n	8008a26 <osThreadNew+0xca>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <osThreadNew+0xca>
          mem = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	e001      	b.n	8008a26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d110      	bne.n	8008a4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a34:	9202      	str	r2, [sp, #8]
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f001 f944 	bl	8009cd0 <xTaskCreateStatic>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	e013      	b.n	8008a76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d110      	bne.n	8008a76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	f107 0310 	add.w	r3, r7, #16
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f001 f992 	bl	8009d90 <xTaskCreate>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d001      	beq.n	8008a76 <osThreadNew+0x11a>
            hTask = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a76:	693b      	ldr	r3, [r7, #16]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3728      	adds	r7, #40	@ 0x28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a88:	f3ef 8305 	mrs	r3, IPSR
 8008a8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <osDelay+0x1c>
    stat = osErrorISR;
 8008a94:	f06f 0305 	mvn.w	r3, #5
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	e007      	b.n	8008aac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <osDelay+0x2c>
      vTaskDelay(ticks);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fab8 	bl	800a01c <vTaskDelay>
    }
  }

  return (stat);
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b088      	sub	sp, #32
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac2:	f3ef 8305 	mrs	r3, IPSR
 8008ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ac8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d174      	bne.n	8008bb8 <osMutexNew+0x102>
    if (attr != NULL) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <osMutexNew+0x26>
      type = attr->attr_bits;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	e001      	b.n	8008ae0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <osMutexNew+0x3a>
      rmtx = 1U;
 8008aea:	2301      	movs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e001      	b.n	8008af4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d15c      	bne.n	8008bb8 <osMutexNew+0x102>
      mem = -1;
 8008afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b02:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d015      	beq.n	8008b36 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d006      	beq.n	8008b20 <osMutexNew+0x6a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b4f      	cmp	r3, #79	@ 0x4f
 8008b18:	d902      	bls.n	8008b20 <osMutexNew+0x6a>
          mem = 1;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	613b      	str	r3, [r7, #16]
 8008b1e:	e00c      	b.n	8008b3a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d108      	bne.n	8008b3a <osMutexNew+0x84>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d104      	bne.n	8008b3a <osMutexNew+0x84>
            mem = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	e001      	b.n	8008b3a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d112      	bne.n	8008b66 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	2004      	movs	r0, #4
 8008b4e:	f000 fb20 	bl	8009192 <xQueueCreateMutexStatic>
 8008b52:	61f8      	str	r0, [r7, #28]
 8008b54:	e016      	b.n	8008b84 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	f000 fb18 	bl	8009192 <xQueueCreateMutexStatic>
 8008b62:	61f8      	str	r0, [r7, #28]
 8008b64:	e00e      	b.n	8008b84 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008b72:	2004      	movs	r0, #4
 8008b74:	f000 faf5 	bl	8009162 <xQueueCreateMutex>
 8008b78:	61f8      	str	r0, [r7, #28]
 8008b7a:	e003      	b.n	8008b84 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f000 faf0 	bl	8009162 <xQueueCreateMutex>
 8008b82:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00c      	beq.n	8008ba4 <osMutexNew+0xee>
        if (attr != NULL) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <osMutexNew+0xe2>
          name = attr->name;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e001      	b.n	8008b9c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	69f8      	ldr	r0, [r7, #28]
 8008ba0:	f001 f838 	bl	8009c14 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <osMutexNew+0x102>
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f043 0301 	orr.w	r3, r3, #1
 8008bb6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008bb8:	69fb      	ldr	r3, [r7, #28]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008be0:	f3ef 8305 	mrs	r3, IPSR
 8008be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008be6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008bec:	f06f 0305 	mvn.w	r3, #5
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e02c      	b.n	8008c4e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008bfa:	f06f 0303 	mvn.w	r3, #3
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	e025      	b.n	8008c4e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d011      	beq.n	8008c2c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6938      	ldr	r0, [r7, #16]
 8008c0c:	f000 fb11 	bl	8009232 <xQueueTakeMutexRecursive>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d01b      	beq.n	8008c4e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008c1c:	f06f 0301 	mvn.w	r3, #1
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e014      	b.n	8008c4e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c24:	f06f 0302 	mvn.w	r3, #2
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	e010      	b.n	8008c4e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6938      	ldr	r0, [r7, #16]
 8008c30:	f000 fdb8 	bl	80097a4 <xQueueSemaphoreTake>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d009      	beq.n	8008c4e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008c40:	f06f 0301 	mvn.w	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	e002      	b.n	8008c4e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c48:	f06f 0302 	mvn.w	r3, #2
 8008c4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008c4e:	697b      	ldr	r3, [r7, #20]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f023 0301 	bic.w	r3, r3, #1
 8008c66:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c74:	f3ef 8305 	mrs	r3, IPSR
 8008c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c7a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008c80:	f06f 0305 	mvn.w	r3, #5
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	e01f      	b.n	8008cc8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008c8e:	f06f 0303 	mvn.w	r3, #3
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e018      	b.n	8008cc8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c9c:	6938      	ldr	r0, [r7, #16]
 8008c9e:	f000 fa93 	bl	80091c8 <xQueueGiveMutexRecursive>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d00f      	beq.n	8008cc8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008ca8:	f06f 0302 	mvn.w	r3, #2
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	e00b      	b.n	8008cc8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f000 faf2 	bl	80092a0 <xQueueGenericSend>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d002      	beq.n	8008cc8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008cc2:	f06f 0302 	mvn.w	r3, #2
 8008cc6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008cc8:	697b      	ldr	r3, [r7, #20]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a07      	ldr	r2, [pc, #28]	@ (8008d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	4a06      	ldr	r2, [pc, #24]	@ (8008d04 <vApplicationGetIdleTaskMemory+0x30>)
 8008cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2280      	movs	r2, #128	@ 0x80
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	200009a4 	.word	0x200009a4
 8008d04:	20000a00 	.word	0x20000a00

08008d08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a07      	ldr	r2, [pc, #28]	@ (8008d34 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	4a06      	ldr	r2, [pc, #24]	@ (8008d38 <vApplicationGetTimerTaskMemory+0x30>)
 8008d1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d26:	601a      	str	r2, [r3, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	20000c00 	.word	0x20000c00
 8008d38:	20000c5c 	.word	0x20000c5c

08008d3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f103 0208 	add.w	r2, r3, #8
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f103 0208 	add.w	r2, r3, #8
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f103 0208 	add.w	r2, r3, #8
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008df4:	d103      	bne.n	8008dfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	e00c      	b.n	8008e18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3308      	adds	r3, #8
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e002      	b.n	8008e0c <vListInsert+0x2e>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d2f6      	bcs.n	8008e06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	601a      	str	r2, [r3, #0]
}
 8008e44:	bf00      	nop
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6892      	ldr	r2, [r2, #8]
 8008e66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6852      	ldr	r2, [r2, #4]
 8008e70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d103      	bne.n	8008e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ed0:	f002 fba2 	bl	800b618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008edc:	68f9      	ldr	r1, [r7, #12]
 8008ede:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	441a      	add	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f00:	3b01      	subs	r3, #1
 8008f02:	68f9      	ldr	r1, [r7, #12]
 8008f04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	22ff      	movs	r2, #255	@ 0xff
 8008f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	22ff      	movs	r2, #255	@ 0xff
 8008f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d114      	bne.n	8008f50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01a      	beq.n	8008f64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3310      	adds	r3, #16
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fb36 	bl	800a5a4 <xTaskRemoveFromEventList>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d012      	beq.n	8008f64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <xQueueGenericReset+0xd0>)
 8008f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	e009      	b.n	8008f64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3310      	adds	r3, #16
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff fef1 	bl	8008d3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3324      	adds	r3, #36	@ 0x24
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff feec 	bl	8008d3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f64:	f002 fb8a 	bl	800b67c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f68:	2301      	movs	r3, #1
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08e      	sub	sp, #56	@ 0x38
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10b      	bne.n	8008fa4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	e7fd      	b.n	8008fa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <xQueueGenericCreateStatic+0x56>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <xQueueGenericCreateStatic+0x5a>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e000      	b.n	8008fd4 <xQueueGenericCreateStatic+0x5c>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	623b      	str	r3, [r7, #32]
}
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
 8008fee:	e7fd      	b.n	8008fec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <xQueueGenericCreateStatic+0x84>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <xQueueGenericCreateStatic+0x88>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e000      	b.n	8009002 <xQueueGenericCreateStatic+0x8a>
 8009000:	2300      	movs	r3, #0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	61fb      	str	r3, [r7, #28]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800901e:	2350      	movs	r3, #80	@ 0x50
 8009020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b50      	cmp	r3, #80	@ 0x50
 8009026:	d00b      	beq.n	8009040 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	61bb      	str	r3, [r7, #24]
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	e7fd      	b.n	800903c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009040:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00d      	beq.n	8009068 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009054:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	4613      	mov	r3, r2
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 f840 	bl	80090e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800906a:	4618      	mov	r0, r3
 800906c:	3730      	adds	r7, #48	@ 0x30
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009072:	b580      	push	{r7, lr}
 8009074:	b08a      	sub	sp, #40	@ 0x28
 8009076:	af02      	add	r7, sp, #8
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	4613      	mov	r3, r2
 800907e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	613b      	str	r3, [r7, #16]
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	e7fd      	b.n	800909a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
 80090a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	3350      	adds	r3, #80	@ 0x50
 80090ac:	4618      	mov	r0, r3
 80090ae:	f002 fbd5 	bl	800b85c <pvPortMalloc>
 80090b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d011      	beq.n	80090de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	3350      	adds	r3, #80	@ 0x50
 80090c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090cc:	79fa      	ldrb	r2, [r7, #7]
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f805 	bl	80090e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090de:	69bb      	ldr	r3, [r7, #24]
	}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e002      	b.n	800910a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009116:	2101      	movs	r1, #1
 8009118:	69b8      	ldr	r0, [r7, #24]
 800911a:	f7ff fec3 	bl	8008ea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00e      	beq.n	800915a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800914e:	2300      	movs	r3, #0
 8009150:	2200      	movs	r2, #0
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f8a3 	bl	80092a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009162:	b580      	push	{r7, lr}
 8009164:	b086      	sub	sp, #24
 8009166:	af00      	add	r7, sp, #0
 8009168:	4603      	mov	r3, r0
 800916a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800916c:	2301      	movs	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	2300      	movs	r3, #0
 8009172:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	461a      	mov	r2, r3
 8009178:	6939      	ldr	r1, [r7, #16]
 800917a:	6978      	ldr	r0, [r7, #20]
 800917c:	f7ff ff79 	bl	8009072 <xQueueGenericCreate>
 8009180:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff ffd3 	bl	800912e <prvInitialiseMutex>

		return xNewQueue;
 8009188:	68fb      	ldr	r3, [r7, #12]
	}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af02      	add	r7, sp, #8
 8009198:	4603      	mov	r3, r0
 800919a:	6039      	str	r1, [r7, #0]
 800919c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800919e:	2301      	movs	r3, #1
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	2300      	movs	r3, #0
 80091a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	6939      	ldr	r1, [r7, #16]
 80091b0:	6978      	ldr	r0, [r7, #20]
 80091b2:	f7ff fee1 	bl	8008f78 <xQueueGenericCreateStatic>
 80091b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff ffb8 	bl	800912e <prvInitialiseMutex>

		return xNewQueue;
 80091be:	68fb      	ldr	r3, [r7, #12]
	}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80091c8:	b590      	push	{r4, r7, lr}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	60fb      	str	r3, [r7, #12]
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	e7fd      	b.n	80091ee <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	689c      	ldr	r4, [r3, #8]
 80091f6:	f001 fb95 	bl	800a924 <xTaskGetCurrentTaskHandle>
 80091fa:	4603      	mov	r3, r0
 80091fc:	429c      	cmp	r4, r3
 80091fe:	d111      	bne.n	8009224 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	1e5a      	subs	r2, r3, #1
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d105      	bne.n	800921e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009212:	2300      	movs	r3, #0
 8009214:	2200      	movs	r2, #0
 8009216:	2100      	movs	r1, #0
 8009218:	6938      	ldr	r0, [r7, #16]
 800921a:	f000 f841 	bl	80092a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800921e:	2301      	movs	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e001      	b.n	8009228 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009228:	697b      	ldr	r3, [r7, #20]
	}
 800922a:	4618      	mov	r0, r3
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd90      	pop	{r4, r7, pc}

08009232 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009232:	b590      	push	{r4, r7, lr}
 8009234:	b087      	sub	sp, #28
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	689c      	ldr	r4, [r3, #8]
 8009262:	f001 fb5f 	bl	800a924 <xTaskGetCurrentTaskHandle>
 8009266:	4603      	mov	r3, r0
 8009268:	429c      	cmp	r4, r3
 800926a:	d107      	bne.n	800927c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009276:	2301      	movs	r3, #1
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	e00c      	b.n	8009296 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6938      	ldr	r0, [r7, #16]
 8009280:	f000 fa90 	bl	80097a4 <xQueueSemaphoreTake>
 8009284:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009296:	697b      	ldr	r3, [r7, #20]
	}
 8009298:	4618      	mov	r0, r3
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	@ 0x38
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <xQueueGenericSend+0x34>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <xQueueGenericSend+0x42>
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <xQueueGenericSend+0x46>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <xQueueGenericSend+0x48>
 80092e6:	2300      	movs	r3, #0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10b      	bne.n	8009304 <xQueueGenericSend+0x64>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <xQueueGenericSend+0x72>
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <xQueueGenericSend+0x76>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <xQueueGenericSend+0x78>
 8009316:	2300      	movs	r3, #0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <xQueueGenericSend+0x94>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	623b      	str	r3, [r7, #32]
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	e7fd      	b.n	8009330 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009334:	f001 fb06 	bl	800a944 <xTaskGetSchedulerState>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <xQueueGenericSend+0xa4>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <xQueueGenericSend+0xa8>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <xQueueGenericSend+0xaa>
 8009348:	2300      	movs	r3, #0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10b      	bne.n	8009366 <xQueueGenericSend+0xc6>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	61fb      	str	r3, [r7, #28]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009366:	f002 f957 	bl	800b618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009372:	429a      	cmp	r2, r3
 8009374:	d302      	bcc.n	800937c <xQueueGenericSend+0xdc>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d129      	bne.n	80093d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009382:	f000 fb37 	bl	80099f4 <prvCopyDataToQueue>
 8009386:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	2b00      	cmp	r3, #0
 800938e:	d010      	beq.n	80093b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	3324      	adds	r3, #36	@ 0x24
 8009394:	4618      	mov	r0, r3
 8009396:	f001 f905 	bl	800a5a4 <xTaskRemoveFromEventList>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d013      	beq.n	80093c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093a0:	4b3f      	ldr	r3, [pc, #252]	@ (80094a0 <xQueueGenericSend+0x200>)
 80093a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	e00a      	b.n	80093c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093b8:	4b39      	ldr	r3, [pc, #228]	@ (80094a0 <xQueueGenericSend+0x200>)
 80093ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093c8:	f002 f958 	bl	800b67c <vPortExitCritical>
				return pdPASS;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e063      	b.n	8009498 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093d6:	f002 f951 	bl	800b67c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	e05c      	b.n	8009498 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f93f 	bl	800a66c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093ee:	2301      	movs	r3, #1
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093f2:	f002 f943 	bl	800b67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093f6:	f000 feaf 	bl	800a158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093fa:	f002 f90d 	bl	800b618 <vPortEnterCritical>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009404:	b25b      	sxtb	r3, r3
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800940a:	d103      	bne.n	8009414 <xQueueGenericSend+0x174>
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800941a:	b25b      	sxtb	r3, r3
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009420:	d103      	bne.n	800942a <xQueueGenericSend+0x18a>
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800942a:	f002 f927 	bl	800b67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800942e:	1d3a      	adds	r2, r7, #4
 8009430:	f107 0314 	add.w	r3, r7, #20
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f001 f92e 	bl	800a698 <xTaskCheckForTimeOut>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d124      	bne.n	800948c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009444:	f000 fbce 	bl	8009be4 <prvIsQueueFull>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d018      	beq.n	8009480 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	3310      	adds	r3, #16
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f001 f852 	bl	800a500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800945c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800945e:	f000 fb59 	bl	8009b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009462:	f000 fe87 	bl	800a174 <xTaskResumeAll>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	f47f af7c 	bne.w	8009366 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800946e:	4b0c      	ldr	r3, [pc, #48]	@ (80094a0 <xQueueGenericSend+0x200>)
 8009470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	e772      	b.n	8009366 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009482:	f000 fb47 	bl	8009b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009486:	f000 fe75 	bl	800a174 <xTaskResumeAll>
 800948a:	e76c      	b.n	8009366 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800948c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800948e:	f000 fb41 	bl	8009b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009492:	f000 fe6f 	bl	800a174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009498:	4618      	mov	r0, r3
 800949a:	3738      	adds	r7, #56	@ 0x38
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b090      	sub	sp, #64	@ 0x40
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80094b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10b      	bne.n	80094d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d103      	bne.n	80094e2 <xQueueGenericSendFromISR+0x3e>
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <xQueueGenericSendFromISR+0x42>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueGenericSendFromISR+0x44>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	e7fd      	b.n	8009500 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d103      	bne.n	8009512 <xQueueGenericSendFromISR+0x6e>
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <xQueueGenericSendFromISR+0x72>
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <xQueueGenericSendFromISR+0x74>
 8009516:	2300      	movs	r3, #0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10b      	bne.n	8009534 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	623b      	str	r3, [r7, #32]
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009534:	f002 f950 	bl	800b7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009538:	f3ef 8211 	mrs	r2, BASEPRI
 800953c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	61fa      	str	r2, [r7, #28]
 800954e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009550:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955c:	429a      	cmp	r2, r3
 800955e:	d302      	bcc.n	8009566 <xQueueGenericSendFromISR+0xc2>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d12f      	bne.n	80095c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800956c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009574:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800957c:	f000 fa3a 	bl	80099f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009580:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009588:	d112      	bne.n	80095b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d016      	beq.n	80095c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	3324      	adds	r3, #36	@ 0x24
 8009596:	4618      	mov	r0, r3
 8009598:	f001 f804 	bl	800a5a4 <xTaskRemoveFromEventList>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e007      	b.n	80095c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80095b4:	3301      	adds	r3, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	b25a      	sxtb	r2, r3
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80095c0:	2301      	movs	r3, #1
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80095c4:	e001      	b.n	80095ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3740      	adds	r7, #64	@ 0x40
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08c      	sub	sp, #48	@ 0x30
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10b      	bne.n	8009612 <xQueueReceive+0x32>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	623b      	str	r3, [r7, #32]
}
 800960c:	bf00      	nop
 800960e:	bf00      	nop
 8009610:	e7fd      	b.n	800960e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <xQueueReceive+0x40>
 8009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <xQueueReceive+0x44>
 8009620:	2301      	movs	r3, #1
 8009622:	e000      	b.n	8009626 <xQueueReceive+0x46>
 8009624:	2300      	movs	r3, #0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <xQueueReceive+0x62>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	61fb      	str	r3, [r7, #28]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009642:	f001 f97f 	bl	800a944 <xTaskGetSchedulerState>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <xQueueReceive+0x72>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <xQueueReceive+0x76>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <xQueueReceive+0x78>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <xQueueReceive+0x94>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61bb      	str	r3, [r7, #24]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009674:	f001 ffd0 	bl	800b618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01f      	beq.n	80096c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009688:	f000 fa1e 	bl	8009ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	1e5a      	subs	r2, r3, #1
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00f      	beq.n	80096bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	3310      	adds	r3, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 ff7f 	bl	800a5a4 <xTaskRemoveFromEventList>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096ac:	4b3c      	ldr	r3, [pc, #240]	@ (80097a0 <xQueueReceive+0x1c0>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096bc:	f001 ffde 	bl	800b67c <vPortExitCritical>
				return pdPASS;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e069      	b.n	8009798 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096ca:	f001 ffd7 	bl	800b67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e062      	b.n	8009798 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 ffc5 	bl	800a66c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096e2:	2301      	movs	r3, #1
 80096e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096e6:	f001 ffc9 	bl	800b67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ea:	f000 fd35 	bl	800a158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ee:	f001 ff93 	bl	800b618 <vPortEnterCritical>
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096f8:	b25b      	sxtb	r3, r3
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096fe:	d103      	bne.n	8009708 <xQueueReceive+0x128>
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800970e:	b25b      	sxtb	r3, r3
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009714:	d103      	bne.n	800971e <xQueueReceive+0x13e>
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800971e:	f001 ffad 	bl	800b67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	f107 0310 	add.w	r3, r7, #16
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f000 ffb4 	bl	800a698 <xTaskCheckForTimeOut>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d123      	bne.n	800977e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009738:	f000 fa3e 	bl	8009bb8 <prvIsQueueEmpty>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d017      	beq.n	8009772 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009744:	3324      	adds	r3, #36	@ 0x24
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fed8 	bl	800a500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009752:	f000 f9df 	bl	8009b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009756:	f000 fd0d 	bl	800a174 <xTaskResumeAll>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d189      	bne.n	8009674 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009760:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <xQueueReceive+0x1c0>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	e780      	b.n	8009674 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009774:	f000 f9ce 	bl	8009b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009778:	f000 fcfc 	bl	800a174 <xTaskResumeAll>
 800977c:	e77a      	b.n	8009674 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800977e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009780:	f000 f9c8 	bl	8009b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009784:	f000 fcf6 	bl	800a174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800978a:	f000 fa15 	bl	8009bb8 <prvIsQueueEmpty>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f43f af6f 	beq.w	8009674 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009798:	4618      	mov	r0, r3
 800979a:	3730      	adds	r7, #48	@ 0x30
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08e      	sub	sp, #56	@ 0x38
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10b      	bne.n	80097d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	623b      	str	r3, [r7, #32]
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	61fb      	str	r3, [r7, #28]
}
 80097f2:	bf00      	nop
 80097f4:	bf00      	nop
 80097f6:	e7fd      	b.n	80097f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097f8:	f001 f8a4 	bl	800a944 <xTaskGetSchedulerState>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <xQueueSemaphoreTake+0x64>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueSemaphoreTake+0x68>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueSemaphoreTake+0x6a>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	61bb      	str	r3, [r7, #24]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800982a:	f001 fef5 	bl	800b618 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	d024      	beq.n	8009884 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800984a:	f001 f9f5 	bl	800ac38 <pvTaskIncrementMutexHeldCount>
 800984e:	4602      	mov	r2, r0
 8009850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009852:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00f      	beq.n	800987c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	3310      	adds	r3, #16
 8009860:	4618      	mov	r0, r3
 8009862:	f000 fe9f 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800986c:	4b54      	ldr	r3, [pc, #336]	@ (80099c0 <xQueueSemaphoreTake+0x21c>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800987c:	f001 fefe 	bl	800b67c <vPortExitCritical>
				return pdPASS;
 8009880:	2301      	movs	r3, #1
 8009882:	e098      	b.n	80099b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d112      	bne.n	80098b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00b      	beq.n	80098a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	617b      	str	r3, [r7, #20]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80098a8:	f001 fee8 	bl	800b67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098ac:	2300      	movs	r3, #0
 80098ae:	e082      	b.n	80099b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098b6:	f107 030c 	add.w	r3, r7, #12
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fed6 	bl	800a66c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098c4:	f001 feda 	bl	800b67c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098c8:	f000 fc46 	bl	800a158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098cc:	f001 fea4 	bl	800b618 <vPortEnterCritical>
 80098d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098dc:	d103      	bne.n	80098e6 <xQueueSemaphoreTake+0x142>
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098ec:	b25b      	sxtb	r3, r3
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098f2:	d103      	bne.n	80098fc <xQueueSemaphoreTake+0x158>
 80098f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098fc:	f001 febe 	bl	800b67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009900:	463a      	mov	r2, r7
 8009902:	f107 030c 	add.w	r3, r7, #12
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fec5 	bl	800a698 <xTaskCheckForTimeOut>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d132      	bne.n	800997a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009916:	f000 f94f 	bl	8009bb8 <prvIsQueueEmpty>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d026      	beq.n	800996e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d109      	bne.n	800993c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009928:	f001 fe76 	bl	800b618 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	4618      	mov	r0, r3
 8009932:	f001 f825 	bl	800a980 <xTaskPriorityInherit>
 8009936:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009938:	f001 fea0 	bl	800b67c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993e:	3324      	adds	r3, #36	@ 0x24
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f000 fddb 	bl	800a500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800994a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800994c:	f000 f8e2 	bl	8009b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009950:	f000 fc10 	bl	800a174 <xTaskResumeAll>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	f47f af67 	bne.w	800982a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800995c:	4b18      	ldr	r3, [pc, #96]	@ (80099c0 <xQueueSemaphoreTake+0x21c>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	e75d      	b.n	800982a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800996e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009970:	f000 f8d0 	bl	8009b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009974:	f000 fbfe 	bl	800a174 <xTaskResumeAll>
 8009978:	e757      	b.n	800982a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800997a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800997c:	f000 f8ca 	bl	8009b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009980:	f000 fbf8 	bl	800a174 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009986:	f000 f917 	bl	8009bb8 <prvIsQueueEmpty>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	f43f af4c 	beq.w	800982a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00d      	beq.n	80099b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009998:	f001 fe3e 	bl	800b618 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800999c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800999e:	f000 f811 	bl	80099c4 <prvGetDisinheritPriorityAfterTimeout>
 80099a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80099a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 f8c0 	bl	800ab30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80099b0:	f001 fe64 	bl	800b67c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3738      	adds	r7, #56	@ 0x38
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d006      	beq.n	80099e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e001      	b.n	80099e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099e6:	68fb      	ldr	r3, [r7, #12]
	}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a00:	2300      	movs	r3, #0
 8009a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10d      	bne.n	8009a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d14d      	bne.n	8009ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 f816 	bl	800aa50 <xTaskPriorityDisinherit>
 8009a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	609a      	str	r2, [r3, #8]
 8009a2c:	e043      	b.n	8009ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d119      	bne.n	8009a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6858      	ldr	r0, [r3, #4]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	f002 ff3d 	bl	800c8be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4c:	441a      	add	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d32b      	bcc.n	8009ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	e026      	b.n	8009ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	68d8      	ldr	r0, [r3, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a70:	461a      	mov	r2, r3
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	f002 ff23 	bl	800c8be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a80:	425b      	negs	r3, r3
 8009a82:	441a      	add	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d207      	bcs.n	8009aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9c:	425b      	negs	r3, r3
 8009a9e:	441a      	add	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d105      	bne.n	8009ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009abe:	697b      	ldr	r3, [r7, #20]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d018      	beq.n	8009b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae2:	441a      	add	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d303      	bcc.n	8009afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68d9      	ldr	r1, [r3, #12]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b04:	461a      	mov	r2, r3
 8009b06:	6838      	ldr	r0, [r7, #0]
 8009b08:	f002 fed9 	bl	800c8be <memcpy>
	}
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b1c:	f001 fd7c 	bl	800b618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b28:	e011      	b.n	8009b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d012      	beq.n	8009b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3324      	adds	r3, #36	@ 0x24
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fd34 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b42:	f000 fe0d 	bl	800a760 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dce9      	bgt.n	8009b2a <prvUnlockQueue+0x16>
 8009b56:	e000      	b.n	8009b5a <prvUnlockQueue+0x46>
					break;
 8009b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	22ff      	movs	r2, #255	@ 0xff
 8009b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b62:	f001 fd8b 	bl	800b67c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b66:	f001 fd57 	bl	800b618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b72:	e011      	b.n	8009b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d012      	beq.n	8009ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3310      	adds	r3, #16
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fd0f 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b8c:	f000 fde8 	bl	800a760 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dce9      	bgt.n	8009b74 <prvUnlockQueue+0x60>
 8009ba0:	e000      	b.n	8009ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	22ff      	movs	r2, #255	@ 0xff
 8009ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009bac:	f001 fd66 	bl	800b67c <vPortExitCritical>
}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc0:	f001 fd2a 	bl	800b618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e001      	b.n	8009bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bd6:	f001 fd51 	bl	800b67c <vPortExitCritical>

	return xReturn;
 8009bda:	68fb      	ldr	r3, [r7, #12]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bec:	f001 fd14 	bl	800b618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d102      	bne.n	8009c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e001      	b.n	8009c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c06:	f001 fd39 	bl	800b67c <vPortExitCritical>

	return xReturn;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	e014      	b.n	8009c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c24:	4a0f      	ldr	r2, [pc, #60]	@ (8009c64 <vQueueAddToRegistry+0x50>)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10b      	bne.n	8009c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c30:	490c      	ldr	r1, [pc, #48]	@ (8009c64 <vQueueAddToRegistry+0x50>)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009c64 <vQueueAddToRegistry+0x50>)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	4413      	add	r3, r2
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c46:	e006      	b.n	8009c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	d9e7      	bls.n	8009c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	2000105c 	.word	0x2000105c

08009c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c78:	f001 fcce 	bl	800b618 <vPortEnterCritical>
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c82:	b25b      	sxtb	r3, r3
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c88:	d103      	bne.n	8009c92 <vQueueWaitForMessageRestricted+0x2a>
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c98:	b25b      	sxtb	r3, r3
 8009c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c9e:	d103      	bne.n	8009ca8 <vQueueWaitForMessageRestricted+0x40>
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ca8:	f001 fce8 	bl	800b67c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	3324      	adds	r3, #36	@ 0x24
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fc45 	bl	800a54c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cc2:	6978      	ldr	r0, [r7, #20]
 8009cc4:	f7ff ff26 	bl	8009b14 <prvUnlockQueue>
	}
 8009cc8:	bf00      	nop
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08e      	sub	sp, #56	@ 0x38
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	623b      	str	r3, [r7, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	61fb      	str	r3, [r7, #28]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d1a:	235c      	movs	r3, #92	@ 0x5c
 8009d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d22:	d00b      	beq.n	8009d3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	61bb      	str	r3, [r7, #24]
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01e      	beq.n	8009d82 <xTaskCreateStatic+0xb2>
 8009d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d01b      	beq.n	8009d82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9303      	str	r3, [sp, #12]
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	f107 0314 	add.w	r3, r7, #20
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f850 	bl	8009e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d7c:	f000 f8de 	bl	8009f3c <prvAddNewTaskToReadyList>
 8009d80:	e001      	b.n	8009d86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d86:	697b      	ldr	r3, [r7, #20]
	}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3728      	adds	r7, #40	@ 0x28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08c      	sub	sp, #48	@ 0x30
 8009d94:	af04      	add	r7, sp, #16
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 fd59 	bl	800b85c <pvPortMalloc>
 8009daa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00e      	beq.n	8009dd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009db2:	205c      	movs	r0, #92	@ 0x5c
 8009db4:	f001 fd52 	bl	800b85c <pvPortMalloc>
 8009db8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8009dc6:	e005      	b.n	8009dd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dc8:	6978      	ldr	r0, [r7, #20]
 8009dca:	f001 fe15 	bl	800b9f8 <vPortFree>
 8009dce:	e001      	b.n	8009dd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d017      	beq.n	8009e0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009de2:	88fa      	ldrh	r2, [r7, #6]
 8009de4:	2300      	movs	r3, #0
 8009de6:	9303      	str	r3, [sp, #12]
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	9302      	str	r3, [sp, #8]
 8009dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f80e 	bl	8009e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dfe:	69f8      	ldr	r0, [r7, #28]
 8009e00:	f000 f89c 	bl	8009f3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e04:	2301      	movs	r3, #1
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	e002      	b.n	8009e10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e10:	69bb      	ldr	r3, [r7, #24]
	}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3720      	adds	r7, #32
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b088      	sub	sp, #32
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	461a      	mov	r2, r3
 8009e32:	21a5      	movs	r1, #165	@ 0xa5
 8009e34:	f002 fd09 	bl	800c84a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e42:	3b01      	subs	r3, #1
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	f023 0307 	bic.w	r3, r3, #7
 8009e50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f003 0307 	and.w	r3, r3, #7
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	617b      	str	r3, [r7, #20]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d01f      	beq.n	8009eba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	61fb      	str	r3, [r7, #28]
 8009e7e:	e012      	b.n	8009ea6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	4413      	add	r3, r2
 8009e86:	7819      	ldrb	r1, [r3, #0]
 8009e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	3334      	adds	r3, #52	@ 0x34
 8009e90:	460a      	mov	r2, r1
 8009e92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d006      	beq.n	8009eae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	2b0f      	cmp	r3, #15
 8009eaa:	d9e9      	bls.n	8009e80 <prvInitialiseNewTask+0x66>
 8009eac:	e000      	b.n	8009eb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8009eae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009eb8:	e003      	b.n	8009ec2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	2b37      	cmp	r3, #55	@ 0x37
 8009ec6:	d901      	bls.n	8009ecc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ec8:	2337      	movs	r3, #55	@ 0x37
 8009eca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	2200      	movs	r2, #0
 8009edc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe ff4a 	bl	8008d7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	3318      	adds	r3, #24
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe ff45 	bl	8008d7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	68f9      	ldr	r1, [r7, #12]
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f001 fa4e 	bl	800b3bc <pxPortInitialiseStack>
 8009f20:	4602      	mov	r2, r0
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f32:	bf00      	nop
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f44:	f001 fb68 	bl	800b618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f48:	4b2d      	ldr	r3, [pc, #180]	@ (800a000 <prvAddNewTaskToReadyList+0xc4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	4a2c      	ldr	r2, [pc, #176]	@ (800a000 <prvAddNewTaskToReadyList+0xc4>)
 8009f50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f52:	4b2c      	ldr	r3, [pc, #176]	@ (800a004 <prvAddNewTaskToReadyList+0xc8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f5a:	4a2a      	ldr	r2, [pc, #168]	@ (800a004 <prvAddNewTaskToReadyList+0xc8>)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f60:	4b27      	ldr	r3, [pc, #156]	@ (800a000 <prvAddNewTaskToReadyList+0xc4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d110      	bne.n	8009f8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f68:	f000 fc1e 	bl	800a7a8 <prvInitialiseTaskLists>
 8009f6c:	e00d      	b.n	8009f8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f6e:	4b26      	ldr	r3, [pc, #152]	@ (800a008 <prvAddNewTaskToReadyList+0xcc>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f76:	4b23      	ldr	r3, [pc, #140]	@ (800a004 <prvAddNewTaskToReadyList+0xc8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d802      	bhi.n	8009f8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f84:	4a1f      	ldr	r2, [pc, #124]	@ (800a004 <prvAddNewTaskToReadyList+0xc8>)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f8a:	4b20      	ldr	r3, [pc, #128]	@ (800a00c <prvAddNewTaskToReadyList+0xd0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	4a1e      	ldr	r2, [pc, #120]	@ (800a00c <prvAddNewTaskToReadyList+0xd0>)
 8009f92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f94:	4b1d      	ldr	r3, [pc, #116]	@ (800a00c <prvAddNewTaskToReadyList+0xd0>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa0:	4b1b      	ldr	r3, [pc, #108]	@ (800a010 <prvAddNewTaskToReadyList+0xd4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d903      	bls.n	8009fb0 <prvAddNewTaskToReadyList+0x74>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	4a18      	ldr	r2, [pc, #96]	@ (800a010 <prvAddNewTaskToReadyList+0xd4>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a15      	ldr	r2, [pc, #84]	@ (800a014 <prvAddNewTaskToReadyList+0xd8>)
 8009fbe:	441a      	add	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fe fee5 	bl	8008d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fcc:	f001 fb56 	bl	800b67c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fd0:	4b0d      	ldr	r3, [pc, #52]	@ (800a008 <prvAddNewTaskToReadyList+0xcc>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00e      	beq.n	8009ff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <prvAddNewTaskToReadyList+0xc8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d207      	bcs.n	8009ff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fe6:	4b0c      	ldr	r3, [pc, #48]	@ (800a018 <prvAddNewTaskToReadyList+0xdc>)
 8009fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20001570 	.word	0x20001570
 800a004:	2000109c 	.word	0x2000109c
 800a008:	2000157c 	.word	0x2000157c
 800a00c:	2000158c 	.word	0x2000158c
 800a010:	20001578 	.word	0x20001578
 800a014:	200010a0 	.word	0x200010a0
 800a018:	e000ed04 	.word	0xe000ed04

0800a01c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a024:	2300      	movs	r3, #0
 800a026:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d018      	beq.n	800a060 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a02e:	4b14      	ldr	r3, [pc, #80]	@ (800a080 <vTaskDelay+0x64>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <vTaskDelay+0x32>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60bb      	str	r3, [r7, #8]
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	e7fd      	b.n	800a04a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a04e:	f000 f883 	bl	800a158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a052:	2100      	movs	r1, #0
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fe03 	bl	800ac60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a05a:	f000 f88b 	bl	800a174 <xTaskResumeAll>
 800a05e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d107      	bne.n	800a076 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a066:	4b07      	ldr	r3, [pc, #28]	@ (800a084 <vTaskDelay+0x68>)
 800a068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20001598 	.word	0x20001598
 800a084:	e000ed04 	.word	0xe000ed04

0800a088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	@ 0x28
 800a08c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a096:	463a      	mov	r2, r7
 800a098:	1d39      	adds	r1, r7, #4
 800a09a:	f107 0308 	add.w	r3, r7, #8
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fe18 	bl	8008cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	9202      	str	r2, [sp, #8]
 800a0ac:	9301      	str	r3, [sp, #4]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	460a      	mov	r2, r1
 800a0b6:	4922      	ldr	r1, [pc, #136]	@ (800a140 <vTaskStartScheduler+0xb8>)
 800a0b8:	4822      	ldr	r0, [pc, #136]	@ (800a144 <vTaskStartScheduler+0xbc>)
 800a0ba:	f7ff fe09 	bl	8009cd0 <xTaskCreateStatic>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	4a21      	ldr	r2, [pc, #132]	@ (800a148 <vTaskStartScheduler+0xc0>)
 800a0c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0c4:	4b20      	ldr	r3, [pc, #128]	@ (800a148 <vTaskStartScheduler+0xc0>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	e001      	b.n	800a0d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d102      	bne.n	800a0e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0dc:	f000 fe14 	bl	800ad08 <xTimerCreateTimerTask>
 800a0e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d116      	bne.n	800a116 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	613b      	str	r3, [r7, #16]
}
 800a0fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0fc:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <vTaskStartScheduler+0xc4>)
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a102:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a104:	4b12      	ldr	r3, [pc, #72]	@ (800a150 <vTaskStartScheduler+0xc8>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a10a:	4b12      	ldr	r3, [pc, #72]	@ (800a154 <vTaskStartScheduler+0xcc>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a110:	f001 f9de 	bl	800b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a114:	e00f      	b.n	800a136 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a11c:	d10b      	bne.n	800a136 <vTaskStartScheduler+0xae>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60fb      	str	r3, [r7, #12]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <vTaskStartScheduler+0xaa>
}
 800a136:	bf00      	nop
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0800ec90 	.word	0x0800ec90
 800a144:	0800a779 	.word	0x0800a779
 800a148:	20001594 	.word	0x20001594
 800a14c:	20001590 	.word	0x20001590
 800a150:	2000157c 	.word	0x2000157c
 800a154:	20001574 	.word	0x20001574

0800a158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a15c:	4b04      	ldr	r3, [pc, #16]	@ (800a170 <vTaskSuspendAll+0x18>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3301      	adds	r3, #1
 800a162:	4a03      	ldr	r2, [pc, #12]	@ (800a170 <vTaskSuspendAll+0x18>)
 800a164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a166:	bf00      	nop
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20001598 	.word	0x20001598

0800a174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a17e:	2300      	movs	r3, #0
 800a180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a182:	4b42      	ldr	r3, [pc, #264]	@ (800a28c <xTaskResumeAll+0x118>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	603b      	str	r3, [r7, #0]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1a2:	f001 fa39 	bl	800b618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1a6:	4b39      	ldr	r3, [pc, #228]	@ (800a28c <xTaskResumeAll+0x118>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	4a37      	ldr	r2, [pc, #220]	@ (800a28c <xTaskResumeAll+0x118>)
 800a1ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1b0:	4b36      	ldr	r3, [pc, #216]	@ (800a28c <xTaskResumeAll+0x118>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d162      	bne.n	800a27e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1b8:	4b35      	ldr	r3, [pc, #212]	@ (800a290 <xTaskResumeAll+0x11c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d05e      	beq.n	800a27e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1c0:	e02f      	b.n	800a222 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c2:	4b34      	ldr	r3, [pc, #208]	@ (800a294 <xTaskResumeAll+0x120>)
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3318      	adds	r3, #24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fe3e 	bl	8008e50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fe39 	bl	8008e50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a298 <xTaskResumeAll+0x124>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d903      	bls.n	800a1f2 <xTaskResumeAll+0x7e>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ee:	4a2a      	ldr	r2, [pc, #168]	@ (800a298 <xTaskResumeAll+0x124>)
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4a27      	ldr	r2, [pc, #156]	@ (800a29c <xTaskResumeAll+0x128>)
 800a200:	441a      	add	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3304      	adds	r3, #4
 800a206:	4619      	mov	r1, r3
 800a208:	4610      	mov	r0, r2
 800a20a:	f7fe fdc4 	bl	8008d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a212:	4b23      	ldr	r3, [pc, #140]	@ (800a2a0 <xTaskResumeAll+0x12c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a218:	429a      	cmp	r2, r3
 800a21a:	d302      	bcc.n	800a222 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a21c:	4b21      	ldr	r3, [pc, #132]	@ (800a2a4 <xTaskResumeAll+0x130>)
 800a21e:	2201      	movs	r2, #1
 800a220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a222:	4b1c      	ldr	r3, [pc, #112]	@ (800a294 <xTaskResumeAll+0x120>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1cb      	bne.n	800a1c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a230:	f000 fb58 	bl	800a8e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a234:	4b1c      	ldr	r3, [pc, #112]	@ (800a2a8 <xTaskResumeAll+0x134>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d010      	beq.n	800a262 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a240:	f000 f846 	bl	800a2d0 <xTaskIncrementTick>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a24a:	4b16      	ldr	r3, [pc, #88]	@ (800a2a4 <xTaskResumeAll+0x130>)
 800a24c:	2201      	movs	r2, #1
 800a24e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3b01      	subs	r3, #1
 800a254:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1f1      	bne.n	800a240 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a25c:	4b12      	ldr	r3, [pc, #72]	@ (800a2a8 <xTaskResumeAll+0x134>)
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a262:	4b10      	ldr	r3, [pc, #64]	@ (800a2a4 <xTaskResumeAll+0x130>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a26a:	2301      	movs	r3, #1
 800a26c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a26e:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ac <xTaskResumeAll+0x138>)
 800a270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a27e:	f001 f9fd 	bl	800b67c <vPortExitCritical>

	return xAlreadyYielded;
 800a282:	68bb      	ldr	r3, [r7, #8]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20001598 	.word	0x20001598
 800a290:	20001570 	.word	0x20001570
 800a294:	20001530 	.word	0x20001530
 800a298:	20001578 	.word	0x20001578
 800a29c:	200010a0 	.word	0x200010a0
 800a2a0:	2000109c 	.word	0x2000109c
 800a2a4:	20001584 	.word	0x20001584
 800a2a8:	20001580 	.word	0x20001580
 800a2ac:	e000ed04 	.word	0xe000ed04

0800a2b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2b6:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <xTaskGetTickCount+0x1c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2bc:	687b      	ldr	r3, [r7, #4]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20001574 	.word	0x20001574

0800a2d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2da:	4b4f      	ldr	r3, [pc, #316]	@ (800a418 <xTaskIncrementTick+0x148>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f040 8090 	bne.w	800a404 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2e4:	4b4d      	ldr	r3, [pc, #308]	@ (800a41c <xTaskIncrementTick+0x14c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2ec:	4a4b      	ldr	r2, [pc, #300]	@ (800a41c <xTaskIncrementTick+0x14c>)
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d121      	bne.n	800a33c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2f8:	4b49      	ldr	r3, [pc, #292]	@ (800a420 <xTaskIncrementTick+0x150>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	603b      	str	r3, [r7, #0]
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <xTaskIncrementTick+0x46>
 800a31a:	4b41      	ldr	r3, [pc, #260]	@ (800a420 <xTaskIncrementTick+0x150>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	4b40      	ldr	r3, [pc, #256]	@ (800a424 <xTaskIncrementTick+0x154>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a3e      	ldr	r2, [pc, #248]	@ (800a420 <xTaskIncrementTick+0x150>)
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	4a3e      	ldr	r2, [pc, #248]	@ (800a424 <xTaskIncrementTick+0x154>)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6013      	str	r3, [r2, #0]
 800a32e:	4b3e      	ldr	r3, [pc, #248]	@ (800a428 <xTaskIncrementTick+0x158>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	4a3c      	ldr	r2, [pc, #240]	@ (800a428 <xTaskIncrementTick+0x158>)
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	f000 fad4 	bl	800a8e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a33c:	4b3b      	ldr	r3, [pc, #236]	@ (800a42c <xTaskIncrementTick+0x15c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	429a      	cmp	r2, r3
 800a344:	d349      	bcc.n	800a3da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a346:	4b36      	ldr	r3, [pc, #216]	@ (800a420 <xTaskIncrementTick+0x150>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d104      	bne.n	800a35a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a350:	4b36      	ldr	r3, [pc, #216]	@ (800a42c <xTaskIncrementTick+0x15c>)
 800a352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a356:	601a      	str	r2, [r3, #0]
					break;
 800a358:	e03f      	b.n	800a3da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a35a:	4b31      	ldr	r3, [pc, #196]	@ (800a420 <xTaskIncrementTick+0x150>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d203      	bcs.n	800a37a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a372:	4a2e      	ldr	r2, [pc, #184]	@ (800a42c <xTaskIncrementTick+0x15c>)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a378:	e02f      	b.n	800a3da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe fd66 	bl	8008e50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d004      	beq.n	800a396 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	3318      	adds	r3, #24
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe fd5d 	bl	8008e50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a39a:	4b25      	ldr	r3, [pc, #148]	@ (800a430 <xTaskIncrementTick+0x160>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d903      	bls.n	800a3aa <xTaskIncrementTick+0xda>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a6:	4a22      	ldr	r2, [pc, #136]	@ (800a430 <xTaskIncrementTick+0x160>)
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a434 <xTaskIncrementTick+0x164>)
 800a3b8:	441a      	add	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	f7fe fce8 	bl	8008d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a438 <xTaskIncrementTick+0x168>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d3b8      	bcc.n	800a346 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d8:	e7b5      	b.n	800a346 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3da:	4b17      	ldr	r3, [pc, #92]	@ (800a438 <xTaskIncrementTick+0x168>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e0:	4914      	ldr	r1, [pc, #80]	@ (800a434 <xTaskIncrementTick+0x164>)
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	440b      	add	r3, r1
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d901      	bls.n	800a3f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3f6:	4b11      	ldr	r3, [pc, #68]	@ (800a43c <xTaskIncrementTick+0x16c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d007      	beq.n	800a40e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	e004      	b.n	800a40e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a404:	4b0e      	ldr	r3, [pc, #56]	@ (800a440 <xTaskIncrementTick+0x170>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3301      	adds	r3, #1
 800a40a:	4a0d      	ldr	r2, [pc, #52]	@ (800a440 <xTaskIncrementTick+0x170>)
 800a40c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a40e:	697b      	ldr	r3, [r7, #20]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20001598 	.word	0x20001598
 800a41c:	20001574 	.word	0x20001574
 800a420:	20001528 	.word	0x20001528
 800a424:	2000152c 	.word	0x2000152c
 800a428:	20001588 	.word	0x20001588
 800a42c:	20001590 	.word	0x20001590
 800a430:	20001578 	.word	0x20001578
 800a434:	200010a0 	.word	0x200010a0
 800a438:	2000109c 	.word	0x2000109c
 800a43c:	20001584 	.word	0x20001584
 800a440:	20001580 	.word	0x20001580

0800a444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a44a:	4b28      	ldr	r3, [pc, #160]	@ (800a4ec <vTaskSwitchContext+0xa8>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a452:	4b27      	ldr	r3, [pc, #156]	@ (800a4f0 <vTaskSwitchContext+0xac>)
 800a454:	2201      	movs	r2, #1
 800a456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a458:	e042      	b.n	800a4e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a45a:	4b25      	ldr	r3, [pc, #148]	@ (800a4f0 <vTaskSwitchContext+0xac>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a460:	4b24      	ldr	r3, [pc, #144]	@ (800a4f4 <vTaskSwitchContext+0xb0>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e011      	b.n	800a48c <vTaskSwitchContext+0x48>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <vTaskSwitchContext+0x42>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	607b      	str	r3, [r7, #4]
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	e7fd      	b.n	800a482 <vTaskSwitchContext+0x3e>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3b01      	subs	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	491a      	ldr	r1, [pc, #104]	@ (800a4f8 <vTaskSwitchContext+0xb4>)
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0e3      	beq.n	800a468 <vTaskSwitchContext+0x24>
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4a13      	ldr	r2, [pc, #76]	@ (800a4f8 <vTaskSwitchContext+0xb4>)
 800a4ac:	4413      	add	r3, r2
 800a4ae:	60bb      	str	r3, [r7, #8]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	605a      	str	r2, [r3, #4]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d104      	bne.n	800a4d0 <vTaskSwitchContext+0x8c>
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	605a      	str	r2, [r3, #4]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	4a09      	ldr	r2, [pc, #36]	@ (800a4fc <vTaskSwitchContext+0xb8>)
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	4a06      	ldr	r2, [pc, #24]	@ (800a4f4 <vTaskSwitchContext+0xb0>)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6013      	str	r3, [r2, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20001598 	.word	0x20001598
 800a4f0:	20001584 	.word	0x20001584
 800a4f4:	20001578 	.word	0x20001578
 800a4f8:	200010a0 	.word	0x200010a0
 800a4fc:	2000109c 	.word	0x2000109c

0800a500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10b      	bne.n	800a528 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	60fb      	str	r3, [r7, #12]
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	e7fd      	b.n	800a524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a528:	4b07      	ldr	r3, [pc, #28]	@ (800a548 <vTaskPlaceOnEventList+0x48>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3318      	adds	r3, #24
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7fe fc54 	bl	8008dde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a536:	2101      	movs	r1, #1
 800a538:	6838      	ldr	r0, [r7, #0]
 800a53a:	f000 fb91 	bl	800ac60 <prvAddCurrentTaskToDelayedList>
}
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	2000109c 	.word	0x2000109c

0800a54c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10b      	bne.n	800a576 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	617b      	str	r3, [r7, #20]
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	e7fd      	b.n	800a572 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a576:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3318      	adds	r3, #24
 800a57c:	4619      	mov	r1, r3
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7fe fc09 	bl	8008d96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a58a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a58e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	68b8      	ldr	r0, [r7, #8]
 800a594:	f000 fb64 	bl	800ac60 <prvAddCurrentTaskToDelayedList>
	}
 800a598:	bf00      	nop
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	2000109c 	.word	0x2000109c

0800a5a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	60fb      	str	r3, [r7, #12]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	3318      	adds	r3, #24
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fc3a 	bl	8008e50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a654 <xTaskRemoveFromEventList+0xb0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11d      	bne.n	800a620 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fc31 	bl	8008e50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f2:	4b19      	ldr	r3, [pc, #100]	@ (800a658 <xTaskRemoveFromEventList+0xb4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d903      	bls.n	800a602 <xTaskRemoveFromEventList+0x5e>
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fe:	4a16      	ldr	r2, [pc, #88]	@ (800a658 <xTaskRemoveFromEventList+0xb4>)
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4a13      	ldr	r2, [pc, #76]	@ (800a65c <xTaskRemoveFromEventList+0xb8>)
 800a610:	441a      	add	r2, r3
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7fe fbbc 	bl	8008d96 <vListInsertEnd>
 800a61e:	e005      	b.n	800a62c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	3318      	adds	r3, #24
 800a624:	4619      	mov	r1, r3
 800a626:	480e      	ldr	r0, [pc, #56]	@ (800a660 <xTaskRemoveFromEventList+0xbc>)
 800a628:	f7fe fbb5 	bl	8008d96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a630:	4b0c      	ldr	r3, [pc, #48]	@ (800a664 <xTaskRemoveFromEventList+0xc0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a636:	429a      	cmp	r2, r3
 800a638:	d905      	bls.n	800a646 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a63a:	2301      	movs	r3, #1
 800a63c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a63e:	4b0a      	ldr	r3, [pc, #40]	@ (800a668 <xTaskRemoveFromEventList+0xc4>)
 800a640:	2201      	movs	r2, #1
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	e001      	b.n	800a64a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a646:	2300      	movs	r3, #0
 800a648:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a64a:	697b      	ldr	r3, [r7, #20]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20001598 	.word	0x20001598
 800a658:	20001578 	.word	0x20001578
 800a65c:	200010a0 	.word	0x200010a0
 800a660:	20001530 	.word	0x20001530
 800a664:	2000109c 	.word	0x2000109c
 800a668:	20001584 	.word	0x20001584

0800a66c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a674:	4b06      	ldr	r3, [pc, #24]	@ (800a690 <vTaskInternalSetTimeOutState+0x24>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a67c:	4b05      	ldr	r3, [pc, #20]	@ (800a694 <vTaskInternalSetTimeOutState+0x28>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	605a      	str	r2, [r3, #4]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20001588 	.word	0x20001588
 800a694:	20001574 	.word	0x20001574

0800a698 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	613b      	str	r3, [r7, #16]
}
 800a6ba:	bf00      	nop
 800a6bc:	bf00      	nop
 800a6be:	e7fd      	b.n	800a6bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10b      	bne.n	800a6de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60fb      	str	r3, [r7, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	e7fd      	b.n	800a6da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a6de:	f000 ff9b 	bl	800b618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a758 <xTaskCheckForTimeOut+0xc0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6fa:	d102      	bne.n	800a702 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	e023      	b.n	800a74a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	4b15      	ldr	r3, [pc, #84]	@ (800a75c <xTaskCheckForTimeOut+0xc4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d007      	beq.n	800a71e <xTaskCheckForTimeOut+0x86>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	429a      	cmp	r2, r3
 800a716:	d302      	bcc.n	800a71e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	e015      	b.n	800a74a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	429a      	cmp	r2, r3
 800a726:	d20b      	bcs.n	800a740 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff ff99 	bl	800a66c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61fb      	str	r3, [r7, #28]
 800a73e:	e004      	b.n	800a74a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a746:	2301      	movs	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a74a:	f000 ff97 	bl	800b67c <vPortExitCritical>

	return xReturn;
 800a74e:	69fb      	ldr	r3, [r7, #28]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20001574 	.word	0x20001574
 800a75c:	20001588 	.word	0x20001588

0800a760 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a764:	4b03      	ldr	r3, [pc, #12]	@ (800a774 <vTaskMissedYield+0x14>)
 800a766:	2201      	movs	r2, #1
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	20001584 	.word	0x20001584

0800a778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a780:	f000 f852 	bl	800a828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a784:	4b06      	ldr	r3, [pc, #24]	@ (800a7a0 <prvIdleTask+0x28>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d9f9      	bls.n	800a780 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a78c:	4b05      	ldr	r3, [pc, #20]	@ (800a7a4 <prvIdleTask+0x2c>)
 800a78e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a79c:	e7f0      	b.n	800a780 <prvIdleTask+0x8>
 800a79e:	bf00      	nop
 800a7a0:	200010a0 	.word	0x200010a0
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	607b      	str	r3, [r7, #4]
 800a7b2:	e00c      	b.n	800a7ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a12      	ldr	r2, [pc, #72]	@ (800a808 <prvInitialiseTaskLists+0x60>)
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe faba 	bl	8008d3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	607b      	str	r3, [r7, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b37      	cmp	r3, #55	@ 0x37
 800a7d2:	d9ef      	bls.n	800a7b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7d4:	480d      	ldr	r0, [pc, #52]	@ (800a80c <prvInitialiseTaskLists+0x64>)
 800a7d6:	f7fe fab1 	bl	8008d3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7da:	480d      	ldr	r0, [pc, #52]	@ (800a810 <prvInitialiseTaskLists+0x68>)
 800a7dc:	f7fe faae 	bl	8008d3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7e0:	480c      	ldr	r0, [pc, #48]	@ (800a814 <prvInitialiseTaskLists+0x6c>)
 800a7e2:	f7fe faab 	bl	8008d3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7e6:	480c      	ldr	r0, [pc, #48]	@ (800a818 <prvInitialiseTaskLists+0x70>)
 800a7e8:	f7fe faa8 	bl	8008d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7ec:	480b      	ldr	r0, [pc, #44]	@ (800a81c <prvInitialiseTaskLists+0x74>)
 800a7ee:	f7fe faa5 	bl	8008d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <prvInitialiseTaskLists+0x78>)
 800a7f4:	4a05      	ldr	r2, [pc, #20]	@ (800a80c <prvInitialiseTaskLists+0x64>)
 800a7f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a824 <prvInitialiseTaskLists+0x7c>)
 800a7fa:	4a05      	ldr	r2, [pc, #20]	@ (800a810 <prvInitialiseTaskLists+0x68>)
 800a7fc:	601a      	str	r2, [r3, #0]
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	200010a0 	.word	0x200010a0
 800a80c:	20001500 	.word	0x20001500
 800a810:	20001514 	.word	0x20001514
 800a814:	20001530 	.word	0x20001530
 800a818:	20001544 	.word	0x20001544
 800a81c:	2000155c 	.word	0x2000155c
 800a820:	20001528 	.word	0x20001528
 800a824:	2000152c 	.word	0x2000152c

0800a828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a82e:	e019      	b.n	800a864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a830:	f000 fef2 	bl	800b618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b10      	ldr	r3, [pc, #64]	@ (800a878 <prvCheckTasksWaitingTermination+0x50>)
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3304      	adds	r3, #4
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe fb05 	bl	8008e50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a846:	4b0d      	ldr	r3, [pc, #52]	@ (800a87c <prvCheckTasksWaitingTermination+0x54>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	4a0b      	ldr	r2, [pc, #44]	@ (800a87c <prvCheckTasksWaitingTermination+0x54>)
 800a84e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a850:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3b01      	subs	r3, #1
 800a856:	4a0a      	ldr	r2, [pc, #40]	@ (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a85a:	f000 ff0f 	bl	800b67c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f810 	bl	800a884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a864:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e1      	bne.n	800a830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20001544 	.word	0x20001544
 800a87c:	20001570 	.word	0x20001570
 800a880:	20001558 	.word	0x20001558

0800a884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a892:	2b00      	cmp	r3, #0
 800a894:	d108      	bne.n	800a8a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 f8ac 	bl	800b9f8 <vPortFree>
				vPortFree( pxTCB );
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 f8a9 	bl	800b9f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8a6:	e019      	b.n	800a8dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d103      	bne.n	800a8ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 f8a0 	bl	800b9f8 <vPortFree>
	}
 800a8b8:	e010      	b.n	800a8dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d00b      	beq.n	800a8dc <prvDeleteTCB+0x58>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60fb      	str	r3, [r7, #12]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <prvDeleteTCB+0x54>
	}
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a91c <prvResetNextTaskUnblockTime+0x38>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d104      	bne.n	800a8fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a920 <prvResetNextTaskUnblockTime+0x3c>)
 800a8f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8fc:	e008      	b.n	800a910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8fe:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <prvResetNextTaskUnblockTime+0x38>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	4a04      	ldr	r2, [pc, #16]	@ (800a920 <prvResetNextTaskUnblockTime+0x3c>)
 800a90e:	6013      	str	r3, [r2, #0]
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	20001528 	.word	0x20001528
 800a920:	20001590 	.word	0x20001590

0800a924 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a92a:	4b05      	ldr	r3, [pc, #20]	@ (800a940 <xTaskGetCurrentTaskHandle+0x1c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a930:	687b      	ldr	r3, [r7, #4]
	}
 800a932:	4618      	mov	r0, r3
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	2000109c 	.word	0x2000109c

0800a944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a94a:	4b0b      	ldr	r3, [pc, #44]	@ (800a978 <xTaskGetSchedulerState+0x34>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d102      	bne.n	800a958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a952:	2301      	movs	r3, #1
 800a954:	607b      	str	r3, [r7, #4]
 800a956:	e008      	b.n	800a96a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a958:	4b08      	ldr	r3, [pc, #32]	@ (800a97c <xTaskGetSchedulerState+0x38>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a960:	2302      	movs	r3, #2
 800a962:	607b      	str	r3, [r7, #4]
 800a964:	e001      	b.n	800a96a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a966:	2300      	movs	r3, #0
 800a968:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a96a:	687b      	ldr	r3, [r7, #4]
	}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	2000157c 	.word	0x2000157c
 800a97c:	20001598 	.word	0x20001598

0800a980 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d051      	beq.n	800aa3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a99a:	4b2a      	ldr	r3, [pc, #168]	@ (800aa44 <xTaskPriorityInherit+0xc4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d241      	bcs.n	800aa28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	db06      	blt.n	800a9ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ac:	4b25      	ldr	r3, [pc, #148]	@ (800aa44 <xTaskPriorityInherit+0xc4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	6959      	ldr	r1, [r3, #20]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4a1f      	ldr	r2, [pc, #124]	@ (800aa48 <xTaskPriorityInherit+0xc8>)
 800a9cc:	4413      	add	r3, r2
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	d122      	bne.n	800aa18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fa3a 	bl	8008e50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9dc:	4b19      	ldr	r3, [pc, #100]	@ (800aa44 <xTaskPriorityInherit+0xc4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ea:	4b18      	ldr	r3, [pc, #96]	@ (800aa4c <xTaskPriorityInherit+0xcc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d903      	bls.n	800a9fa <xTaskPriorityInherit+0x7a>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f6:	4a15      	ldr	r2, [pc, #84]	@ (800aa4c <xTaskPriorityInherit+0xcc>)
 800a9f8:	6013      	str	r3, [r2, #0]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9fe:	4613      	mov	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4a10      	ldr	r2, [pc, #64]	@ (800aa48 <xTaskPriorityInherit+0xc8>)
 800aa08:	441a      	add	r2, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4610      	mov	r0, r2
 800aa12:	f7fe f9c0 	bl	8008d96 <vListInsertEnd>
 800aa16:	e004      	b.n	800aa22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa18:	4b0a      	ldr	r3, [pc, #40]	@ (800aa44 <xTaskPriorityInherit+0xc4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa22:	2301      	movs	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	e008      	b.n	800aa3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa2c:	4b05      	ldr	r3, [pc, #20]	@ (800aa44 <xTaskPriorityInherit+0xc4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d201      	bcs.n	800aa3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa36:	2301      	movs	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
	}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	2000109c 	.word	0x2000109c
 800aa48:	200010a0 	.word	0x200010a0
 800aa4c:	20001578 	.word	0x20001578

0800aa50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d058      	beq.n	800ab18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa66:	4b2f      	ldr	r3, [pc, #188]	@ (800ab24 <xTaskPriorityDisinherit+0xd4>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d00b      	beq.n	800aa88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	60fb      	str	r3, [r7, #12]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60bb      	str	r3, [r7, #8]
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	e7fd      	b.n	800aaa4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaac:	1e5a      	subs	r2, r3, #1
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d02c      	beq.n	800ab18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d128      	bne.n	800ab18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3304      	adds	r3, #4
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe f9c0 	bl	8008e50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aadc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab28 <xTaskPriorityDisinherit+0xd8>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d903      	bls.n	800aaf8 <xTaskPriorityDisinherit+0xa8>
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf4:	4a0c      	ldr	r2, [pc, #48]	@ (800ab28 <xTaskPriorityDisinherit+0xd8>)
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4a09      	ldr	r2, [pc, #36]	@ (800ab2c <xTaskPriorityDisinherit+0xdc>)
 800ab06:	441a      	add	r2, r3
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fe f941 	bl	8008d96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab14:	2301      	movs	r3, #1
 800ab16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab18:	697b      	ldr	r3, [r7, #20]
	}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	2000109c 	.word	0x2000109c
 800ab28:	20001578 	.word	0x20001578
 800ab2c:	200010a0 	.word	0x200010a0

0800ab30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d06c      	beq.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60fb      	str	r3, [r7, #12]
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	e7fd      	b.n	800ab64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d902      	bls.n	800ab78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	e002      	b.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab82:	69fa      	ldr	r2, [r7, #28]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d04c      	beq.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d147      	bne.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab92:	4b26      	ldr	r3, [pc, #152]	@ (800ac2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d10b      	bne.n	800abb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	60bb      	str	r3, [r7, #8]
}
 800abae:	bf00      	nop
 800abb0:	bf00      	nop
 800abb2:	e7fd      	b.n	800abb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	db04      	blt.n	800abd2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	6959      	ldr	r1, [r3, #20]
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4a13      	ldr	r2, [pc, #76]	@ (800ac30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abe2:	4413      	add	r3, r2
 800abe4:	4299      	cmp	r1, r3
 800abe6:	d11c      	bne.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	3304      	adds	r3, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe f92f 	bl	8008e50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d903      	bls.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac02:	4a0c      	ldr	r2, [pc, #48]	@ (800ac34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4a07      	ldr	r2, [pc, #28]	@ (800ac30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac14:	441a      	add	r2, r3
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f7fe f8ba 	bl	8008d96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac22:	bf00      	nop
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	2000109c 	.word	0x2000109c
 800ac30:	200010a0 	.word	0x200010a0
 800ac34:	20001578 	.word	0x20001578

0800ac38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac3c:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac44:	4b05      	ldr	r3, [pc, #20]	@ (800ac5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac4a:	3201      	adds	r2, #1
 800ac4c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ac4e:	4b03      	ldr	r3, [pc, #12]	@ (800ac5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ac50:	681b      	ldr	r3, [r3, #0]
	}
 800ac52:	4618      	mov	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	2000109c 	.word	0x2000109c

0800ac60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac6a:	4b21      	ldr	r3, [pc, #132]	@ (800acf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac70:	4b20      	ldr	r3, [pc, #128]	@ (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3304      	adds	r3, #4
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe f8ea 	bl	8008e50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac82:	d10a      	bne.n	800ac9a <prvAddCurrentTaskToDelayedList+0x3a>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d007      	beq.n	800ac9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac8a:	4b1a      	ldr	r3, [pc, #104]	@ (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4619      	mov	r1, r3
 800ac92:	4819      	ldr	r0, [pc, #100]	@ (800acf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac94:	f7fe f87f 	bl	8008d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac98:	e026      	b.n	800ace8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4413      	add	r3, r2
 800aca0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aca2:	4b14      	ldr	r3, [pc, #80]	@ (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d209      	bcs.n	800acc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acb2:	4b12      	ldr	r3, [pc, #72]	@ (800acfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b0f      	ldr	r3, [pc, #60]	@ (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7fe f88d 	bl	8008dde <vListInsert>
}
 800acc4:	e010      	b.n	800ace8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acc6:	4b0e      	ldr	r3, [pc, #56]	@ (800ad00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4b0a      	ldr	r3, [pc, #40]	@ (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3304      	adds	r3, #4
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f7fe f883 	bl	8008dde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ad04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d202      	bcs.n	800ace8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ace2:	4a08      	ldr	r2, [pc, #32]	@ (800ad04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	6013      	str	r3, [r2, #0]
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20001574 	.word	0x20001574
 800acf4:	2000109c 	.word	0x2000109c
 800acf8:	2000155c 	.word	0x2000155c
 800acfc:	2000152c 	.word	0x2000152c
 800ad00:	20001528 	.word	0x20001528
 800ad04:	20001590 	.word	0x20001590

0800ad08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	@ 0x28
 800ad0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad12:	f000 fb13 	bl	800b33c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad16:	4b1d      	ldr	r3, [pc, #116]	@ (800ad8c <xTimerCreateTimerTask+0x84>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d021      	beq.n	800ad62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad26:	1d3a      	adds	r2, r7, #4
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	f107 030c 	add.w	r3, r7, #12
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd ffe9 	bl	8008d08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	9202      	str	r2, [sp, #8]
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	2302      	movs	r3, #2
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	2300      	movs	r3, #0
 800ad46:	460a      	mov	r2, r1
 800ad48:	4911      	ldr	r1, [pc, #68]	@ (800ad90 <xTimerCreateTimerTask+0x88>)
 800ad4a:	4812      	ldr	r0, [pc, #72]	@ (800ad94 <xTimerCreateTimerTask+0x8c>)
 800ad4c:	f7fe ffc0 	bl	8009cd0 <xTaskCreateStatic>
 800ad50:	4603      	mov	r3, r0
 800ad52:	4a11      	ldr	r2, [pc, #68]	@ (800ad98 <xTimerCreateTimerTask+0x90>)
 800ad54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad56:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <xTimerCreateTimerTask+0x90>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10b      	bne.n	800ad80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	613b      	str	r3, [r7, #16]
}
 800ad7a:	bf00      	nop
 800ad7c:	bf00      	nop
 800ad7e:	e7fd      	b.n	800ad7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad80:	697b      	ldr	r3, [r7, #20]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200015cc 	.word	0x200015cc
 800ad90:	0800ec98 	.word	0x0800ec98
 800ad94:	0800aed5 	.word	0x0800aed5
 800ad98:	200015d0 	.word	0x200015d0

0800ad9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08a      	sub	sp, #40	@ 0x28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adaa:	2300      	movs	r3, #0
 800adac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10b      	bne.n	800adcc <xTimerGenericCommand+0x30>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	623b      	str	r3, [r7, #32]
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	e7fd      	b.n	800adc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adcc:	4b19      	ldr	r3, [pc, #100]	@ (800ae34 <xTimerGenericCommand+0x98>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d02a      	beq.n	800ae2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	dc18      	bgt.n	800ae18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ade6:	f7ff fdad 	bl	800a944 <xTaskGetSchedulerState>
 800adea:	4603      	mov	r3, r0
 800adec:	2b02      	cmp	r3, #2
 800adee:	d109      	bne.n	800ae04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800adf0:	4b10      	ldr	r3, [pc, #64]	@ (800ae34 <xTimerGenericCommand+0x98>)
 800adf2:	6818      	ldr	r0, [r3, #0]
 800adf4:	f107 0110 	add.w	r1, r7, #16
 800adf8:	2300      	movs	r3, #0
 800adfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adfc:	f7fe fa50 	bl	80092a0 <xQueueGenericSend>
 800ae00:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae02:	e012      	b.n	800ae2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae04:	4b0b      	ldr	r3, [pc, #44]	@ (800ae34 <xTimerGenericCommand+0x98>)
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	f107 0110 	add.w	r1, r7, #16
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f7fe fa46 	bl	80092a0 <xQueueGenericSend>
 800ae14:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae16:	e008      	b.n	800ae2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae18:	4b06      	ldr	r3, [pc, #24]	@ (800ae34 <xTimerGenericCommand+0x98>)
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	f107 0110 	add.w	r1, r7, #16
 800ae20:	2300      	movs	r3, #0
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	f7fe fb3e 	bl	80094a4 <xQueueGenericSendFromISR>
 800ae28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3728      	adds	r7, #40	@ 0x28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	200015cc 	.word	0x200015cc

0800ae38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b088      	sub	sp, #32
 800ae3c:	af02      	add	r7, sp, #8
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae42:	4b23      	ldr	r3, [pc, #140]	@ (800aed0 <prvProcessExpiredTimer+0x98>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fd fffd 	bl	8008e50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d023      	beq.n	800aeac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	699a      	ldr	r2, [r3, #24]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	18d1      	adds	r1, r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	6978      	ldr	r0, [r7, #20]
 800ae72:	f000 f8d5 	bl	800b020 <prvInsertTimerInActiveList>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d020      	beq.n	800aebe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	2300      	movs	r3, #0
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	2100      	movs	r1, #0
 800ae86:	6978      	ldr	r0, [r7, #20]
 800ae88:	f7ff ff88 	bl	800ad9c <xTimerGenericCommand>
 800ae8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d114      	bne.n	800aebe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60fb      	str	r3, [r7, #12]
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	e7fd      	b.n	800aea8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeb2:	f023 0301 	bic.w	r3, r3, #1
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	6978      	ldr	r0, [r7, #20]
 800aec4:	4798      	blx	r3
}
 800aec6:	bf00      	nop
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	200015c4 	.word	0x200015c4

0800aed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aedc:	f107 0308 	add.w	r3, r7, #8
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 f859 	bl	800af98 <prvGetNextExpireTime>
 800aee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4619      	mov	r1, r3
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f805 	bl	800aefc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aef2:	f000 f8d7 	bl	800b0a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aef6:	bf00      	nop
 800aef8:	e7f0      	b.n	800aedc <prvTimerTask+0x8>
	...

0800aefc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af06:	f7ff f927 	bl	800a158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f866 	bl	800afe0 <prvSampleTimeNow>
 800af14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d130      	bne.n	800af7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <prvProcessTimerOrBlockTask+0x3c>
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	429a      	cmp	r2, r3
 800af28:	d806      	bhi.n	800af38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af2a:	f7ff f923 	bl	800a174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff ff81 	bl	800ae38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af36:	e024      	b.n	800af82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d008      	beq.n	800af50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af3e:	4b13      	ldr	r3, [pc, #76]	@ (800af8c <prvProcessTimerOrBlockTask+0x90>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <prvProcessTimerOrBlockTask+0x50>
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <prvProcessTimerOrBlockTask+0x52>
 800af4c:	2300      	movs	r3, #0
 800af4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af50:	4b0f      	ldr	r3, [pc, #60]	@ (800af90 <prvProcessTimerOrBlockTask+0x94>)
 800af52:	6818      	ldr	r0, [r3, #0]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	4619      	mov	r1, r3
 800af5e:	f7fe fe83 	bl	8009c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af62:	f7ff f907 	bl	800a174 <xTaskResumeAll>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10a      	bne.n	800af82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af6c:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <prvProcessTimerOrBlockTask+0x98>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	f3bf 8f6f 	isb	sy
}
 800af7c:	e001      	b.n	800af82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af7e:	f7ff f8f9 	bl	800a174 <xTaskResumeAll>
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200015c8 	.word	0x200015c8
 800af90:	200015cc 	.word	0x200015cc
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afa0:	4b0e      	ldr	r3, [pc, #56]	@ (800afdc <prvGetNextExpireTime+0x44>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <prvGetNextExpireTime+0x16>
 800afaa:	2201      	movs	r2, #1
 800afac:	e000      	b.n	800afb0 <prvGetNextExpireTime+0x18>
 800afae:	2200      	movs	r2, #0
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d105      	bne.n	800afc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afbc:	4b07      	ldr	r3, [pc, #28]	@ (800afdc <prvGetNextExpireTime+0x44>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	e001      	b.n	800afcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afcc:	68fb      	ldr	r3, [r7, #12]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	200015c4 	.word	0x200015c4

0800afe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afe8:	f7ff f962 	bl	800a2b0 <xTaskGetTickCount>
 800afec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afee:	4b0b      	ldr	r3, [pc, #44]	@ (800b01c <prvSampleTimeNow+0x3c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d205      	bcs.n	800b004 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aff8:	f000 f93a 	bl	800b270 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	e002      	b.n	800b00a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b00a:	4a04      	ldr	r2, [pc, #16]	@ (800b01c <prvSampleTimeNow+0x3c>)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b010:	68fb      	ldr	r3, [r7, #12]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	200015d4 	.word	0x200015d4

0800b020 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	429a      	cmp	r2, r3
 800b044:	d812      	bhi.n	800b06c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	1ad2      	subs	r2, r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	429a      	cmp	r2, r3
 800b052:	d302      	bcc.n	800b05a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b054:	2301      	movs	r3, #1
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	e01b      	b.n	800b092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b05a:	4b10      	ldr	r3, [pc, #64]	@ (800b09c <prvInsertTimerInActiveList+0x7c>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3304      	adds	r3, #4
 800b062:	4619      	mov	r1, r3
 800b064:	4610      	mov	r0, r2
 800b066:	f7fd feba 	bl	8008dde <vListInsert>
 800b06a:	e012      	b.n	800b092 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d206      	bcs.n	800b082 <prvInsertTimerInActiveList+0x62>
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d302      	bcc.n	800b082 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	617b      	str	r3, [r7, #20]
 800b080:	e007      	b.n	800b092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b082:	4b07      	ldr	r3, [pc, #28]	@ (800b0a0 <prvInsertTimerInActiveList+0x80>)
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4610      	mov	r0, r2
 800b08e:	f7fd fea6 	bl	8008dde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b092:	697b      	ldr	r3, [r7, #20]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	200015c8 	.word	0x200015c8
 800b0a0:	200015c4 	.word	0x200015c4

0800b0a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08e      	sub	sp, #56	@ 0x38
 800b0a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0aa:	e0ce      	b.n	800b24a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	da19      	bge.n	800b0e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0b2:	1d3b      	adds	r3, r7, #4
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10b      	bne.n	800b0d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	61fb      	str	r3, [r7, #28]
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	e7fd      	b.n	800b0d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0dc:	6850      	ldr	r0, [r2, #4]
 800b0de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0e0:	6892      	ldr	r2, [r2, #8]
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f2c0 80ae 	blt.w	800b24a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d004      	beq.n	800b104 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fd fea6 	bl	8008e50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b104:	463b      	mov	r3, r7
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff ff6a 	bl	800afe0 <prvSampleTimeNow>
 800b10c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b09      	cmp	r3, #9
 800b112:	f200 8097 	bhi.w	800b244 <prvProcessReceivedCommands+0x1a0>
 800b116:	a201      	add	r2, pc, #4	@ (adr r2, 800b11c <prvProcessReceivedCommands+0x78>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b145 	.word	0x0800b145
 800b120:	0800b145 	.word	0x0800b145
 800b124:	0800b145 	.word	0x0800b145
 800b128:	0800b1bb 	.word	0x0800b1bb
 800b12c:	0800b1cf 	.word	0x0800b1cf
 800b130:	0800b21b 	.word	0x0800b21b
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b145 	.word	0x0800b145
 800b13c:	0800b1bb 	.word	0x0800b1bb
 800b140:	0800b1cf 	.word	0x0800b1cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b14a:	f043 0301 	orr.w	r3, r3, #1
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	18d1      	adds	r1, r2, r3
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b164:	f7ff ff5c 	bl	800b020 <prvInsertTimerInActiveList>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d06c      	beq.n	800b248 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b174:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b17c:	f003 0304 	and.w	r3, r3, #4
 800b180:	2b00      	cmp	r3, #0
 800b182:	d061      	beq.n	800b248 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	441a      	add	r2, r3
 800b18c:	2300      	movs	r3, #0
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	2300      	movs	r3, #0
 800b192:	2100      	movs	r1, #0
 800b194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b196:	f7ff fe01 	bl	800ad9c <xTimerGenericCommand>
 800b19a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d152      	bne.n	800b248 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	61bb      	str	r3, [r7, #24]
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop
 800b1b8:	e7fd      	b.n	800b1b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1c0:	f023 0301 	bic.w	r3, r3, #1
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b1cc:	e03d      	b.n	800b24a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1d4:	f043 0301 	orr.w	r3, r3, #1
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10b      	bne.n	800b206 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	617b      	str	r3, [r7, #20]
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	e7fd      	b.n	800b202 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20c:	18d1      	adds	r1, r2, r3
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b214:	f7ff ff04 	bl	800b020 <prvInsertTimerInActiveList>
					break;
 800b218:	e017      	b.n	800b24a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d103      	bne.n	800b230 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b22a:	f000 fbe5 	bl	800b9f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b22e:	e00c      	b.n	800b24a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b236:	f023 0301 	bic.w	r3, r3, #1
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b242:	e002      	b.n	800b24a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b244:	bf00      	nop
 800b246:	e000      	b.n	800b24a <prvProcessReceivedCommands+0x1a6>
					break;
 800b248:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b24a:	4b08      	ldr	r3, [pc, #32]	@ (800b26c <prvProcessReceivedCommands+0x1c8>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	1d39      	adds	r1, r7, #4
 800b250:	2200      	movs	r2, #0
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe f9c4 	bl	80095e0 <xQueueReceive>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f47f af26 	bne.w	800b0ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	3730      	adds	r7, #48	@ 0x30
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	200015cc 	.word	0x200015cc

0800b270 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b276:	e049      	b.n	800b30c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b278:	4b2e      	ldr	r3, [pc, #184]	@ (800b334 <prvSwitchTimerLists+0xc4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b282:	4b2c      	ldr	r3, [pc, #176]	@ (800b334 <prvSwitchTimerLists+0xc4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3304      	adds	r3, #4
 800b290:	4618      	mov	r0, r3
 800b292:	f7fd fddd 	bl	8008e50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d02f      	beq.n	800b30c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d90e      	bls.n	800b2dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800b334 <prvSwitchTimerLists+0xc4>)
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7fd fd82 	bl	8008dde <vListInsert>
 800b2da:	e017      	b.n	800b30c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	693a      	ldr	r2, [r7, #16]
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f7ff fd58 	bl	800ad9c <xTimerGenericCommand>
 800b2ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10b      	bne.n	800b30c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	603b      	str	r3, [r7, #0]
}
 800b306:	bf00      	nop
 800b308:	bf00      	nop
 800b30a:	e7fd      	b.n	800b308 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b30c:	4b09      	ldr	r3, [pc, #36]	@ (800b334 <prvSwitchTimerLists+0xc4>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1b0      	bne.n	800b278 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b316:	4b07      	ldr	r3, [pc, #28]	@ (800b334 <prvSwitchTimerLists+0xc4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b31c:	4b06      	ldr	r3, [pc, #24]	@ (800b338 <prvSwitchTimerLists+0xc8>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a04      	ldr	r2, [pc, #16]	@ (800b334 <prvSwitchTimerLists+0xc4>)
 800b322:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b324:	4a04      	ldr	r2, [pc, #16]	@ (800b338 <prvSwitchTimerLists+0xc8>)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	6013      	str	r3, [r2, #0]
}
 800b32a:	bf00      	nop
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	200015c4 	.word	0x200015c4
 800b338:	200015c8 	.word	0x200015c8

0800b33c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b342:	f000 f969 	bl	800b618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b346:	4b15      	ldr	r3, [pc, #84]	@ (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d120      	bne.n	800b390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b34e:	4814      	ldr	r0, [pc, #80]	@ (800b3a0 <prvCheckForValidListAndQueue+0x64>)
 800b350:	f7fd fcf4 	bl	8008d3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b354:	4813      	ldr	r0, [pc, #76]	@ (800b3a4 <prvCheckForValidListAndQueue+0x68>)
 800b356:	f7fd fcf1 	bl	8008d3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b35a:	4b13      	ldr	r3, [pc, #76]	@ (800b3a8 <prvCheckForValidListAndQueue+0x6c>)
 800b35c:	4a10      	ldr	r2, [pc, #64]	@ (800b3a0 <prvCheckForValidListAndQueue+0x64>)
 800b35e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b360:	4b12      	ldr	r3, [pc, #72]	@ (800b3ac <prvCheckForValidListAndQueue+0x70>)
 800b362:	4a10      	ldr	r2, [pc, #64]	@ (800b3a4 <prvCheckForValidListAndQueue+0x68>)
 800b364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b366:	2300      	movs	r3, #0
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	4b11      	ldr	r3, [pc, #68]	@ (800b3b0 <prvCheckForValidListAndQueue+0x74>)
 800b36c:	4a11      	ldr	r2, [pc, #68]	@ (800b3b4 <prvCheckForValidListAndQueue+0x78>)
 800b36e:	2110      	movs	r1, #16
 800b370:	200a      	movs	r0, #10
 800b372:	f7fd fe01 	bl	8008f78 <xQueueGenericCreateStatic>
 800b376:	4603      	mov	r3, r0
 800b378:	4a08      	ldr	r2, [pc, #32]	@ (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b37a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b37c:	4b07      	ldr	r3, [pc, #28]	@ (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b384:	4b05      	ldr	r3, [pc, #20]	@ (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	490b      	ldr	r1, [pc, #44]	@ (800b3b8 <prvCheckForValidListAndQueue+0x7c>)
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe fc42 	bl	8009c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b390:	f000 f974 	bl	800b67c <vPortExitCritical>
}
 800b394:	bf00      	nop
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	200015cc 	.word	0x200015cc
 800b3a0:	2000159c 	.word	0x2000159c
 800b3a4:	200015b0 	.word	0x200015b0
 800b3a8:	200015c4 	.word	0x200015c4
 800b3ac:	200015c8 	.word	0x200015c8
 800b3b0:	20001678 	.word	0x20001678
 800b3b4:	200015d8 	.word	0x200015d8
 800b3b8:	0800eca0 	.word	0x0800eca0

0800b3bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3b04      	subs	r3, #4
 800b3cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3b04      	subs	r3, #4
 800b3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f023 0201 	bic.w	r2, r3, #1
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3ec:	4a0c      	ldr	r2, [pc, #48]	@ (800b420 <pxPortInitialiseStack+0x64>)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3b14      	subs	r3, #20
 800b3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3b04      	subs	r3, #4
 800b402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f06f 0202 	mvn.w	r2, #2
 800b40a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3b20      	subs	r3, #32
 800b410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	0800b425 	.word	0x0800b425

0800b424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b42e:	4b13      	ldr	r3, [pc, #76]	@ (800b47c <prvTaskExitError+0x58>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b436:	d00b      	beq.n	800b450 <prvTaskExitError+0x2c>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60fb      	str	r3, [r7, #12]
}
 800b44a:	bf00      	nop
 800b44c:	bf00      	nop
 800b44e:	e7fd      	b.n	800b44c <prvTaskExitError+0x28>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60bb      	str	r3, [r7, #8]
}
 800b462:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b464:	bf00      	nop
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0fc      	beq.n	800b466 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	20000034 	.word	0x20000034

0800b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b480:	4b07      	ldr	r3, [pc, #28]	@ (800b4a0 <pxCurrentTCBConst2>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f380 8809 	msr	PSP, r0
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst2>:
 800b4a0:	2000109c 	.word	0x2000109c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4a8:	4808      	ldr	r0, [pc, #32]	@ (800b4cc <prvPortStartFirstTask+0x24>)
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f380 8808 	msr	MSP, r0
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8814 	msr	CONTROL, r0
 800b4ba:	b662      	cpsie	i
 800b4bc:	b661      	cpsie	f
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	df00      	svc	0
 800b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ca:	bf00      	nop
 800b4cc:	e000ed08 	.word	0xe000ed08

0800b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4d6:	4b47      	ldr	r3, [pc, #284]	@ (800b5f4 <xPortStartScheduler+0x124>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a47      	ldr	r2, [pc, #284]	@ (800b5f8 <xPortStartScheduler+0x128>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d10b      	bne.n	800b4f8 <xPortStartScheduler+0x28>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	e7fd      	b.n	800b4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f4 <xPortStartScheduler+0x124>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800b5fc <xPortStartScheduler+0x12c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10b      	bne.n	800b51a <xPortStartScheduler+0x4a>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	60fb      	str	r3, [r7, #12]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b51a:	4b39      	ldr	r3, [pc, #228]	@ (800b600 <xPortStartScheduler+0x130>)
 800b51c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	22ff      	movs	r2, #255	@ 0xff
 800b52a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	4b31      	ldr	r3, [pc, #196]	@ (800b604 <xPortStartScheduler+0x134>)
 800b540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b542:	4b31      	ldr	r3, [pc, #196]	@ (800b608 <xPortStartScheduler+0x138>)
 800b544:	2207      	movs	r2, #7
 800b546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b548:	e009      	b.n	800b55e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b54a:	4b2f      	ldr	r3, [pc, #188]	@ (800b608 <xPortStartScheduler+0x138>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3b01      	subs	r3, #1
 800b550:	4a2d      	ldr	r2, [pc, #180]	@ (800b608 <xPortStartScheduler+0x138>)
 800b552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b554:	78fb      	ldrb	r3, [r7, #3]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b55e:	78fb      	ldrb	r3, [r7, #3]
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b566:	2b80      	cmp	r3, #128	@ 0x80
 800b568:	d0ef      	beq.n	800b54a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b56a:	4b27      	ldr	r3, [pc, #156]	@ (800b608 <xPortStartScheduler+0x138>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f1c3 0307 	rsb	r3, r3, #7
 800b572:	2b04      	cmp	r3, #4
 800b574:	d00b      	beq.n	800b58e <xPortStartScheduler+0xbe>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	60bb      	str	r3, [r7, #8]
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b58e:	4b1e      	ldr	r3, [pc, #120]	@ (800b608 <xPortStartScheduler+0x138>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	021b      	lsls	r3, r3, #8
 800b594:	4a1c      	ldr	r2, [pc, #112]	@ (800b608 <xPortStartScheduler+0x138>)
 800b596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b598:	4b1b      	ldr	r3, [pc, #108]	@ (800b608 <xPortStartScheduler+0x138>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5a0:	4a19      	ldr	r2, [pc, #100]	@ (800b608 <xPortStartScheduler+0x138>)
 800b5a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5ac:	4b17      	ldr	r3, [pc, #92]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a16      	ldr	r2, [pc, #88]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b5b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5b8:	4b14      	ldr	r3, [pc, #80]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a13      	ldr	r2, [pc, #76]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b5c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5c4:	f000 f8da 	bl	800b77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5c8:	4b11      	ldr	r3, [pc, #68]	@ (800b610 <xPortStartScheduler+0x140>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5ce:	f000 f8f9 	bl	800b7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5d2:	4b10      	ldr	r3, [pc, #64]	@ (800b614 <xPortStartScheduler+0x144>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b614 <xPortStartScheduler+0x144>)
 800b5d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b5dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5de:	f7ff ff63 	bl	800b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5e2:	f7fe ff2f 	bl	800a444 <vTaskSwitchContext>
	prvTaskExitError();
 800b5e6:	f7ff ff1d 	bl	800b424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	e000ed00 	.word	0xe000ed00
 800b5f8:	410fc271 	.word	0x410fc271
 800b5fc:	410fc270 	.word	0x410fc270
 800b600:	e000e400 	.word	0xe000e400
 800b604:	200016c8 	.word	0x200016c8
 800b608:	200016cc 	.word	0x200016cc
 800b60c:	e000ed20 	.word	0xe000ed20
 800b610:	20000034 	.word	0x20000034
 800b614:	e000ef34 	.word	0xe000ef34

0800b618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b632:	4b10      	ldr	r3, [pc, #64]	@ (800b674 <vPortEnterCritical+0x5c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	4a0e      	ldr	r2, [pc, #56]	@ (800b674 <vPortEnterCritical+0x5c>)
 800b63a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b63c:	4b0d      	ldr	r3, [pc, #52]	@ (800b674 <vPortEnterCritical+0x5c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d110      	bne.n	800b666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b644:	4b0c      	ldr	r3, [pc, #48]	@ (800b678 <vPortEnterCritical+0x60>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <vPortEnterCritical+0x4e>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	603b      	str	r3, [r7, #0]
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	e7fd      	b.n	800b662 <vPortEnterCritical+0x4a>
	}
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20000034 	.word	0x20000034
 800b678:	e000ed04 	.word	0xe000ed04

0800b67c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b682:	4b12      	ldr	r3, [pc, #72]	@ (800b6cc <vPortExitCritical+0x50>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10b      	bne.n	800b6a2 <vPortExitCritical+0x26>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	607b      	str	r3, [r7, #4]
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	e7fd      	b.n	800b69e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <vPortExitCritical+0x50>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	4a08      	ldr	r2, [pc, #32]	@ (800b6cc <vPortExitCritical+0x50>)
 800b6aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6ac:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <vPortExitCritical+0x50>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d105      	bne.n	800b6c0 <vPortExitCritical+0x44>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	f383 8811 	msr	BASEPRI, r3
}
 800b6be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	20000034 	.word	0x20000034

0800b6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6d0:	f3ef 8009 	mrs	r0, PSP
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4b15      	ldr	r3, [pc, #84]	@ (800b730 <pxCurrentTCBConst>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	f01e 0f10 	tst.w	lr, #16
 800b6e0:	bf08      	it	eq
 800b6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6f4:	f380 8811 	msr	BASEPRI, r0
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f7fe fea0 	bl	800a444 <vTaskSwitchContext>
 800b704:	f04f 0000 	mov.w	r0, #0
 800b708:	f380 8811 	msr	BASEPRI, r0
 800b70c:	bc09      	pop	{r0, r3}
 800b70e:	6819      	ldr	r1, [r3, #0]
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	f01e 0f10 	tst.w	lr, #16
 800b71a:	bf08      	it	eq
 800b71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b720:	f380 8809 	msr	PSP, r0
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst>:
 800b730:	2000109c 	.word	0x2000109c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	607b      	str	r3, [r7, #4]
}
 800b750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b752:	f7fe fdbd 	bl	800a2d0 <xTaskIncrementTick>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b75c:	4b06      	ldr	r3, [pc, #24]	@ (800b778 <xPortSysTickHandler+0x40>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f383 8811 	msr	BASEPRI, r3
}
 800b76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b780:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b786:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b4 <vPortSetupTimerInterrupt+0x38>)
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b8 <vPortSetupTimerInterrupt+0x3c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0a      	ldr	r2, [pc, #40]	@ (800b7bc <vPortSetupTimerInterrupt+0x40>)
 800b792:	fba2 2303 	umull	r2, r3, r2, r3
 800b796:	099b      	lsrs	r3, r3, #6
 800b798:	4a09      	ldr	r2, [pc, #36]	@ (800b7c0 <vPortSetupTimerInterrupt+0x44>)
 800b79a:	3b01      	subs	r3, #1
 800b79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b79e:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b7a0:	2207      	movs	r2, #7
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000e010 	.word	0xe000e010
 800b7b4:	e000e018 	.word	0xe000e018
 800b7b8:	20000028 	.word	0x20000028
 800b7bc:	10624dd3 	.word	0x10624dd3
 800b7c0:	e000e014 	.word	0xe000e014

0800b7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b7d4 <vPortEnableVFP+0x10>
 800b7c8:	6801      	ldr	r1, [r0, #0]
 800b7ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b7ce:	6001      	str	r1, [r0, #0]
 800b7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7d2:	bf00      	nop
 800b7d4:	e000ed88 	.word	0xe000ed88

0800b7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7de:	f3ef 8305 	mrs	r3, IPSR
 800b7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d915      	bls.n	800b816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7ea:	4a18      	ldr	r2, [pc, #96]	@ (800b84c <vPortValidateInterruptPriority+0x74>)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7f4:	4b16      	ldr	r3, [pc, #88]	@ (800b850 <vPortValidateInterruptPriority+0x78>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	7afa      	ldrb	r2, [r7, #11]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d20b      	bcs.n	800b816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
 800b812:	bf00      	nop
 800b814:	e7fd      	b.n	800b812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b816:	4b0f      	ldr	r3, [pc, #60]	@ (800b854 <vPortValidateInterruptPriority+0x7c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b81e:	4b0e      	ldr	r3, [pc, #56]	@ (800b858 <vPortValidateInterruptPriority+0x80>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d90b      	bls.n	800b83e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	603b      	str	r3, [r7, #0]
}
 800b838:	bf00      	nop
 800b83a:	bf00      	nop
 800b83c:	e7fd      	b.n	800b83a <vPortValidateInterruptPriority+0x62>
	}
 800b83e:	bf00      	nop
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	e000e3f0 	.word	0xe000e3f0
 800b850:	200016c8 	.word	0x200016c8
 800b854:	e000ed0c 	.word	0xe000ed0c
 800b858:	200016cc 	.word	0x200016cc

0800b85c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	@ 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b864:	2300      	movs	r3, #0
 800b866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b868:	f7fe fc76 	bl	800a158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b86c:	4b5c      	ldr	r3, [pc, #368]	@ (800b9e0 <pvPortMalloc+0x184>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b874:	f000 f924 	bl	800bac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b878:	4b5a      	ldr	r3, [pc, #360]	@ (800b9e4 <pvPortMalloc+0x188>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4013      	ands	r3, r2
 800b880:	2b00      	cmp	r3, #0
 800b882:	f040 8095 	bne.w	800b9b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01e      	beq.n	800b8ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b88c:	2208      	movs	r2, #8
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4413      	add	r3, r2
 800b892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f003 0307 	and.w	r3, r3, #7
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d015      	beq.n	800b8ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f023 0307 	bic.w	r3, r3, #7
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00b      	beq.n	800b8ca <pvPortMalloc+0x6e>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	617b      	str	r3, [r7, #20]
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	e7fd      	b.n	800b8c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d06f      	beq.n	800b9b0 <pvPortMalloc+0x154>
 800b8d0:	4b45      	ldr	r3, [pc, #276]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d86a      	bhi.n	800b9b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8da:	4b44      	ldr	r3, [pc, #272]	@ (800b9ec <pvPortMalloc+0x190>)
 800b8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8de:	4b43      	ldr	r3, [pc, #268]	@ (800b9ec <pvPortMalloc+0x190>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8e4:	e004      	b.n	800b8f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d903      	bls.n	800b902 <pvPortMalloc+0xa6>
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f1      	bne.n	800b8e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b902:	4b37      	ldr	r3, [pc, #220]	@ (800b9e0 <pvPortMalloc+0x184>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b908:	429a      	cmp	r2, r3
 800b90a:	d051      	beq.n	800b9b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2208      	movs	r2, #8
 800b912:	4413      	add	r3, r2
 800b914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	1ad2      	subs	r2, r2, r3
 800b926:	2308      	movs	r3, #8
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d920      	bls.n	800b970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4413      	add	r3, r2
 800b934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	f003 0307 	and.w	r3, r3, #7
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <pvPortMalloc+0xfc>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	613b      	str	r3, [r7, #16]
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	e7fd      	b.n	800b954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b96a:	69b8      	ldr	r0, [r7, #24]
 800b96c:	f000 f90a 	bl	800bb84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b970:	4b1d      	ldr	r3, [pc, #116]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	4a1b      	ldr	r2, [pc, #108]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b97c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b97e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f0 <pvPortMalloc+0x194>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d203      	bcs.n	800b992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b98a:	4b17      	ldr	r3, [pc, #92]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a18      	ldr	r2, [pc, #96]	@ (800b9f0 <pvPortMalloc+0x194>)
 800b990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	4b13      	ldr	r3, [pc, #76]	@ (800b9e4 <pvPortMalloc+0x188>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9a6:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <pvPortMalloc+0x198>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	4a11      	ldr	r2, [pc, #68]	@ (800b9f4 <pvPortMalloc+0x198>)
 800b9ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9b0:	f7fe fbe0 	bl	800a174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00b      	beq.n	800b9d6 <pvPortMalloc+0x17a>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60fb      	str	r3, [r7, #12]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <pvPortMalloc+0x176>
	return pvReturn;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3728      	adds	r7, #40	@ 0x28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	200052d8 	.word	0x200052d8
 800b9e4:	200052ec 	.word	0x200052ec
 800b9e8:	200052dc 	.word	0x200052dc
 800b9ec:	200052d0 	.word	0x200052d0
 800b9f0:	200052e0 	.word	0x200052e0
 800b9f4:	200052e4 	.word	0x200052e4

0800b9f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d04f      	beq.n	800baaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	425b      	negs	r3, r3
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4413      	add	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	4b25      	ldr	r3, [pc, #148]	@ (800bab4 <vPortFree+0xbc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4013      	ands	r3, r2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10b      	bne.n	800ba3e <vPortFree+0x46>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60fb      	str	r3, [r7, #12]
}
 800ba38:	bf00      	nop
 800ba3a:	bf00      	nop
 800ba3c:	e7fd      	b.n	800ba3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00b      	beq.n	800ba5e <vPortFree+0x66>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	60bb      	str	r3, [r7, #8]
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	e7fd      	b.n	800ba5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	685a      	ldr	r2, [r3, #4]
 800ba62:	4b14      	ldr	r3, [pc, #80]	@ (800bab4 <vPortFree+0xbc>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4013      	ands	r3, r2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01e      	beq.n	800baaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11a      	bne.n	800baaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	4b0e      	ldr	r3, [pc, #56]	@ (800bab4 <vPortFree+0xbc>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	43db      	mvns	r3, r3
 800ba7e:	401a      	ands	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba84:	f7fe fb68 	bl	800a158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bab8 <vPortFree+0xc0>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4413      	add	r3, r2
 800ba92:	4a09      	ldr	r2, [pc, #36]	@ (800bab8 <vPortFree+0xc0>)
 800ba94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f000 f874 	bl	800bb84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba9c:	4b07      	ldr	r3, [pc, #28]	@ (800babc <vPortFree+0xc4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3301      	adds	r3, #1
 800baa2:	4a06      	ldr	r2, [pc, #24]	@ (800babc <vPortFree+0xc4>)
 800baa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800baa6:	f7fe fb65 	bl	800a174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baaa:	bf00      	nop
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	200052ec 	.word	0x200052ec
 800bab8:	200052dc 	.word	0x200052dc
 800babc:	200052e8 	.word	0x200052e8

0800bac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bac6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800baca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bacc:	4b27      	ldr	r3, [pc, #156]	@ (800bb6c <prvHeapInit+0xac>)
 800bace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f003 0307 	and.w	r3, r3, #7
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00c      	beq.n	800baf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3307      	adds	r3, #7
 800bade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f023 0307 	bic.w	r3, r3, #7
 800bae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	4a1f      	ldr	r2, [pc, #124]	@ (800bb6c <prvHeapInit+0xac>)
 800baf0:	4413      	add	r3, r2
 800baf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb70 <prvHeapInit+0xb0>)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bafe:	4b1c      	ldr	r3, [pc, #112]	@ (800bb70 <prvHeapInit+0xb0>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	4413      	add	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb0c:	2208      	movs	r2, #8
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	1a9b      	subs	r3, r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4a15      	ldr	r2, [pc, #84]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb22:	4b14      	ldr	r3, [pc, #80]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2200      	movs	r2, #0
 800bb28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb2a:	4b12      	ldr	r3, [pc, #72]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	1ad2      	subs	r2, r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb40:	4b0c      	ldr	r3, [pc, #48]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	4a0a      	ldr	r2, [pc, #40]	@ (800bb78 <prvHeapInit+0xb8>)
 800bb4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	4a09      	ldr	r2, [pc, #36]	@ (800bb7c <prvHeapInit+0xbc>)
 800bb56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb58:	4b09      	ldr	r3, [pc, #36]	@ (800bb80 <prvHeapInit+0xc0>)
 800bb5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bb5e:	601a      	str	r2, [r3, #0]
}
 800bb60:	bf00      	nop
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	200016d0 	.word	0x200016d0
 800bb70:	200052d0 	.word	0x200052d0
 800bb74:	200052d8 	.word	0x200052d8
 800bb78:	200052e0 	.word	0x200052e0
 800bb7c:	200052dc 	.word	0x200052dc
 800bb80:	200052ec 	.word	0x200052ec

0800bb84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb8c:	4b28      	ldr	r3, [pc, #160]	@ (800bc30 <prvInsertBlockIntoFreeList+0xac>)
 800bb8e:	60fb      	str	r3, [r7, #12]
 800bb90:	e002      	b.n	800bb98 <prvInsertBlockIntoFreeList+0x14>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d8f7      	bhi.n	800bb92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	4413      	add	r3, r2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d108      	bne.n	800bbc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	441a      	add	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	441a      	add	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d118      	bne.n	800bc0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b15      	ldr	r3, [pc, #84]	@ (800bc34 <prvInsertBlockIntoFreeList+0xb0>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d00d      	beq.n	800bc02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	441a      	add	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	e008      	b.n	800bc14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc02:	4b0c      	ldr	r3, [pc, #48]	@ (800bc34 <prvInsertBlockIntoFreeList+0xb0>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	e003      	b.n	800bc14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d002      	beq.n	800bc22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc22:	bf00      	nop
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	200052d0 	.word	0x200052d0
 800bc34:	200052d8 	.word	0x200052d8

0800bc38 <atoi>:
 800bc38:	220a      	movs	r2, #10
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f000 bdca 	b.w	800c7d4 <strtol>

0800bc40 <__cvt>:
 800bc40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc44:	ec57 6b10 	vmov	r6, r7, d0
 800bc48:	2f00      	cmp	r7, #0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	463b      	mov	r3, r7
 800bc50:	bfbb      	ittet	lt
 800bc52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bc56:	461f      	movlt	r7, r3
 800bc58:	2300      	movge	r3, #0
 800bc5a:	232d      	movlt	r3, #45	@ 0x2d
 800bc5c:	700b      	strb	r3, [r1, #0]
 800bc5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bc64:	4691      	mov	r9, r2
 800bc66:	f023 0820 	bic.w	r8, r3, #32
 800bc6a:	bfbc      	itt	lt
 800bc6c:	4632      	movlt	r2, r6
 800bc6e:	4616      	movlt	r6, r2
 800bc70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc74:	d005      	beq.n	800bc82 <__cvt+0x42>
 800bc76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc7a:	d100      	bne.n	800bc7e <__cvt+0x3e>
 800bc7c:	3401      	adds	r4, #1
 800bc7e:	2102      	movs	r1, #2
 800bc80:	e000      	b.n	800bc84 <__cvt+0x44>
 800bc82:	2103      	movs	r1, #3
 800bc84:	ab03      	add	r3, sp, #12
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	ab02      	add	r3, sp, #8
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	ec47 6b10 	vmov	d0, r6, r7
 800bc90:	4653      	mov	r3, sl
 800bc92:	4622      	mov	r2, r4
 800bc94:	f000 feac 	bl	800c9f0 <_dtoa_r>
 800bc98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	d119      	bne.n	800bcd4 <__cvt+0x94>
 800bca0:	f019 0f01 	tst.w	r9, #1
 800bca4:	d00e      	beq.n	800bcc4 <__cvt+0x84>
 800bca6:	eb00 0904 	add.w	r9, r0, r4
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2300      	movs	r3, #0
 800bcae:	4630      	mov	r0, r6
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	f7f4 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcb6:	b108      	cbz	r0, 800bcbc <__cvt+0x7c>
 800bcb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcbc:	2230      	movs	r2, #48	@ 0x30
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	454b      	cmp	r3, r9
 800bcc2:	d31e      	bcc.n	800bd02 <__cvt+0xc2>
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcc8:	1b5b      	subs	r3, r3, r5
 800bcca:	4628      	mov	r0, r5
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	b004      	add	sp, #16
 800bcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bcd8:	eb00 0904 	add.w	r9, r0, r4
 800bcdc:	d1e5      	bne.n	800bcaa <__cvt+0x6a>
 800bcde:	7803      	ldrb	r3, [r0, #0]
 800bce0:	2b30      	cmp	r3, #48	@ 0x30
 800bce2:	d10a      	bne.n	800bcfa <__cvt+0xba>
 800bce4:	2200      	movs	r2, #0
 800bce6:	2300      	movs	r3, #0
 800bce8:	4630      	mov	r0, r6
 800bcea:	4639      	mov	r1, r7
 800bcec:	f7f4 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf0:	b918      	cbnz	r0, 800bcfa <__cvt+0xba>
 800bcf2:	f1c4 0401 	rsb	r4, r4, #1
 800bcf6:	f8ca 4000 	str.w	r4, [sl]
 800bcfa:	f8da 3000 	ldr.w	r3, [sl]
 800bcfe:	4499      	add	r9, r3
 800bd00:	e7d3      	b.n	800bcaa <__cvt+0x6a>
 800bd02:	1c59      	adds	r1, r3, #1
 800bd04:	9103      	str	r1, [sp, #12]
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	e7d9      	b.n	800bcbe <__cvt+0x7e>

0800bd0a <__exponent>:
 800bd0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	bfba      	itte	lt
 800bd10:	4249      	neglt	r1, r1
 800bd12:	232d      	movlt	r3, #45	@ 0x2d
 800bd14:	232b      	movge	r3, #43	@ 0x2b
 800bd16:	2909      	cmp	r1, #9
 800bd18:	7002      	strb	r2, [r0, #0]
 800bd1a:	7043      	strb	r3, [r0, #1]
 800bd1c:	dd29      	ble.n	800bd72 <__exponent+0x68>
 800bd1e:	f10d 0307 	add.w	r3, sp, #7
 800bd22:	461d      	mov	r5, r3
 800bd24:	270a      	movs	r7, #10
 800bd26:	461a      	mov	r2, r3
 800bd28:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd2c:	fb07 1416 	mls	r4, r7, r6, r1
 800bd30:	3430      	adds	r4, #48	@ 0x30
 800bd32:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bd36:	460c      	mov	r4, r1
 800bd38:	2c63      	cmp	r4, #99	@ 0x63
 800bd3a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bd3e:	4631      	mov	r1, r6
 800bd40:	dcf1      	bgt.n	800bd26 <__exponent+0x1c>
 800bd42:	3130      	adds	r1, #48	@ 0x30
 800bd44:	1e94      	subs	r4, r2, #2
 800bd46:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd4a:	1c41      	adds	r1, r0, #1
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	42ab      	cmp	r3, r5
 800bd50:	d30a      	bcc.n	800bd68 <__exponent+0x5e>
 800bd52:	f10d 0309 	add.w	r3, sp, #9
 800bd56:	1a9b      	subs	r3, r3, r2
 800bd58:	42ac      	cmp	r4, r5
 800bd5a:	bf88      	it	hi
 800bd5c:	2300      	movhi	r3, #0
 800bd5e:	3302      	adds	r3, #2
 800bd60:	4403      	add	r3, r0
 800bd62:	1a18      	subs	r0, r3, r0
 800bd64:	b003      	add	sp, #12
 800bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd68:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd70:	e7ed      	b.n	800bd4e <__exponent+0x44>
 800bd72:	2330      	movs	r3, #48	@ 0x30
 800bd74:	3130      	adds	r1, #48	@ 0x30
 800bd76:	7083      	strb	r3, [r0, #2]
 800bd78:	70c1      	strb	r1, [r0, #3]
 800bd7a:	1d03      	adds	r3, r0, #4
 800bd7c:	e7f1      	b.n	800bd62 <__exponent+0x58>
	...

0800bd80 <_printf_float>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	b08d      	sub	sp, #52	@ 0x34
 800bd86:	460c      	mov	r4, r1
 800bd88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd8c:	4616      	mov	r6, r2
 800bd8e:	461f      	mov	r7, r3
 800bd90:	4605      	mov	r5, r0
 800bd92:	f000 fd63 	bl	800c85c <_localeconv_r>
 800bd96:	6803      	ldr	r3, [r0, #0]
 800bd98:	9304      	str	r3, [sp, #16]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f4 fa68 	bl	8000270 <strlen>
 800bda0:	2300      	movs	r3, #0
 800bda2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bda4:	f8d8 3000 	ldr.w	r3, [r8]
 800bda8:	9005      	str	r0, [sp, #20]
 800bdaa:	3307      	adds	r3, #7
 800bdac:	f023 0307 	bic.w	r3, r3, #7
 800bdb0:	f103 0208 	add.w	r2, r3, #8
 800bdb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bdb8:	f8d4 b000 	ldr.w	fp, [r4]
 800bdbc:	f8c8 2000 	str.w	r2, [r8]
 800bdc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bdc8:	9307      	str	r3, [sp, #28]
 800bdca:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bdd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdd6:	4b9c      	ldr	r3, [pc, #624]	@ (800c048 <_printf_float+0x2c8>)
 800bdd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bddc:	f7f4 fea6 	bl	8000b2c <__aeabi_dcmpun>
 800bde0:	bb70      	cbnz	r0, 800be40 <_printf_float+0xc0>
 800bde2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bde6:	4b98      	ldr	r3, [pc, #608]	@ (800c048 <_printf_float+0x2c8>)
 800bde8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdec:	f7f4 fe80 	bl	8000af0 <__aeabi_dcmple>
 800bdf0:	bb30      	cbnz	r0, 800be40 <_printf_float+0xc0>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fe6f 	bl	8000adc <__aeabi_dcmplt>
 800bdfe:	b110      	cbz	r0, 800be06 <_printf_float+0x86>
 800be00:	232d      	movs	r3, #45	@ 0x2d
 800be02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be06:	4a91      	ldr	r2, [pc, #580]	@ (800c04c <_printf_float+0x2cc>)
 800be08:	4b91      	ldr	r3, [pc, #580]	@ (800c050 <_printf_float+0x2d0>)
 800be0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800be0e:	bf94      	ite	ls
 800be10:	4690      	movls	r8, r2
 800be12:	4698      	movhi	r8, r3
 800be14:	2303      	movs	r3, #3
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	f02b 0304 	bic.w	r3, fp, #4
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	f04f 0900 	mov.w	r9, #0
 800be22:	9700      	str	r7, [sp, #0]
 800be24:	4633      	mov	r3, r6
 800be26:	aa0b      	add	r2, sp, #44	@ 0x2c
 800be28:	4621      	mov	r1, r4
 800be2a:	4628      	mov	r0, r5
 800be2c:	f000 f9d2 	bl	800c1d4 <_printf_common>
 800be30:	3001      	adds	r0, #1
 800be32:	f040 808d 	bne.w	800bf50 <_printf_float+0x1d0>
 800be36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be3a:	b00d      	add	sp, #52	@ 0x34
 800be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be40:	4642      	mov	r2, r8
 800be42:	464b      	mov	r3, r9
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f7f4 fe70 	bl	8000b2c <__aeabi_dcmpun>
 800be4c:	b140      	cbz	r0, 800be60 <_printf_float+0xe0>
 800be4e:	464b      	mov	r3, r9
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfbc      	itt	lt
 800be54:	232d      	movlt	r3, #45	@ 0x2d
 800be56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be5a:	4a7e      	ldr	r2, [pc, #504]	@ (800c054 <_printf_float+0x2d4>)
 800be5c:	4b7e      	ldr	r3, [pc, #504]	@ (800c058 <_printf_float+0x2d8>)
 800be5e:	e7d4      	b.n	800be0a <_printf_float+0x8a>
 800be60:	6863      	ldr	r3, [r4, #4]
 800be62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800be66:	9206      	str	r2, [sp, #24]
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	d13b      	bne.n	800bee4 <_printf_float+0x164>
 800be6c:	2306      	movs	r3, #6
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800be74:	2300      	movs	r3, #0
 800be76:	6022      	str	r2, [r4, #0]
 800be78:	9303      	str	r3, [sp, #12]
 800be7a:	ab0a      	add	r3, sp, #40	@ 0x28
 800be7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be80:	ab09      	add	r3, sp, #36	@ 0x24
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	6861      	ldr	r1, [r4, #4]
 800be86:	ec49 8b10 	vmov	d0, r8, r9
 800be8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be8e:	4628      	mov	r0, r5
 800be90:	f7ff fed6 	bl	800bc40 <__cvt>
 800be94:	9b06      	ldr	r3, [sp, #24]
 800be96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be98:	2b47      	cmp	r3, #71	@ 0x47
 800be9a:	4680      	mov	r8, r0
 800be9c:	d129      	bne.n	800bef2 <_printf_float+0x172>
 800be9e:	1cc8      	adds	r0, r1, #3
 800bea0:	db02      	blt.n	800bea8 <_printf_float+0x128>
 800bea2:	6863      	ldr	r3, [r4, #4]
 800bea4:	4299      	cmp	r1, r3
 800bea6:	dd41      	ble.n	800bf2c <_printf_float+0x1ac>
 800bea8:	f1aa 0a02 	sub.w	sl, sl, #2
 800beac:	fa5f fa8a 	uxtb.w	sl, sl
 800beb0:	3901      	subs	r1, #1
 800beb2:	4652      	mov	r2, sl
 800beb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800beb8:	9109      	str	r1, [sp, #36]	@ 0x24
 800beba:	f7ff ff26 	bl	800bd0a <__exponent>
 800bebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bec0:	1813      	adds	r3, r2, r0
 800bec2:	2a01      	cmp	r2, #1
 800bec4:	4681      	mov	r9, r0
 800bec6:	6123      	str	r3, [r4, #16]
 800bec8:	dc02      	bgt.n	800bed0 <_printf_float+0x150>
 800beca:	6822      	ldr	r2, [r4, #0]
 800becc:	07d2      	lsls	r2, r2, #31
 800bece:	d501      	bpl.n	800bed4 <_printf_float+0x154>
 800bed0:	3301      	adds	r3, #1
 800bed2:	6123      	str	r3, [r4, #16]
 800bed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d0a2      	beq.n	800be22 <_printf_float+0xa2>
 800bedc:	232d      	movs	r3, #45	@ 0x2d
 800bede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bee2:	e79e      	b.n	800be22 <_printf_float+0xa2>
 800bee4:	9a06      	ldr	r2, [sp, #24]
 800bee6:	2a47      	cmp	r2, #71	@ 0x47
 800bee8:	d1c2      	bne.n	800be70 <_printf_float+0xf0>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1c0      	bne.n	800be70 <_printf_float+0xf0>
 800beee:	2301      	movs	r3, #1
 800bef0:	e7bd      	b.n	800be6e <_printf_float+0xee>
 800bef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bef6:	d9db      	bls.n	800beb0 <_printf_float+0x130>
 800bef8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800befc:	d118      	bne.n	800bf30 <_printf_float+0x1b0>
 800befe:	2900      	cmp	r1, #0
 800bf00:	6863      	ldr	r3, [r4, #4]
 800bf02:	dd0b      	ble.n	800bf1c <_printf_float+0x19c>
 800bf04:	6121      	str	r1, [r4, #16]
 800bf06:	b913      	cbnz	r3, 800bf0e <_printf_float+0x18e>
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	07d0      	lsls	r0, r2, #31
 800bf0c:	d502      	bpl.n	800bf14 <_printf_float+0x194>
 800bf0e:	3301      	adds	r3, #1
 800bf10:	440b      	add	r3, r1
 800bf12:	6123      	str	r3, [r4, #16]
 800bf14:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bf16:	f04f 0900 	mov.w	r9, #0
 800bf1a:	e7db      	b.n	800bed4 <_printf_float+0x154>
 800bf1c:	b913      	cbnz	r3, 800bf24 <_printf_float+0x1a4>
 800bf1e:	6822      	ldr	r2, [r4, #0]
 800bf20:	07d2      	lsls	r2, r2, #31
 800bf22:	d501      	bpl.n	800bf28 <_printf_float+0x1a8>
 800bf24:	3302      	adds	r3, #2
 800bf26:	e7f4      	b.n	800bf12 <_printf_float+0x192>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e7f2      	b.n	800bf12 <_printf_float+0x192>
 800bf2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bf30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf32:	4299      	cmp	r1, r3
 800bf34:	db05      	blt.n	800bf42 <_printf_float+0x1c2>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	6121      	str	r1, [r4, #16]
 800bf3a:	07d8      	lsls	r0, r3, #31
 800bf3c:	d5ea      	bpl.n	800bf14 <_printf_float+0x194>
 800bf3e:	1c4b      	adds	r3, r1, #1
 800bf40:	e7e7      	b.n	800bf12 <_printf_float+0x192>
 800bf42:	2900      	cmp	r1, #0
 800bf44:	bfd4      	ite	le
 800bf46:	f1c1 0202 	rsble	r2, r1, #2
 800bf4a:	2201      	movgt	r2, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	e7e0      	b.n	800bf12 <_printf_float+0x192>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	055a      	lsls	r2, r3, #21
 800bf54:	d407      	bmi.n	800bf66 <_printf_float+0x1e6>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	4642      	mov	r2, r8
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	47b8      	blx	r7
 800bf60:	3001      	adds	r0, #1
 800bf62:	d12b      	bne.n	800bfbc <_printf_float+0x23c>
 800bf64:	e767      	b.n	800be36 <_printf_float+0xb6>
 800bf66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf6a:	f240 80dd 	bls.w	800c128 <_printf_float+0x3a8>
 800bf6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf72:	2200      	movs	r2, #0
 800bf74:	2300      	movs	r3, #0
 800bf76:	f7f4 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d033      	beq.n	800bfe6 <_printf_float+0x266>
 800bf7e:	4a37      	ldr	r2, [pc, #220]	@ (800c05c <_printf_float+0x2dc>)
 800bf80:	2301      	movs	r3, #1
 800bf82:	4631      	mov	r1, r6
 800bf84:	4628      	mov	r0, r5
 800bf86:	47b8      	blx	r7
 800bf88:	3001      	adds	r0, #1
 800bf8a:	f43f af54 	beq.w	800be36 <_printf_float+0xb6>
 800bf8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bf92:	4543      	cmp	r3, r8
 800bf94:	db02      	blt.n	800bf9c <_printf_float+0x21c>
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	07d8      	lsls	r0, r3, #31
 800bf9a:	d50f      	bpl.n	800bfbc <_printf_float+0x23c>
 800bf9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfa0:	4631      	mov	r1, r6
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	47b8      	blx	r7
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	f43f af45 	beq.w	800be36 <_printf_float+0xb6>
 800bfac:	f04f 0900 	mov.w	r9, #0
 800bfb0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bfb4:	f104 0a1a 	add.w	sl, r4, #26
 800bfb8:	45c8      	cmp	r8, r9
 800bfba:	dc09      	bgt.n	800bfd0 <_printf_float+0x250>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	079b      	lsls	r3, r3, #30
 800bfc0:	f100 8103 	bmi.w	800c1ca <_printf_float+0x44a>
 800bfc4:	68e0      	ldr	r0, [r4, #12]
 800bfc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfc8:	4298      	cmp	r0, r3
 800bfca:	bfb8      	it	lt
 800bfcc:	4618      	movlt	r0, r3
 800bfce:	e734      	b.n	800be3a <_printf_float+0xba>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	4652      	mov	r2, sl
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	47b8      	blx	r7
 800bfda:	3001      	adds	r0, #1
 800bfdc:	f43f af2b 	beq.w	800be36 <_printf_float+0xb6>
 800bfe0:	f109 0901 	add.w	r9, r9, #1
 800bfe4:	e7e8      	b.n	800bfb8 <_printf_float+0x238>
 800bfe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	dc39      	bgt.n	800c060 <_printf_float+0x2e0>
 800bfec:	4a1b      	ldr	r2, [pc, #108]	@ (800c05c <_printf_float+0x2dc>)
 800bfee:	2301      	movs	r3, #1
 800bff0:	4631      	mov	r1, r6
 800bff2:	4628      	mov	r0, r5
 800bff4:	47b8      	blx	r7
 800bff6:	3001      	adds	r0, #1
 800bff8:	f43f af1d 	beq.w	800be36 <_printf_float+0xb6>
 800bffc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c000:	ea59 0303 	orrs.w	r3, r9, r3
 800c004:	d102      	bne.n	800c00c <_printf_float+0x28c>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	07d9      	lsls	r1, r3, #31
 800c00a:	d5d7      	bpl.n	800bfbc <_printf_float+0x23c>
 800c00c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c010:	4631      	mov	r1, r6
 800c012:	4628      	mov	r0, r5
 800c014:	47b8      	blx	r7
 800c016:	3001      	adds	r0, #1
 800c018:	f43f af0d 	beq.w	800be36 <_printf_float+0xb6>
 800c01c:	f04f 0a00 	mov.w	sl, #0
 800c020:	f104 0b1a 	add.w	fp, r4, #26
 800c024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c026:	425b      	negs	r3, r3
 800c028:	4553      	cmp	r3, sl
 800c02a:	dc01      	bgt.n	800c030 <_printf_float+0x2b0>
 800c02c:	464b      	mov	r3, r9
 800c02e:	e793      	b.n	800bf58 <_printf_float+0x1d8>
 800c030:	2301      	movs	r3, #1
 800c032:	465a      	mov	r2, fp
 800c034:	4631      	mov	r1, r6
 800c036:	4628      	mov	r0, r5
 800c038:	47b8      	blx	r7
 800c03a:	3001      	adds	r0, #1
 800c03c:	f43f aefb 	beq.w	800be36 <_printf_float+0xb6>
 800c040:	f10a 0a01 	add.w	sl, sl, #1
 800c044:	e7ee      	b.n	800c024 <_printf_float+0x2a4>
 800c046:	bf00      	nop
 800c048:	7fefffff 	.word	0x7fefffff
 800c04c:	0800f830 	.word	0x0800f830
 800c050:	0800f834 	.word	0x0800f834
 800c054:	0800f838 	.word	0x0800f838
 800c058:	0800f83c 	.word	0x0800f83c
 800c05c:	0800f840 	.word	0x0800f840
 800c060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c062:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c066:	4553      	cmp	r3, sl
 800c068:	bfa8      	it	ge
 800c06a:	4653      	movge	r3, sl
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	4699      	mov	r9, r3
 800c070:	dc36      	bgt.n	800c0e0 <_printf_float+0x360>
 800c072:	f04f 0b00 	mov.w	fp, #0
 800c076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c07a:	f104 021a 	add.w	r2, r4, #26
 800c07e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c080:	9306      	str	r3, [sp, #24]
 800c082:	eba3 0309 	sub.w	r3, r3, r9
 800c086:	455b      	cmp	r3, fp
 800c088:	dc31      	bgt.n	800c0ee <_printf_float+0x36e>
 800c08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08c:	459a      	cmp	sl, r3
 800c08e:	dc3a      	bgt.n	800c106 <_printf_float+0x386>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	07da      	lsls	r2, r3, #31
 800c094:	d437      	bmi.n	800c106 <_printf_float+0x386>
 800c096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c098:	ebaa 0903 	sub.w	r9, sl, r3
 800c09c:	9b06      	ldr	r3, [sp, #24]
 800c09e:	ebaa 0303 	sub.w	r3, sl, r3
 800c0a2:	4599      	cmp	r9, r3
 800c0a4:	bfa8      	it	ge
 800c0a6:	4699      	movge	r9, r3
 800c0a8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ac:	dc33      	bgt.n	800c116 <_printf_float+0x396>
 800c0ae:	f04f 0800 	mov.w	r8, #0
 800c0b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0b6:	f104 0b1a 	add.w	fp, r4, #26
 800c0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c0c0:	eba3 0309 	sub.w	r3, r3, r9
 800c0c4:	4543      	cmp	r3, r8
 800c0c6:	f77f af79 	ble.w	800bfbc <_printf_float+0x23c>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	465a      	mov	r2, fp
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	47b8      	blx	r7
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	f43f aeae 	beq.w	800be36 <_printf_float+0xb6>
 800c0da:	f108 0801 	add.w	r8, r8, #1
 800c0de:	e7ec      	b.n	800c0ba <_printf_float+0x33a>
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b8      	blx	r7
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d1c2      	bne.n	800c072 <_printf_float+0x2f2>
 800c0ec:	e6a3      	b.n	800be36 <_printf_float+0xb6>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	9206      	str	r2, [sp, #24]
 800c0f6:	47b8      	blx	r7
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	f43f ae9c 	beq.w	800be36 <_printf_float+0xb6>
 800c0fe:	9a06      	ldr	r2, [sp, #24]
 800c100:	f10b 0b01 	add.w	fp, fp, #1
 800c104:	e7bb      	b.n	800c07e <_printf_float+0x2fe>
 800c106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c10a:	4631      	mov	r1, r6
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b8      	blx	r7
 800c110:	3001      	adds	r0, #1
 800c112:	d1c0      	bne.n	800c096 <_printf_float+0x316>
 800c114:	e68f      	b.n	800be36 <_printf_float+0xb6>
 800c116:	9a06      	ldr	r2, [sp, #24]
 800c118:	464b      	mov	r3, r9
 800c11a:	4442      	add	r2, r8
 800c11c:	4631      	mov	r1, r6
 800c11e:	4628      	mov	r0, r5
 800c120:	47b8      	blx	r7
 800c122:	3001      	adds	r0, #1
 800c124:	d1c3      	bne.n	800c0ae <_printf_float+0x32e>
 800c126:	e686      	b.n	800be36 <_printf_float+0xb6>
 800c128:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c12c:	f1ba 0f01 	cmp.w	sl, #1
 800c130:	dc01      	bgt.n	800c136 <_printf_float+0x3b6>
 800c132:	07db      	lsls	r3, r3, #31
 800c134:	d536      	bpl.n	800c1a4 <_printf_float+0x424>
 800c136:	2301      	movs	r3, #1
 800c138:	4642      	mov	r2, r8
 800c13a:	4631      	mov	r1, r6
 800c13c:	4628      	mov	r0, r5
 800c13e:	47b8      	blx	r7
 800c140:	3001      	adds	r0, #1
 800c142:	f43f ae78 	beq.w	800be36 <_printf_float+0xb6>
 800c146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14a:	4631      	mov	r1, r6
 800c14c:	4628      	mov	r0, r5
 800c14e:	47b8      	blx	r7
 800c150:	3001      	adds	r0, #1
 800c152:	f43f ae70 	beq.w	800be36 <_printf_float+0xb6>
 800c156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c15a:	2200      	movs	r2, #0
 800c15c:	2300      	movs	r3, #0
 800c15e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c162:	f7f4 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c166:	b9c0      	cbnz	r0, 800c19a <_printf_float+0x41a>
 800c168:	4653      	mov	r3, sl
 800c16a:	f108 0201 	add.w	r2, r8, #1
 800c16e:	4631      	mov	r1, r6
 800c170:	4628      	mov	r0, r5
 800c172:	47b8      	blx	r7
 800c174:	3001      	adds	r0, #1
 800c176:	d10c      	bne.n	800c192 <_printf_float+0x412>
 800c178:	e65d      	b.n	800be36 <_printf_float+0xb6>
 800c17a:	2301      	movs	r3, #1
 800c17c:	465a      	mov	r2, fp
 800c17e:	4631      	mov	r1, r6
 800c180:	4628      	mov	r0, r5
 800c182:	47b8      	blx	r7
 800c184:	3001      	adds	r0, #1
 800c186:	f43f ae56 	beq.w	800be36 <_printf_float+0xb6>
 800c18a:	f108 0801 	add.w	r8, r8, #1
 800c18e:	45d0      	cmp	r8, sl
 800c190:	dbf3      	blt.n	800c17a <_printf_float+0x3fa>
 800c192:	464b      	mov	r3, r9
 800c194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c198:	e6df      	b.n	800bf5a <_printf_float+0x1da>
 800c19a:	f04f 0800 	mov.w	r8, #0
 800c19e:	f104 0b1a 	add.w	fp, r4, #26
 800c1a2:	e7f4      	b.n	800c18e <_printf_float+0x40e>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	4642      	mov	r2, r8
 800c1a8:	e7e1      	b.n	800c16e <_printf_float+0x3ee>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	464a      	mov	r2, r9
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	47b8      	blx	r7
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	f43f ae3e 	beq.w	800be36 <_printf_float+0xb6>
 800c1ba:	f108 0801 	add.w	r8, r8, #1
 800c1be:	68e3      	ldr	r3, [r4, #12]
 800c1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1c2:	1a5b      	subs	r3, r3, r1
 800c1c4:	4543      	cmp	r3, r8
 800c1c6:	dcf0      	bgt.n	800c1aa <_printf_float+0x42a>
 800c1c8:	e6fc      	b.n	800bfc4 <_printf_float+0x244>
 800c1ca:	f04f 0800 	mov.w	r8, #0
 800c1ce:	f104 0919 	add.w	r9, r4, #25
 800c1d2:	e7f4      	b.n	800c1be <_printf_float+0x43e>

0800c1d4 <_printf_common>:
 800c1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d8:	4616      	mov	r6, r2
 800c1da:	4698      	mov	r8, r3
 800c1dc:	688a      	ldr	r2, [r1, #8]
 800c1de:	690b      	ldr	r3, [r1, #16]
 800c1e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	bfb8      	it	lt
 800c1e8:	4613      	movlt	r3, r2
 800c1ea:	6033      	str	r3, [r6, #0]
 800c1ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	b10a      	cbz	r2, 800c1fa <_printf_common+0x26>
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	6033      	str	r3, [r6, #0]
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	0699      	lsls	r1, r3, #26
 800c1fe:	bf42      	ittt	mi
 800c200:	6833      	ldrmi	r3, [r6, #0]
 800c202:	3302      	addmi	r3, #2
 800c204:	6033      	strmi	r3, [r6, #0]
 800c206:	6825      	ldr	r5, [r4, #0]
 800c208:	f015 0506 	ands.w	r5, r5, #6
 800c20c:	d106      	bne.n	800c21c <_printf_common+0x48>
 800c20e:	f104 0a19 	add.w	sl, r4, #25
 800c212:	68e3      	ldr	r3, [r4, #12]
 800c214:	6832      	ldr	r2, [r6, #0]
 800c216:	1a9b      	subs	r3, r3, r2
 800c218:	42ab      	cmp	r3, r5
 800c21a:	dc26      	bgt.n	800c26a <_printf_common+0x96>
 800c21c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c220:	6822      	ldr	r2, [r4, #0]
 800c222:	3b00      	subs	r3, #0
 800c224:	bf18      	it	ne
 800c226:	2301      	movne	r3, #1
 800c228:	0692      	lsls	r2, r2, #26
 800c22a:	d42b      	bmi.n	800c284 <_printf_common+0xb0>
 800c22c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c230:	4641      	mov	r1, r8
 800c232:	4638      	mov	r0, r7
 800c234:	47c8      	blx	r9
 800c236:	3001      	adds	r0, #1
 800c238:	d01e      	beq.n	800c278 <_printf_common+0xa4>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	6922      	ldr	r2, [r4, #16]
 800c23e:	f003 0306 	and.w	r3, r3, #6
 800c242:	2b04      	cmp	r3, #4
 800c244:	bf02      	ittt	eq
 800c246:	68e5      	ldreq	r5, [r4, #12]
 800c248:	6833      	ldreq	r3, [r6, #0]
 800c24a:	1aed      	subeq	r5, r5, r3
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	bf0c      	ite	eq
 800c250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c254:	2500      	movne	r5, #0
 800c256:	4293      	cmp	r3, r2
 800c258:	bfc4      	itt	gt
 800c25a:	1a9b      	subgt	r3, r3, r2
 800c25c:	18ed      	addgt	r5, r5, r3
 800c25e:	2600      	movs	r6, #0
 800c260:	341a      	adds	r4, #26
 800c262:	42b5      	cmp	r5, r6
 800c264:	d11a      	bne.n	800c29c <_printf_common+0xc8>
 800c266:	2000      	movs	r0, #0
 800c268:	e008      	b.n	800c27c <_printf_common+0xa8>
 800c26a:	2301      	movs	r3, #1
 800c26c:	4652      	mov	r2, sl
 800c26e:	4641      	mov	r1, r8
 800c270:	4638      	mov	r0, r7
 800c272:	47c8      	blx	r9
 800c274:	3001      	adds	r0, #1
 800c276:	d103      	bne.n	800c280 <_printf_common+0xac>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c280:	3501      	adds	r5, #1
 800c282:	e7c6      	b.n	800c212 <_printf_common+0x3e>
 800c284:	18e1      	adds	r1, r4, r3
 800c286:	1c5a      	adds	r2, r3, #1
 800c288:	2030      	movs	r0, #48	@ 0x30
 800c28a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c28e:	4422      	add	r2, r4
 800c290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c298:	3302      	adds	r3, #2
 800c29a:	e7c7      	b.n	800c22c <_printf_common+0x58>
 800c29c:	2301      	movs	r3, #1
 800c29e:	4622      	mov	r2, r4
 800c2a0:	4641      	mov	r1, r8
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	47c8      	blx	r9
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	d0e6      	beq.n	800c278 <_printf_common+0xa4>
 800c2aa:	3601      	adds	r6, #1
 800c2ac:	e7d9      	b.n	800c262 <_printf_common+0x8e>
	...

0800c2b0 <_printf_i>:
 800c2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	7e0f      	ldrb	r7, [r1, #24]
 800c2b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c2b8:	2f78      	cmp	r7, #120	@ 0x78
 800c2ba:	4691      	mov	r9, r2
 800c2bc:	4680      	mov	r8, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	469a      	mov	sl, r3
 800c2c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c2c6:	d807      	bhi.n	800c2d8 <_printf_i+0x28>
 800c2c8:	2f62      	cmp	r7, #98	@ 0x62
 800c2ca:	d80a      	bhi.n	800c2e2 <_printf_i+0x32>
 800c2cc:	2f00      	cmp	r7, #0
 800c2ce:	f000 80d2 	beq.w	800c476 <_printf_i+0x1c6>
 800c2d2:	2f58      	cmp	r7, #88	@ 0x58
 800c2d4:	f000 80b9 	beq.w	800c44a <_printf_i+0x19a>
 800c2d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c2e0:	e03a      	b.n	800c358 <_printf_i+0xa8>
 800c2e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c2e6:	2b15      	cmp	r3, #21
 800c2e8:	d8f6      	bhi.n	800c2d8 <_printf_i+0x28>
 800c2ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c2f0 <_printf_i+0x40>)
 800c2ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2f0:	0800c349 	.word	0x0800c349
 800c2f4:	0800c35d 	.word	0x0800c35d
 800c2f8:	0800c2d9 	.word	0x0800c2d9
 800c2fc:	0800c2d9 	.word	0x0800c2d9
 800c300:	0800c2d9 	.word	0x0800c2d9
 800c304:	0800c2d9 	.word	0x0800c2d9
 800c308:	0800c35d 	.word	0x0800c35d
 800c30c:	0800c2d9 	.word	0x0800c2d9
 800c310:	0800c2d9 	.word	0x0800c2d9
 800c314:	0800c2d9 	.word	0x0800c2d9
 800c318:	0800c2d9 	.word	0x0800c2d9
 800c31c:	0800c45d 	.word	0x0800c45d
 800c320:	0800c387 	.word	0x0800c387
 800c324:	0800c417 	.word	0x0800c417
 800c328:	0800c2d9 	.word	0x0800c2d9
 800c32c:	0800c2d9 	.word	0x0800c2d9
 800c330:	0800c47f 	.word	0x0800c47f
 800c334:	0800c2d9 	.word	0x0800c2d9
 800c338:	0800c387 	.word	0x0800c387
 800c33c:	0800c2d9 	.word	0x0800c2d9
 800c340:	0800c2d9 	.word	0x0800c2d9
 800c344:	0800c41f 	.word	0x0800c41f
 800c348:	6833      	ldr	r3, [r6, #0]
 800c34a:	1d1a      	adds	r2, r3, #4
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6032      	str	r2, [r6, #0]
 800c350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c358:	2301      	movs	r3, #1
 800c35a:	e09d      	b.n	800c498 <_printf_i+0x1e8>
 800c35c:	6833      	ldr	r3, [r6, #0]
 800c35e:	6820      	ldr	r0, [r4, #0]
 800c360:	1d19      	adds	r1, r3, #4
 800c362:	6031      	str	r1, [r6, #0]
 800c364:	0606      	lsls	r6, r0, #24
 800c366:	d501      	bpl.n	800c36c <_printf_i+0xbc>
 800c368:	681d      	ldr	r5, [r3, #0]
 800c36a:	e003      	b.n	800c374 <_printf_i+0xc4>
 800c36c:	0645      	lsls	r5, r0, #25
 800c36e:	d5fb      	bpl.n	800c368 <_printf_i+0xb8>
 800c370:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c374:	2d00      	cmp	r5, #0
 800c376:	da03      	bge.n	800c380 <_printf_i+0xd0>
 800c378:	232d      	movs	r3, #45	@ 0x2d
 800c37a:	426d      	negs	r5, r5
 800c37c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c380:	4859      	ldr	r0, [pc, #356]	@ (800c4e8 <_printf_i+0x238>)
 800c382:	230a      	movs	r3, #10
 800c384:	e011      	b.n	800c3aa <_printf_i+0xfa>
 800c386:	6821      	ldr	r1, [r4, #0]
 800c388:	6833      	ldr	r3, [r6, #0]
 800c38a:	0608      	lsls	r0, r1, #24
 800c38c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c390:	d402      	bmi.n	800c398 <_printf_i+0xe8>
 800c392:	0649      	lsls	r1, r1, #25
 800c394:	bf48      	it	mi
 800c396:	b2ad      	uxthmi	r5, r5
 800c398:	2f6f      	cmp	r7, #111	@ 0x6f
 800c39a:	4853      	ldr	r0, [pc, #332]	@ (800c4e8 <_printf_i+0x238>)
 800c39c:	6033      	str	r3, [r6, #0]
 800c39e:	bf14      	ite	ne
 800c3a0:	230a      	movne	r3, #10
 800c3a2:	2308      	moveq	r3, #8
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c3aa:	6866      	ldr	r6, [r4, #4]
 800c3ac:	60a6      	str	r6, [r4, #8]
 800c3ae:	2e00      	cmp	r6, #0
 800c3b0:	bfa2      	ittt	ge
 800c3b2:	6821      	ldrge	r1, [r4, #0]
 800c3b4:	f021 0104 	bicge.w	r1, r1, #4
 800c3b8:	6021      	strge	r1, [r4, #0]
 800c3ba:	b90d      	cbnz	r5, 800c3c0 <_printf_i+0x110>
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	d04b      	beq.n	800c458 <_printf_i+0x1a8>
 800c3c0:	4616      	mov	r6, r2
 800c3c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c3ca:	5dc7      	ldrb	r7, [r0, r7]
 800c3cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3d0:	462f      	mov	r7, r5
 800c3d2:	42bb      	cmp	r3, r7
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	d9f4      	bls.n	800c3c2 <_printf_i+0x112>
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d10b      	bne.n	800c3f4 <_printf_i+0x144>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	07df      	lsls	r7, r3, #31
 800c3e0:	d508      	bpl.n	800c3f4 <_printf_i+0x144>
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	6861      	ldr	r1, [r4, #4]
 800c3e6:	4299      	cmp	r1, r3
 800c3e8:	bfde      	ittt	le
 800c3ea:	2330      	movle	r3, #48	@ 0x30
 800c3ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c3f4:	1b92      	subs	r2, r2, r6
 800c3f6:	6122      	str	r2, [r4, #16]
 800c3f8:	f8cd a000 	str.w	sl, [sp]
 800c3fc:	464b      	mov	r3, r9
 800c3fe:	aa03      	add	r2, sp, #12
 800c400:	4621      	mov	r1, r4
 800c402:	4640      	mov	r0, r8
 800c404:	f7ff fee6 	bl	800c1d4 <_printf_common>
 800c408:	3001      	adds	r0, #1
 800c40a:	d14a      	bne.n	800c4a2 <_printf_i+0x1f2>
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c410:	b004      	add	sp, #16
 800c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	f043 0320 	orr.w	r3, r3, #32
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	4833      	ldr	r0, [pc, #204]	@ (800c4ec <_printf_i+0x23c>)
 800c420:	2778      	movs	r7, #120	@ 0x78
 800c422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	6831      	ldr	r1, [r6, #0]
 800c42a:	061f      	lsls	r7, r3, #24
 800c42c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c430:	d402      	bmi.n	800c438 <_printf_i+0x188>
 800c432:	065f      	lsls	r7, r3, #25
 800c434:	bf48      	it	mi
 800c436:	b2ad      	uxthmi	r5, r5
 800c438:	6031      	str	r1, [r6, #0]
 800c43a:	07d9      	lsls	r1, r3, #31
 800c43c:	bf44      	itt	mi
 800c43e:	f043 0320 	orrmi.w	r3, r3, #32
 800c442:	6023      	strmi	r3, [r4, #0]
 800c444:	b11d      	cbz	r5, 800c44e <_printf_i+0x19e>
 800c446:	2310      	movs	r3, #16
 800c448:	e7ac      	b.n	800c3a4 <_printf_i+0xf4>
 800c44a:	4827      	ldr	r0, [pc, #156]	@ (800c4e8 <_printf_i+0x238>)
 800c44c:	e7e9      	b.n	800c422 <_printf_i+0x172>
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	f023 0320 	bic.w	r3, r3, #32
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	e7f6      	b.n	800c446 <_printf_i+0x196>
 800c458:	4616      	mov	r6, r2
 800c45a:	e7bd      	b.n	800c3d8 <_printf_i+0x128>
 800c45c:	6833      	ldr	r3, [r6, #0]
 800c45e:	6825      	ldr	r5, [r4, #0]
 800c460:	6961      	ldr	r1, [r4, #20]
 800c462:	1d18      	adds	r0, r3, #4
 800c464:	6030      	str	r0, [r6, #0]
 800c466:	062e      	lsls	r6, r5, #24
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	d501      	bpl.n	800c470 <_printf_i+0x1c0>
 800c46c:	6019      	str	r1, [r3, #0]
 800c46e:	e002      	b.n	800c476 <_printf_i+0x1c6>
 800c470:	0668      	lsls	r0, r5, #25
 800c472:	d5fb      	bpl.n	800c46c <_printf_i+0x1bc>
 800c474:	8019      	strh	r1, [r3, #0]
 800c476:	2300      	movs	r3, #0
 800c478:	6123      	str	r3, [r4, #16]
 800c47a:	4616      	mov	r6, r2
 800c47c:	e7bc      	b.n	800c3f8 <_printf_i+0x148>
 800c47e:	6833      	ldr	r3, [r6, #0]
 800c480:	1d1a      	adds	r2, r3, #4
 800c482:	6032      	str	r2, [r6, #0]
 800c484:	681e      	ldr	r6, [r3, #0]
 800c486:	6862      	ldr	r2, [r4, #4]
 800c488:	2100      	movs	r1, #0
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7f3 fea0 	bl	80001d0 <memchr>
 800c490:	b108      	cbz	r0, 800c496 <_printf_i+0x1e6>
 800c492:	1b80      	subs	r0, r0, r6
 800c494:	6060      	str	r0, [r4, #4]
 800c496:	6863      	ldr	r3, [r4, #4]
 800c498:	6123      	str	r3, [r4, #16]
 800c49a:	2300      	movs	r3, #0
 800c49c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4a0:	e7aa      	b.n	800c3f8 <_printf_i+0x148>
 800c4a2:	6923      	ldr	r3, [r4, #16]
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	47d0      	blx	sl
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d0ad      	beq.n	800c40c <_printf_i+0x15c>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	079b      	lsls	r3, r3, #30
 800c4b4:	d413      	bmi.n	800c4de <_printf_i+0x22e>
 800c4b6:	68e0      	ldr	r0, [r4, #12]
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	4298      	cmp	r0, r3
 800c4bc:	bfb8      	it	lt
 800c4be:	4618      	movlt	r0, r3
 800c4c0:	e7a6      	b.n	800c410 <_printf_i+0x160>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	4640      	mov	r0, r8
 800c4ca:	47d0      	blx	sl
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	d09d      	beq.n	800c40c <_printf_i+0x15c>
 800c4d0:	3501      	adds	r5, #1
 800c4d2:	68e3      	ldr	r3, [r4, #12]
 800c4d4:	9903      	ldr	r1, [sp, #12]
 800c4d6:	1a5b      	subs	r3, r3, r1
 800c4d8:	42ab      	cmp	r3, r5
 800c4da:	dcf2      	bgt.n	800c4c2 <_printf_i+0x212>
 800c4dc:	e7eb      	b.n	800c4b6 <_printf_i+0x206>
 800c4de:	2500      	movs	r5, #0
 800c4e0:	f104 0619 	add.w	r6, r4, #25
 800c4e4:	e7f5      	b.n	800c4d2 <_printf_i+0x222>
 800c4e6:	bf00      	nop
 800c4e8:	0800f842 	.word	0x0800f842
 800c4ec:	0800f853 	.word	0x0800f853

0800c4f0 <sniprintf>:
 800c4f0:	b40c      	push	{r2, r3}
 800c4f2:	b530      	push	{r4, r5, lr}
 800c4f4:	4b17      	ldr	r3, [pc, #92]	@ (800c554 <sniprintf+0x64>)
 800c4f6:	1e0c      	subs	r4, r1, #0
 800c4f8:	681d      	ldr	r5, [r3, #0]
 800c4fa:	b09d      	sub	sp, #116	@ 0x74
 800c4fc:	da08      	bge.n	800c510 <sniprintf+0x20>
 800c4fe:	238b      	movs	r3, #139	@ 0x8b
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c506:	b01d      	add	sp, #116	@ 0x74
 800c508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c50c:	b002      	add	sp, #8
 800c50e:	4770      	bx	lr
 800c510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c514:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c518:	bf14      	ite	ne
 800c51a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c51e:	4623      	moveq	r3, r4
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	9307      	str	r3, [sp, #28]
 800c524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c528:	9002      	str	r0, [sp, #8]
 800c52a:	9006      	str	r0, [sp, #24]
 800c52c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c530:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c532:	ab21      	add	r3, sp, #132	@ 0x84
 800c534:	a902      	add	r1, sp, #8
 800c536:	4628      	mov	r0, r5
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	f001 f879 	bl	800d630 <_svfiprintf_r>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	bfbc      	itt	lt
 800c542:	238b      	movlt	r3, #139	@ 0x8b
 800c544:	602b      	strlt	r3, [r5, #0]
 800c546:	2c00      	cmp	r4, #0
 800c548:	d0dd      	beq.n	800c506 <sniprintf+0x16>
 800c54a:	9b02      	ldr	r3, [sp, #8]
 800c54c:	2200      	movs	r2, #0
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	e7d9      	b.n	800c506 <sniprintf+0x16>
 800c552:	bf00      	nop
 800c554:	20000044 	.word	0x20000044

0800c558 <siprintf>:
 800c558:	b40e      	push	{r1, r2, r3}
 800c55a:	b500      	push	{lr}
 800c55c:	b09c      	sub	sp, #112	@ 0x70
 800c55e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c560:	9002      	str	r0, [sp, #8]
 800c562:	9006      	str	r0, [sp, #24]
 800c564:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c568:	4809      	ldr	r0, [pc, #36]	@ (800c590 <siprintf+0x38>)
 800c56a:	9107      	str	r1, [sp, #28]
 800c56c:	9104      	str	r1, [sp, #16]
 800c56e:	4909      	ldr	r1, [pc, #36]	@ (800c594 <siprintf+0x3c>)
 800c570:	f853 2b04 	ldr.w	r2, [r3], #4
 800c574:	9105      	str	r1, [sp, #20]
 800c576:	6800      	ldr	r0, [r0, #0]
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	a902      	add	r1, sp, #8
 800c57c:	f001 f858 	bl	800d630 <_svfiprintf_r>
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	b01c      	add	sp, #112	@ 0x70
 800c588:	f85d eb04 	ldr.w	lr, [sp], #4
 800c58c:	b003      	add	sp, #12
 800c58e:	4770      	bx	lr
 800c590:	20000044 	.word	0x20000044
 800c594:	ffff0208 	.word	0xffff0208

0800c598 <std>:
 800c598:	2300      	movs	r3, #0
 800c59a:	b510      	push	{r4, lr}
 800c59c:	4604      	mov	r4, r0
 800c59e:	e9c0 3300 	strd	r3, r3, [r0]
 800c5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5a6:	6083      	str	r3, [r0, #8]
 800c5a8:	8181      	strh	r1, [r0, #12]
 800c5aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5ac:	81c2      	strh	r2, [r0, #14]
 800c5ae:	6183      	str	r3, [r0, #24]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	2208      	movs	r2, #8
 800c5b4:	305c      	adds	r0, #92	@ 0x5c
 800c5b6:	f000 f948 	bl	800c84a <memset>
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <std+0x58>)
 800c5bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5be:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f4 <std+0x5c>)
 800c5c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f8 <std+0x60>)
 800c5c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5fc <std+0x64>)
 800c5c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c600 <std+0x68>)
 800c5cc:	6224      	str	r4, [r4, #32]
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	d006      	beq.n	800c5e0 <std+0x48>
 800c5d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5d6:	4294      	cmp	r4, r2
 800c5d8:	d002      	beq.n	800c5e0 <std+0x48>
 800c5da:	33d0      	adds	r3, #208	@ 0xd0
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	d105      	bne.n	800c5ec <std+0x54>
 800c5e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e8:	f000 b966 	b.w	800c8b8 <__retarget_lock_init_recursive>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0800e1f1 	.word	0x0800e1f1
 800c5f4:	0800e213 	.word	0x0800e213
 800c5f8:	0800e24b 	.word	0x0800e24b
 800c5fc:	0800e26f 	.word	0x0800e26f
 800c600:	200052f0 	.word	0x200052f0

0800c604 <stdio_exit_handler>:
 800c604:	4a02      	ldr	r2, [pc, #8]	@ (800c610 <stdio_exit_handler+0xc>)
 800c606:	4903      	ldr	r1, [pc, #12]	@ (800c614 <stdio_exit_handler+0x10>)
 800c608:	4803      	ldr	r0, [pc, #12]	@ (800c618 <stdio_exit_handler+0x14>)
 800c60a:	f000 b8ed 	b.w	800c7e8 <_fwalk_sglue>
 800c60e:	bf00      	nop
 800c610:	20000038 	.word	0x20000038
 800c614:	0800da85 	.word	0x0800da85
 800c618:	20000048 	.word	0x20000048

0800c61c <cleanup_stdio>:
 800c61c:	6841      	ldr	r1, [r0, #4]
 800c61e:	4b0c      	ldr	r3, [pc, #48]	@ (800c650 <cleanup_stdio+0x34>)
 800c620:	4299      	cmp	r1, r3
 800c622:	b510      	push	{r4, lr}
 800c624:	4604      	mov	r4, r0
 800c626:	d001      	beq.n	800c62c <cleanup_stdio+0x10>
 800c628:	f001 fa2c 	bl	800da84 <_fflush_r>
 800c62c:	68a1      	ldr	r1, [r4, #8]
 800c62e:	4b09      	ldr	r3, [pc, #36]	@ (800c654 <cleanup_stdio+0x38>)
 800c630:	4299      	cmp	r1, r3
 800c632:	d002      	beq.n	800c63a <cleanup_stdio+0x1e>
 800c634:	4620      	mov	r0, r4
 800c636:	f001 fa25 	bl	800da84 <_fflush_r>
 800c63a:	68e1      	ldr	r1, [r4, #12]
 800c63c:	4b06      	ldr	r3, [pc, #24]	@ (800c658 <cleanup_stdio+0x3c>)
 800c63e:	4299      	cmp	r1, r3
 800c640:	d004      	beq.n	800c64c <cleanup_stdio+0x30>
 800c642:	4620      	mov	r0, r4
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f001 ba1c 	b.w	800da84 <_fflush_r>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	200052f0 	.word	0x200052f0
 800c654:	20005358 	.word	0x20005358
 800c658:	200053c0 	.word	0x200053c0

0800c65c <global_stdio_init.part.0>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	4b0b      	ldr	r3, [pc, #44]	@ (800c68c <global_stdio_init.part.0+0x30>)
 800c660:	4c0b      	ldr	r4, [pc, #44]	@ (800c690 <global_stdio_init.part.0+0x34>)
 800c662:	4a0c      	ldr	r2, [pc, #48]	@ (800c694 <global_stdio_init.part.0+0x38>)
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	4620      	mov	r0, r4
 800c668:	2200      	movs	r2, #0
 800c66a:	2104      	movs	r1, #4
 800c66c:	f7ff ff94 	bl	800c598 <std>
 800c670:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c674:	2201      	movs	r2, #1
 800c676:	2109      	movs	r1, #9
 800c678:	f7ff ff8e 	bl	800c598 <std>
 800c67c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c680:	2202      	movs	r2, #2
 800c682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c686:	2112      	movs	r1, #18
 800c688:	f7ff bf86 	b.w	800c598 <std>
 800c68c:	20005428 	.word	0x20005428
 800c690:	200052f0 	.word	0x200052f0
 800c694:	0800c605 	.word	0x0800c605

0800c698 <__sfp_lock_acquire>:
 800c698:	4801      	ldr	r0, [pc, #4]	@ (800c6a0 <__sfp_lock_acquire+0x8>)
 800c69a:	f000 b90e 	b.w	800c8ba <__retarget_lock_acquire_recursive>
 800c69e:	bf00      	nop
 800c6a0:	2000542d 	.word	0x2000542d

0800c6a4 <__sfp_lock_release>:
 800c6a4:	4801      	ldr	r0, [pc, #4]	@ (800c6ac <__sfp_lock_release+0x8>)
 800c6a6:	f000 b909 	b.w	800c8bc <__retarget_lock_release_recursive>
 800c6aa:	bf00      	nop
 800c6ac:	2000542d 	.word	0x2000542d

0800c6b0 <__sinit>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	f7ff fff0 	bl	800c698 <__sfp_lock_acquire>
 800c6b8:	6a23      	ldr	r3, [r4, #32]
 800c6ba:	b11b      	cbz	r3, 800c6c4 <__sinit+0x14>
 800c6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6c0:	f7ff bff0 	b.w	800c6a4 <__sfp_lock_release>
 800c6c4:	4b04      	ldr	r3, [pc, #16]	@ (800c6d8 <__sinit+0x28>)
 800c6c6:	6223      	str	r3, [r4, #32]
 800c6c8:	4b04      	ldr	r3, [pc, #16]	@ (800c6dc <__sinit+0x2c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1f5      	bne.n	800c6bc <__sinit+0xc>
 800c6d0:	f7ff ffc4 	bl	800c65c <global_stdio_init.part.0>
 800c6d4:	e7f2      	b.n	800c6bc <__sinit+0xc>
 800c6d6:	bf00      	nop
 800c6d8:	0800c61d 	.word	0x0800c61d
 800c6dc:	20005428 	.word	0x20005428

0800c6e0 <_strtol_l.constprop.0>:
 800c6e0:	2b24      	cmp	r3, #36	@ 0x24
 800c6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e6:	4686      	mov	lr, r0
 800c6e8:	4690      	mov	r8, r2
 800c6ea:	d801      	bhi.n	800c6f0 <_strtol_l.constprop.0+0x10>
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d106      	bne.n	800c6fe <_strtol_l.constprop.0+0x1e>
 800c6f0:	f000 f8b8 	bl	800c864 <__errno>
 800c6f4:	2316      	movs	r3, #22
 800c6f6:	6003      	str	r3, [r0, #0]
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fe:	4834      	ldr	r0, [pc, #208]	@ (800c7d0 <_strtol_l.constprop.0+0xf0>)
 800c700:	460d      	mov	r5, r1
 800c702:	462a      	mov	r2, r5
 800c704:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c708:	5d06      	ldrb	r6, [r0, r4]
 800c70a:	f016 0608 	ands.w	r6, r6, #8
 800c70e:	d1f8      	bne.n	800c702 <_strtol_l.constprop.0+0x22>
 800c710:	2c2d      	cmp	r4, #45	@ 0x2d
 800c712:	d12d      	bne.n	800c770 <_strtol_l.constprop.0+0x90>
 800c714:	782c      	ldrb	r4, [r5, #0]
 800c716:	2601      	movs	r6, #1
 800c718:	1c95      	adds	r5, r2, #2
 800c71a:	f033 0210 	bics.w	r2, r3, #16
 800c71e:	d109      	bne.n	800c734 <_strtol_l.constprop.0+0x54>
 800c720:	2c30      	cmp	r4, #48	@ 0x30
 800c722:	d12a      	bne.n	800c77a <_strtol_l.constprop.0+0x9a>
 800c724:	782a      	ldrb	r2, [r5, #0]
 800c726:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c72a:	2a58      	cmp	r2, #88	@ 0x58
 800c72c:	d125      	bne.n	800c77a <_strtol_l.constprop.0+0x9a>
 800c72e:	786c      	ldrb	r4, [r5, #1]
 800c730:	2310      	movs	r3, #16
 800c732:	3502      	adds	r5, #2
 800c734:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c738:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c73c:	2200      	movs	r2, #0
 800c73e:	fbbc f9f3 	udiv	r9, ip, r3
 800c742:	4610      	mov	r0, r2
 800c744:	fb03 ca19 	mls	sl, r3, r9, ip
 800c748:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c74c:	2f09      	cmp	r7, #9
 800c74e:	d81b      	bhi.n	800c788 <_strtol_l.constprop.0+0xa8>
 800c750:	463c      	mov	r4, r7
 800c752:	42a3      	cmp	r3, r4
 800c754:	dd27      	ble.n	800c7a6 <_strtol_l.constprop.0+0xc6>
 800c756:	1c57      	adds	r7, r2, #1
 800c758:	d007      	beq.n	800c76a <_strtol_l.constprop.0+0x8a>
 800c75a:	4581      	cmp	r9, r0
 800c75c:	d320      	bcc.n	800c7a0 <_strtol_l.constprop.0+0xc0>
 800c75e:	d101      	bne.n	800c764 <_strtol_l.constprop.0+0x84>
 800c760:	45a2      	cmp	sl, r4
 800c762:	db1d      	blt.n	800c7a0 <_strtol_l.constprop.0+0xc0>
 800c764:	fb00 4003 	mla	r0, r0, r3, r4
 800c768:	2201      	movs	r2, #1
 800c76a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c76e:	e7eb      	b.n	800c748 <_strtol_l.constprop.0+0x68>
 800c770:	2c2b      	cmp	r4, #43	@ 0x2b
 800c772:	bf04      	itt	eq
 800c774:	782c      	ldrbeq	r4, [r5, #0]
 800c776:	1c95      	addeq	r5, r2, #2
 800c778:	e7cf      	b.n	800c71a <_strtol_l.constprop.0+0x3a>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1da      	bne.n	800c734 <_strtol_l.constprop.0+0x54>
 800c77e:	2c30      	cmp	r4, #48	@ 0x30
 800c780:	bf0c      	ite	eq
 800c782:	2308      	moveq	r3, #8
 800c784:	230a      	movne	r3, #10
 800c786:	e7d5      	b.n	800c734 <_strtol_l.constprop.0+0x54>
 800c788:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c78c:	2f19      	cmp	r7, #25
 800c78e:	d801      	bhi.n	800c794 <_strtol_l.constprop.0+0xb4>
 800c790:	3c37      	subs	r4, #55	@ 0x37
 800c792:	e7de      	b.n	800c752 <_strtol_l.constprop.0+0x72>
 800c794:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c798:	2f19      	cmp	r7, #25
 800c79a:	d804      	bhi.n	800c7a6 <_strtol_l.constprop.0+0xc6>
 800c79c:	3c57      	subs	r4, #87	@ 0x57
 800c79e:	e7d8      	b.n	800c752 <_strtol_l.constprop.0+0x72>
 800c7a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7a4:	e7e1      	b.n	800c76a <_strtol_l.constprop.0+0x8a>
 800c7a6:	1c53      	adds	r3, r2, #1
 800c7a8:	d108      	bne.n	800c7bc <_strtol_l.constprop.0+0xdc>
 800c7aa:	2322      	movs	r3, #34	@ 0x22
 800c7ac:	f8ce 3000 	str.w	r3, [lr]
 800c7b0:	4660      	mov	r0, ip
 800c7b2:	f1b8 0f00 	cmp.w	r8, #0
 800c7b6:	d0a0      	beq.n	800c6fa <_strtol_l.constprop.0+0x1a>
 800c7b8:	1e69      	subs	r1, r5, #1
 800c7ba:	e006      	b.n	800c7ca <_strtol_l.constprop.0+0xea>
 800c7bc:	b106      	cbz	r6, 800c7c0 <_strtol_l.constprop.0+0xe0>
 800c7be:	4240      	negs	r0, r0
 800c7c0:	f1b8 0f00 	cmp.w	r8, #0
 800c7c4:	d099      	beq.n	800c6fa <_strtol_l.constprop.0+0x1a>
 800c7c6:	2a00      	cmp	r2, #0
 800c7c8:	d1f6      	bne.n	800c7b8 <_strtol_l.constprop.0+0xd8>
 800c7ca:	f8c8 1000 	str.w	r1, [r8]
 800c7ce:	e794      	b.n	800c6fa <_strtol_l.constprop.0+0x1a>
 800c7d0:	0800f865 	.word	0x0800f865

0800c7d4 <strtol>:
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	460a      	mov	r2, r1
 800c7d8:	4601      	mov	r1, r0
 800c7da:	4802      	ldr	r0, [pc, #8]	@ (800c7e4 <strtol+0x10>)
 800c7dc:	6800      	ldr	r0, [r0, #0]
 800c7de:	f7ff bf7f 	b.w	800c6e0 <_strtol_l.constprop.0>
 800c7e2:	bf00      	nop
 800c7e4:	20000044 	.word	0x20000044

0800c7e8 <_fwalk_sglue>:
 800c7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	4688      	mov	r8, r1
 800c7f0:	4614      	mov	r4, r2
 800c7f2:	2600      	movs	r6, #0
 800c7f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7f8:	f1b9 0901 	subs.w	r9, r9, #1
 800c7fc:	d505      	bpl.n	800c80a <_fwalk_sglue+0x22>
 800c7fe:	6824      	ldr	r4, [r4, #0]
 800c800:	2c00      	cmp	r4, #0
 800c802:	d1f7      	bne.n	800c7f4 <_fwalk_sglue+0xc>
 800c804:	4630      	mov	r0, r6
 800c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80a:	89ab      	ldrh	r3, [r5, #12]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d907      	bls.n	800c820 <_fwalk_sglue+0x38>
 800c810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c814:	3301      	adds	r3, #1
 800c816:	d003      	beq.n	800c820 <_fwalk_sglue+0x38>
 800c818:	4629      	mov	r1, r5
 800c81a:	4638      	mov	r0, r7
 800c81c:	47c0      	blx	r8
 800c81e:	4306      	orrs	r6, r0
 800c820:	3568      	adds	r5, #104	@ 0x68
 800c822:	e7e9      	b.n	800c7f8 <_fwalk_sglue+0x10>

0800c824 <strncpy>:
 800c824:	b510      	push	{r4, lr}
 800c826:	3901      	subs	r1, #1
 800c828:	4603      	mov	r3, r0
 800c82a:	b132      	cbz	r2, 800c83a <strncpy+0x16>
 800c82c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c830:	f803 4b01 	strb.w	r4, [r3], #1
 800c834:	3a01      	subs	r2, #1
 800c836:	2c00      	cmp	r4, #0
 800c838:	d1f7      	bne.n	800c82a <strncpy+0x6>
 800c83a:	441a      	add	r2, r3
 800c83c:	2100      	movs	r1, #0
 800c83e:	4293      	cmp	r3, r2
 800c840:	d100      	bne.n	800c844 <strncpy+0x20>
 800c842:	bd10      	pop	{r4, pc}
 800c844:	f803 1b01 	strb.w	r1, [r3], #1
 800c848:	e7f9      	b.n	800c83e <strncpy+0x1a>

0800c84a <memset>:
 800c84a:	4402      	add	r2, r0
 800c84c:	4603      	mov	r3, r0
 800c84e:	4293      	cmp	r3, r2
 800c850:	d100      	bne.n	800c854 <memset+0xa>
 800c852:	4770      	bx	lr
 800c854:	f803 1b01 	strb.w	r1, [r3], #1
 800c858:	e7f9      	b.n	800c84e <memset+0x4>
	...

0800c85c <_localeconv_r>:
 800c85c:	4800      	ldr	r0, [pc, #0]	@ (800c860 <_localeconv_r+0x4>)
 800c85e:	4770      	bx	lr
 800c860:	20000184 	.word	0x20000184

0800c864 <__errno>:
 800c864:	4b01      	ldr	r3, [pc, #4]	@ (800c86c <__errno+0x8>)
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	20000044 	.word	0x20000044

0800c870 <__libc_init_array>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	4d0d      	ldr	r5, [pc, #52]	@ (800c8a8 <__libc_init_array+0x38>)
 800c874:	4c0d      	ldr	r4, [pc, #52]	@ (800c8ac <__libc_init_array+0x3c>)
 800c876:	1b64      	subs	r4, r4, r5
 800c878:	10a4      	asrs	r4, r4, #2
 800c87a:	2600      	movs	r6, #0
 800c87c:	42a6      	cmp	r6, r4
 800c87e:	d109      	bne.n	800c894 <__libc_init_array+0x24>
 800c880:	4d0b      	ldr	r5, [pc, #44]	@ (800c8b0 <__libc_init_array+0x40>)
 800c882:	4c0c      	ldr	r4, [pc, #48]	@ (800c8b4 <__libc_init_array+0x44>)
 800c884:	f002 f992 	bl	800ebac <_init>
 800c888:	1b64      	subs	r4, r4, r5
 800c88a:	10a4      	asrs	r4, r4, #2
 800c88c:	2600      	movs	r6, #0
 800c88e:	42a6      	cmp	r6, r4
 800c890:	d105      	bne.n	800c89e <__libc_init_array+0x2e>
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	f855 3b04 	ldr.w	r3, [r5], #4
 800c898:	4798      	blx	r3
 800c89a:	3601      	adds	r6, #1
 800c89c:	e7ee      	b.n	800c87c <__libc_init_array+0xc>
 800c89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8a2:	4798      	blx	r3
 800c8a4:	3601      	adds	r6, #1
 800c8a6:	e7f2      	b.n	800c88e <__libc_init_array+0x1e>
 800c8a8:	0800fbb0 	.word	0x0800fbb0
 800c8ac:	0800fbb0 	.word	0x0800fbb0
 800c8b0:	0800fbb0 	.word	0x0800fbb0
 800c8b4:	0800fbb4 	.word	0x0800fbb4

0800c8b8 <__retarget_lock_init_recursive>:
 800c8b8:	4770      	bx	lr

0800c8ba <__retarget_lock_acquire_recursive>:
 800c8ba:	4770      	bx	lr

0800c8bc <__retarget_lock_release_recursive>:
 800c8bc:	4770      	bx	lr

0800c8be <memcpy>:
 800c8be:	440a      	add	r2, r1
 800c8c0:	4291      	cmp	r1, r2
 800c8c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c8c6:	d100      	bne.n	800c8ca <memcpy+0xc>
 800c8c8:	4770      	bx	lr
 800c8ca:	b510      	push	{r4, lr}
 800c8cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8d4:	4291      	cmp	r1, r2
 800c8d6:	d1f9      	bne.n	800c8cc <memcpy+0xe>
 800c8d8:	bd10      	pop	{r4, pc}

0800c8da <quorem>:
 800c8da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8de:	6903      	ldr	r3, [r0, #16]
 800c8e0:	690c      	ldr	r4, [r1, #16]
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	db7e      	blt.n	800c9e6 <quorem+0x10c>
 800c8e8:	3c01      	subs	r4, #1
 800c8ea:	f101 0814 	add.w	r8, r1, #20
 800c8ee:	00a3      	lsls	r3, r4, #2
 800c8f0:	f100 0514 	add.w	r5, r0, #20
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c904:	3301      	adds	r3, #1
 800c906:	429a      	cmp	r2, r3
 800c908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c90c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c910:	d32e      	bcc.n	800c970 <quorem+0x96>
 800c912:	f04f 0a00 	mov.w	sl, #0
 800c916:	46c4      	mov	ip, r8
 800c918:	46ae      	mov	lr, r5
 800c91a:	46d3      	mov	fp, sl
 800c91c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c920:	b298      	uxth	r0, r3
 800c922:	fb06 a000 	mla	r0, r6, r0, sl
 800c926:	0c02      	lsrs	r2, r0, #16
 800c928:	0c1b      	lsrs	r3, r3, #16
 800c92a:	fb06 2303 	mla	r3, r6, r3, r2
 800c92e:	f8de 2000 	ldr.w	r2, [lr]
 800c932:	b280      	uxth	r0, r0
 800c934:	b292      	uxth	r2, r2
 800c936:	1a12      	subs	r2, r2, r0
 800c938:	445a      	add	r2, fp
 800c93a:	f8de 0000 	ldr.w	r0, [lr]
 800c93e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c942:	b29b      	uxth	r3, r3
 800c944:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c948:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c94c:	b292      	uxth	r2, r2
 800c94e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c952:	45e1      	cmp	r9, ip
 800c954:	f84e 2b04 	str.w	r2, [lr], #4
 800c958:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c95c:	d2de      	bcs.n	800c91c <quorem+0x42>
 800c95e:	9b00      	ldr	r3, [sp, #0]
 800c960:	58eb      	ldr	r3, [r5, r3]
 800c962:	b92b      	cbnz	r3, 800c970 <quorem+0x96>
 800c964:	9b01      	ldr	r3, [sp, #4]
 800c966:	3b04      	subs	r3, #4
 800c968:	429d      	cmp	r5, r3
 800c96a:	461a      	mov	r2, r3
 800c96c:	d32f      	bcc.n	800c9ce <quorem+0xf4>
 800c96e:	613c      	str	r4, [r7, #16]
 800c970:	4638      	mov	r0, r7
 800c972:	f001 fb35 	bl	800dfe0 <__mcmp>
 800c976:	2800      	cmp	r0, #0
 800c978:	db25      	blt.n	800c9c6 <quorem+0xec>
 800c97a:	4629      	mov	r1, r5
 800c97c:	2000      	movs	r0, #0
 800c97e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c982:	f8d1 c000 	ldr.w	ip, [r1]
 800c986:	fa1f fe82 	uxth.w	lr, r2
 800c98a:	fa1f f38c 	uxth.w	r3, ip
 800c98e:	eba3 030e 	sub.w	r3, r3, lr
 800c992:	4403      	add	r3, r0
 800c994:	0c12      	lsrs	r2, r2, #16
 800c996:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c99a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9a4:	45c1      	cmp	r9, r8
 800c9a6:	f841 3b04 	str.w	r3, [r1], #4
 800c9aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c9ae:	d2e6      	bcs.n	800c97e <quorem+0xa4>
 800c9b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9b8:	b922      	cbnz	r2, 800c9c4 <quorem+0xea>
 800c9ba:	3b04      	subs	r3, #4
 800c9bc:	429d      	cmp	r5, r3
 800c9be:	461a      	mov	r2, r3
 800c9c0:	d30b      	bcc.n	800c9da <quorem+0x100>
 800c9c2:	613c      	str	r4, [r7, #16]
 800c9c4:	3601      	adds	r6, #1
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	b003      	add	sp, #12
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	6812      	ldr	r2, [r2, #0]
 800c9d0:	3b04      	subs	r3, #4
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d1cb      	bne.n	800c96e <quorem+0x94>
 800c9d6:	3c01      	subs	r4, #1
 800c9d8:	e7c6      	b.n	800c968 <quorem+0x8e>
 800c9da:	6812      	ldr	r2, [r2, #0]
 800c9dc:	3b04      	subs	r3, #4
 800c9de:	2a00      	cmp	r2, #0
 800c9e0:	d1ef      	bne.n	800c9c2 <quorem+0xe8>
 800c9e2:	3c01      	subs	r4, #1
 800c9e4:	e7ea      	b.n	800c9bc <quorem+0xe2>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e7ee      	b.n	800c9c8 <quorem+0xee>
 800c9ea:	0000      	movs	r0, r0
 800c9ec:	0000      	movs	r0, r0
	...

0800c9f0 <_dtoa_r>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	69c7      	ldr	r7, [r0, #28]
 800c9f6:	b099      	sub	sp, #100	@ 0x64
 800c9f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ca00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ca02:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca04:	4683      	mov	fp, r0
 800ca06:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca0a:	b97f      	cbnz	r7, 800ca2c <_dtoa_r+0x3c>
 800ca0c:	2010      	movs	r0, #16
 800ca0e:	f000 ff0b 	bl	800d828 <malloc>
 800ca12:	4602      	mov	r2, r0
 800ca14:	f8cb 001c 	str.w	r0, [fp, #28]
 800ca18:	b920      	cbnz	r0, 800ca24 <_dtoa_r+0x34>
 800ca1a:	4ba7      	ldr	r3, [pc, #668]	@ (800ccb8 <_dtoa_r+0x2c8>)
 800ca1c:	21ef      	movs	r1, #239	@ 0xef
 800ca1e:	48a7      	ldr	r0, [pc, #668]	@ (800ccbc <_dtoa_r+0x2cc>)
 800ca20:	f001 fcc8 	bl	800e3b4 <__assert_func>
 800ca24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ca28:	6007      	str	r7, [r0, #0]
 800ca2a:	60c7      	str	r7, [r0, #12]
 800ca2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca30:	6819      	ldr	r1, [r3, #0]
 800ca32:	b159      	cbz	r1, 800ca4c <_dtoa_r+0x5c>
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	604a      	str	r2, [r1, #4]
 800ca38:	2301      	movs	r3, #1
 800ca3a:	4093      	lsls	r3, r2
 800ca3c:	608b      	str	r3, [r1, #8]
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f001 f894 	bl	800db6c <_Bfree>
 800ca44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	1e2b      	subs	r3, r5, #0
 800ca4e:	bfb9      	ittee	lt
 800ca50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca54:	9303      	strlt	r3, [sp, #12]
 800ca56:	2300      	movge	r3, #0
 800ca58:	6033      	strge	r3, [r6, #0]
 800ca5a:	9f03      	ldr	r7, [sp, #12]
 800ca5c:	4b98      	ldr	r3, [pc, #608]	@ (800ccc0 <_dtoa_r+0x2d0>)
 800ca5e:	bfbc      	itt	lt
 800ca60:	2201      	movlt	r2, #1
 800ca62:	6032      	strlt	r2, [r6, #0]
 800ca64:	43bb      	bics	r3, r7
 800ca66:	d112      	bne.n	800ca8e <_dtoa_r+0x9e>
 800ca68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca74:	4323      	orrs	r3, r4
 800ca76:	f000 854d 	beq.w	800d514 <_dtoa_r+0xb24>
 800ca7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ccd4 <_dtoa_r+0x2e4>
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 854f 	beq.w	800d524 <_dtoa_r+0xb34>
 800ca86:	f10a 0303 	add.w	r3, sl, #3
 800ca8a:	f000 bd49 	b.w	800d520 <_dtoa_r+0xb30>
 800ca8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca92:	2200      	movs	r2, #0
 800ca94:	ec51 0b17 	vmov	r0, r1, d7
 800ca98:	2300      	movs	r3, #0
 800ca9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ca9e:	f7f4 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 800caa2:	4680      	mov	r8, r0
 800caa4:	b158      	cbz	r0, 800cabe <_dtoa_r+0xce>
 800caa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800caa8:	2301      	movs	r3, #1
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800caae:	b113      	cbz	r3, 800cab6 <_dtoa_r+0xc6>
 800cab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cab2:	4b84      	ldr	r3, [pc, #528]	@ (800ccc4 <_dtoa_r+0x2d4>)
 800cab4:	6013      	str	r3, [r2, #0]
 800cab6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ccd8 <_dtoa_r+0x2e8>
 800caba:	f000 bd33 	b.w	800d524 <_dtoa_r+0xb34>
 800cabe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cac2:	aa16      	add	r2, sp, #88	@ 0x58
 800cac4:	a917      	add	r1, sp, #92	@ 0x5c
 800cac6:	4658      	mov	r0, fp
 800cac8:	f001 fb3a 	bl	800e140 <__d2b>
 800cacc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cad0:	4681      	mov	r9, r0
 800cad2:	2e00      	cmp	r6, #0
 800cad4:	d077      	beq.n	800cbc6 <_dtoa_r+0x1d6>
 800cad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cad8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800caec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800caf0:	4619      	mov	r1, r3
 800caf2:	2200      	movs	r2, #0
 800caf4:	4b74      	ldr	r3, [pc, #464]	@ (800ccc8 <_dtoa_r+0x2d8>)
 800caf6:	f7f3 fbc7 	bl	8000288 <__aeabi_dsub>
 800cafa:	a369      	add	r3, pc, #420	@ (adr r3, 800cca0 <_dtoa_r+0x2b0>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fd7a 	bl	80005f8 <__aeabi_dmul>
 800cb04:	a368      	add	r3, pc, #416	@ (adr r3, 800cca8 <_dtoa_r+0x2b8>)
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	f7f3 fbbf 	bl	800028c <__adddf3>
 800cb0e:	4604      	mov	r4, r0
 800cb10:	4630      	mov	r0, r6
 800cb12:	460d      	mov	r5, r1
 800cb14:	f7f3 fd06 	bl	8000524 <__aeabi_i2d>
 800cb18:	a365      	add	r3, pc, #404	@ (adr r3, 800ccb0 <_dtoa_r+0x2c0>)
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f7f3 fd6b 	bl	80005f8 <__aeabi_dmul>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4620      	mov	r0, r4
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f7f3 fbaf 	bl	800028c <__adddf3>
 800cb2e:	4604      	mov	r4, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	f7f4 f811 	bl	8000b58 <__aeabi_d2iz>
 800cb36:	2200      	movs	r2, #0
 800cb38:	4607      	mov	r7, r0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	4629      	mov	r1, r5
 800cb40:	f7f3 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800cb44:	b140      	cbz	r0, 800cb58 <_dtoa_r+0x168>
 800cb46:	4638      	mov	r0, r7
 800cb48:	f7f3 fcec 	bl	8000524 <__aeabi_i2d>
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	462b      	mov	r3, r5
 800cb50:	f7f3 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb54:	b900      	cbnz	r0, 800cb58 <_dtoa_r+0x168>
 800cb56:	3f01      	subs	r7, #1
 800cb58:	2f16      	cmp	r7, #22
 800cb5a:	d851      	bhi.n	800cc00 <_dtoa_r+0x210>
 800cb5c:	4b5b      	ldr	r3, [pc, #364]	@ (800cccc <_dtoa_r+0x2dc>)
 800cb5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb6a:	f7f3 ffb7 	bl	8000adc <__aeabi_dcmplt>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d048      	beq.n	800cc04 <_dtoa_r+0x214>
 800cb72:	3f01      	subs	r7, #1
 800cb74:	2300      	movs	r3, #0
 800cb76:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb7a:	1b9b      	subs	r3, r3, r6
 800cb7c:	1e5a      	subs	r2, r3, #1
 800cb7e:	bf44      	itt	mi
 800cb80:	f1c3 0801 	rsbmi	r8, r3, #1
 800cb84:	2300      	movmi	r3, #0
 800cb86:	9208      	str	r2, [sp, #32]
 800cb88:	bf54      	ite	pl
 800cb8a:	f04f 0800 	movpl.w	r8, #0
 800cb8e:	9308      	strmi	r3, [sp, #32]
 800cb90:	2f00      	cmp	r7, #0
 800cb92:	db39      	blt.n	800cc08 <_dtoa_r+0x218>
 800cb94:	9b08      	ldr	r3, [sp, #32]
 800cb96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cb98:	443b      	add	r3, r7
 800cb9a:	9308      	str	r3, [sp, #32]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba2:	2b09      	cmp	r3, #9
 800cba4:	d864      	bhi.n	800cc70 <_dtoa_r+0x280>
 800cba6:	2b05      	cmp	r3, #5
 800cba8:	bfc4      	itt	gt
 800cbaa:	3b04      	subgt	r3, #4
 800cbac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb0:	f1a3 0302 	sub.w	r3, r3, #2
 800cbb4:	bfcc      	ite	gt
 800cbb6:	2400      	movgt	r4, #0
 800cbb8:	2401      	movle	r4, #1
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d863      	bhi.n	800cc86 <_dtoa_r+0x296>
 800cbbe:	e8df f003 	tbb	[pc, r3]
 800cbc2:	372a      	.short	0x372a
 800cbc4:	5535      	.short	0x5535
 800cbc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cbca:	441e      	add	r6, r3
 800cbcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	bfc1      	itttt	gt
 800cbd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cbd8:	409f      	lslgt	r7, r3
 800cbda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cbde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cbe2:	bfd6      	itet	le
 800cbe4:	f1c3 0320 	rsble	r3, r3, #32
 800cbe8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cbec:	fa04 f003 	lslle.w	r0, r4, r3
 800cbf0:	f7f3 fc88 	bl	8000504 <__aeabi_ui2d>
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cbfa:	3e01      	subs	r6, #1
 800cbfc:	9214      	str	r2, [sp, #80]	@ 0x50
 800cbfe:	e777      	b.n	800caf0 <_dtoa_r+0x100>
 800cc00:	2301      	movs	r3, #1
 800cc02:	e7b8      	b.n	800cb76 <_dtoa_r+0x186>
 800cc04:	9012      	str	r0, [sp, #72]	@ 0x48
 800cc06:	e7b7      	b.n	800cb78 <_dtoa_r+0x188>
 800cc08:	427b      	negs	r3, r7
 800cc0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	eba8 0807 	sub.w	r8, r8, r7
 800cc12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc14:	e7c4      	b.n	800cba0 <_dtoa_r+0x1b0>
 800cc16:	2300      	movs	r3, #0
 800cc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dc35      	bgt.n	800cc8c <_dtoa_r+0x29c>
 800cc20:	2301      	movs	r3, #1
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	9307      	str	r3, [sp, #28]
 800cc26:	461a      	mov	r2, r3
 800cc28:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc2a:	e00b      	b.n	800cc44 <_dtoa_r+0x254>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e7f3      	b.n	800cc18 <_dtoa_r+0x228>
 800cc30:	2300      	movs	r3, #0
 800cc32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc36:	18fb      	adds	r3, r7, r3
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	9307      	str	r3, [sp, #28]
 800cc40:	bfb8      	it	lt
 800cc42:	2301      	movlt	r3, #1
 800cc44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cc48:	2100      	movs	r1, #0
 800cc4a:	2204      	movs	r2, #4
 800cc4c:	f102 0514 	add.w	r5, r2, #20
 800cc50:	429d      	cmp	r5, r3
 800cc52:	d91f      	bls.n	800cc94 <_dtoa_r+0x2a4>
 800cc54:	6041      	str	r1, [r0, #4]
 800cc56:	4658      	mov	r0, fp
 800cc58:	f000 ff48 	bl	800daec <_Balloc>
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d13c      	bne.n	800ccdc <_dtoa_r+0x2ec>
 800cc62:	4b1b      	ldr	r3, [pc, #108]	@ (800ccd0 <_dtoa_r+0x2e0>)
 800cc64:	4602      	mov	r2, r0
 800cc66:	f240 11af 	movw	r1, #431	@ 0x1af
 800cc6a:	e6d8      	b.n	800ca1e <_dtoa_r+0x2e>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e7e0      	b.n	800cc32 <_dtoa_r+0x242>
 800cc70:	2401      	movs	r4, #1
 800cc72:	2300      	movs	r3, #0
 800cc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	9307      	str	r3, [sp, #28]
 800cc80:	2200      	movs	r2, #0
 800cc82:	2312      	movs	r3, #18
 800cc84:	e7d0      	b.n	800cc28 <_dtoa_r+0x238>
 800cc86:	2301      	movs	r3, #1
 800cc88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc8a:	e7f5      	b.n	800cc78 <_dtoa_r+0x288>
 800cc8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	9307      	str	r3, [sp, #28]
 800cc92:	e7d7      	b.n	800cc44 <_dtoa_r+0x254>
 800cc94:	3101      	adds	r1, #1
 800cc96:	0052      	lsls	r2, r2, #1
 800cc98:	e7d8      	b.n	800cc4c <_dtoa_r+0x25c>
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w
 800cca0:	636f4361 	.word	0x636f4361
 800cca4:	3fd287a7 	.word	0x3fd287a7
 800cca8:	8b60c8b3 	.word	0x8b60c8b3
 800ccac:	3fc68a28 	.word	0x3fc68a28
 800ccb0:	509f79fb 	.word	0x509f79fb
 800ccb4:	3fd34413 	.word	0x3fd34413
 800ccb8:	0800f972 	.word	0x0800f972
 800ccbc:	0800f989 	.word	0x0800f989
 800ccc0:	7ff00000 	.word	0x7ff00000
 800ccc4:	0800f841 	.word	0x0800f841
 800ccc8:	3ff80000 	.word	0x3ff80000
 800cccc:	0800fa90 	.word	0x0800fa90
 800ccd0:	0800f9e1 	.word	0x0800f9e1
 800ccd4:	0800f96e 	.word	0x0800f96e
 800ccd8:	0800f840 	.word	0x0800f840
 800ccdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cce0:	6018      	str	r0, [r3, #0]
 800cce2:	9b07      	ldr	r3, [sp, #28]
 800cce4:	2b0e      	cmp	r3, #14
 800cce6:	f200 80a4 	bhi.w	800ce32 <_dtoa_r+0x442>
 800ccea:	2c00      	cmp	r4, #0
 800ccec:	f000 80a1 	beq.w	800ce32 <_dtoa_r+0x442>
 800ccf0:	2f00      	cmp	r7, #0
 800ccf2:	dd33      	ble.n	800cd5c <_dtoa_r+0x36c>
 800ccf4:	4bad      	ldr	r3, [pc, #692]	@ (800cfac <_dtoa_r+0x5bc>)
 800ccf6:	f007 020f 	and.w	r2, r7, #15
 800ccfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccfe:	ed93 7b00 	vldr	d7, [r3]
 800cd02:	05f8      	lsls	r0, r7, #23
 800cd04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cd08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cd0c:	d516      	bpl.n	800cd3c <_dtoa_r+0x34c>
 800cd0e:	4ba8      	ldr	r3, [pc, #672]	@ (800cfb0 <_dtoa_r+0x5c0>)
 800cd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd18:	f7f3 fd98 	bl	800084c <__aeabi_ddiv>
 800cd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd20:	f004 040f 	and.w	r4, r4, #15
 800cd24:	2603      	movs	r6, #3
 800cd26:	4da2      	ldr	r5, [pc, #648]	@ (800cfb0 <_dtoa_r+0x5c0>)
 800cd28:	b954      	cbnz	r4, 800cd40 <_dtoa_r+0x350>
 800cd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd32:	f7f3 fd8b 	bl	800084c <__aeabi_ddiv>
 800cd36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd3a:	e028      	b.n	800cd8e <_dtoa_r+0x39e>
 800cd3c:	2602      	movs	r6, #2
 800cd3e:	e7f2      	b.n	800cd26 <_dtoa_r+0x336>
 800cd40:	07e1      	lsls	r1, r4, #31
 800cd42:	d508      	bpl.n	800cd56 <_dtoa_r+0x366>
 800cd44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd4c:	f7f3 fc54 	bl	80005f8 <__aeabi_dmul>
 800cd50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd54:	3601      	adds	r6, #1
 800cd56:	1064      	asrs	r4, r4, #1
 800cd58:	3508      	adds	r5, #8
 800cd5a:	e7e5      	b.n	800cd28 <_dtoa_r+0x338>
 800cd5c:	f000 80d2 	beq.w	800cf04 <_dtoa_r+0x514>
 800cd60:	427c      	negs	r4, r7
 800cd62:	4b92      	ldr	r3, [pc, #584]	@ (800cfac <_dtoa_r+0x5bc>)
 800cd64:	4d92      	ldr	r5, [pc, #584]	@ (800cfb0 <_dtoa_r+0x5c0>)
 800cd66:	f004 020f 	and.w	r2, r4, #15
 800cd6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd76:	f7f3 fc3f 	bl	80005f8 <__aeabi_dmul>
 800cd7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd7e:	1124      	asrs	r4, r4, #4
 800cd80:	2300      	movs	r3, #0
 800cd82:	2602      	movs	r6, #2
 800cd84:	2c00      	cmp	r4, #0
 800cd86:	f040 80b2 	bne.w	800ceee <_dtoa_r+0x4fe>
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1d3      	bne.n	800cd36 <_dtoa_r+0x346>
 800cd8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f000 80b7 	beq.w	800cf08 <_dtoa_r+0x518>
 800cd9a:	4b86      	ldr	r3, [pc, #536]	@ (800cfb4 <_dtoa_r+0x5c4>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f000 80ae 	beq.w	800cf08 <_dtoa_r+0x518>
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 80aa 	beq.w	800cf08 <_dtoa_r+0x518>
 800cdb4:	9b00      	ldr	r3, [sp, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	dd37      	ble.n	800ce2a <_dtoa_r+0x43a>
 800cdba:	1e7b      	subs	r3, r7, #1
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	4b7d      	ldr	r3, [pc, #500]	@ (800cfb8 <_dtoa_r+0x5c8>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	f7f3 fc17 	bl	80005f8 <__aeabi_dmul>
 800cdca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdce:	9c00      	ldr	r4, [sp, #0]
 800cdd0:	3601      	adds	r6, #1
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7f3 fba6 	bl	8000524 <__aeabi_i2d>
 800cdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cddc:	f7f3 fc0c 	bl	80005f8 <__aeabi_dmul>
 800cde0:	4b76      	ldr	r3, [pc, #472]	@ (800cfbc <_dtoa_r+0x5cc>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	f7f3 fa52 	bl	800028c <__adddf3>
 800cde8:	4605      	mov	r5, r0
 800cdea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cdee:	2c00      	cmp	r4, #0
 800cdf0:	f040 808d 	bne.w	800cf0e <_dtoa_r+0x51e>
 800cdf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdf8:	4b71      	ldr	r3, [pc, #452]	@ (800cfc0 <_dtoa_r+0x5d0>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f7f3 fa44 	bl	8000288 <__aeabi_dsub>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4633      	mov	r3, r6
 800ce0c:	f7f3 fe84 	bl	8000b18 <__aeabi_dcmpgt>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	f040 828b 	bne.w	800d32c <_dtoa_r+0x93c>
 800ce16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce20:	f7f3 fe5c 	bl	8000adc <__aeabi_dcmplt>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	f040 8128 	bne.w	800d07a <_dtoa_r+0x68a>
 800ce2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ce2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ce32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f2c0 815a 	blt.w	800d0ee <_dtoa_r+0x6fe>
 800ce3a:	2f0e      	cmp	r7, #14
 800ce3c:	f300 8157 	bgt.w	800d0ee <_dtoa_r+0x6fe>
 800ce40:	4b5a      	ldr	r3, [pc, #360]	@ (800cfac <_dtoa_r+0x5bc>)
 800ce42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce46:	ed93 7b00 	vldr	d7, [r3]
 800ce4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	ed8d 7b00 	vstr	d7, [sp]
 800ce52:	da03      	bge.n	800ce5c <_dtoa_r+0x46c>
 800ce54:	9b07      	ldr	r3, [sp, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f340 8101 	ble.w	800d05e <_dtoa_r+0x66e>
 800ce5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce60:	4656      	mov	r6, sl
 800ce62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce66:	4620      	mov	r0, r4
 800ce68:	4629      	mov	r1, r5
 800ce6a:	f7f3 fcef 	bl	800084c <__aeabi_ddiv>
 800ce6e:	f7f3 fe73 	bl	8000b58 <__aeabi_d2iz>
 800ce72:	4680      	mov	r8, r0
 800ce74:	f7f3 fb56 	bl	8000524 <__aeabi_i2d>
 800ce78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce7c:	f7f3 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4620      	mov	r0, r4
 800ce86:	4629      	mov	r1, r5
 800ce88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce8c:	f7f3 f9fc 	bl	8000288 <__aeabi_dsub>
 800ce90:	f806 4b01 	strb.w	r4, [r6], #1
 800ce94:	9d07      	ldr	r5, [sp, #28]
 800ce96:	eba6 040a 	sub.w	r4, r6, sl
 800ce9a:	42a5      	cmp	r5, r4
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	f040 8117 	bne.w	800d0d2 <_dtoa_r+0x6e2>
 800cea4:	f7f3 f9f2 	bl	800028c <__adddf3>
 800cea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceac:	4604      	mov	r4, r0
 800ceae:	460d      	mov	r5, r1
 800ceb0:	f7f3 fe32 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f040 80f9 	bne.w	800d0ac <_dtoa_r+0x6bc>
 800ceba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cebe:	4620      	mov	r0, r4
 800cec0:	4629      	mov	r1, r5
 800cec2:	f7f3 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 800cec6:	b118      	cbz	r0, 800ced0 <_dtoa_r+0x4e0>
 800cec8:	f018 0f01 	tst.w	r8, #1
 800cecc:	f040 80ee 	bne.w	800d0ac <_dtoa_r+0x6bc>
 800ced0:	4649      	mov	r1, r9
 800ced2:	4658      	mov	r0, fp
 800ced4:	f000 fe4a 	bl	800db6c <_Bfree>
 800ced8:	2300      	movs	r3, #0
 800ceda:	7033      	strb	r3, [r6, #0]
 800cedc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cede:	3701      	adds	r7, #1
 800cee0:	601f      	str	r7, [r3, #0]
 800cee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 831d 	beq.w	800d524 <_dtoa_r+0xb34>
 800ceea:	601e      	str	r6, [r3, #0]
 800ceec:	e31a      	b.n	800d524 <_dtoa_r+0xb34>
 800ceee:	07e2      	lsls	r2, r4, #31
 800cef0:	d505      	bpl.n	800cefe <_dtoa_r+0x50e>
 800cef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cef6:	f7f3 fb7f 	bl	80005f8 <__aeabi_dmul>
 800cefa:	3601      	adds	r6, #1
 800cefc:	2301      	movs	r3, #1
 800cefe:	1064      	asrs	r4, r4, #1
 800cf00:	3508      	adds	r5, #8
 800cf02:	e73f      	b.n	800cd84 <_dtoa_r+0x394>
 800cf04:	2602      	movs	r6, #2
 800cf06:	e742      	b.n	800cd8e <_dtoa_r+0x39e>
 800cf08:	9c07      	ldr	r4, [sp, #28]
 800cf0a:	9704      	str	r7, [sp, #16]
 800cf0c:	e761      	b.n	800cdd2 <_dtoa_r+0x3e2>
 800cf0e:	4b27      	ldr	r3, [pc, #156]	@ (800cfac <_dtoa_r+0x5bc>)
 800cf10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf1a:	4454      	add	r4, sl
 800cf1c:	2900      	cmp	r1, #0
 800cf1e:	d053      	beq.n	800cfc8 <_dtoa_r+0x5d8>
 800cf20:	4928      	ldr	r1, [pc, #160]	@ (800cfc4 <_dtoa_r+0x5d4>)
 800cf22:	2000      	movs	r0, #0
 800cf24:	f7f3 fc92 	bl	800084c <__aeabi_ddiv>
 800cf28:	4633      	mov	r3, r6
 800cf2a:	462a      	mov	r2, r5
 800cf2c:	f7f3 f9ac 	bl	8000288 <__aeabi_dsub>
 800cf30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf34:	4656      	mov	r6, sl
 800cf36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf3a:	f7f3 fe0d 	bl	8000b58 <__aeabi_d2iz>
 800cf3e:	4605      	mov	r5, r0
 800cf40:	f7f3 faf0 	bl	8000524 <__aeabi_i2d>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf4c:	f7f3 f99c 	bl	8000288 <__aeabi_dsub>
 800cf50:	3530      	adds	r5, #48	@ 0x30
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf5a:	f806 5b01 	strb.w	r5, [r6], #1
 800cf5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf62:	f7f3 fdbb 	bl	8000adc <__aeabi_dcmplt>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d171      	bne.n	800d04e <_dtoa_r+0x65e>
 800cf6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf6e:	4911      	ldr	r1, [pc, #68]	@ (800cfb4 <_dtoa_r+0x5c4>)
 800cf70:	2000      	movs	r0, #0
 800cf72:	f7f3 f989 	bl	8000288 <__aeabi_dsub>
 800cf76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf7a:	f7f3 fdaf 	bl	8000adc <__aeabi_dcmplt>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f040 8095 	bne.w	800d0ae <_dtoa_r+0x6be>
 800cf84:	42a6      	cmp	r6, r4
 800cf86:	f43f af50 	beq.w	800ce2a <_dtoa_r+0x43a>
 800cf8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf8e:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb8 <_dtoa_r+0x5c8>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	f7f3 fb31 	bl	80005f8 <__aeabi_dmul>
 800cf96:	4b08      	ldr	r3, [pc, #32]	@ (800cfb8 <_dtoa_r+0x5c8>)
 800cf98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfa2:	f7f3 fb29 	bl	80005f8 <__aeabi_dmul>
 800cfa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfaa:	e7c4      	b.n	800cf36 <_dtoa_r+0x546>
 800cfac:	0800fa90 	.word	0x0800fa90
 800cfb0:	0800fa68 	.word	0x0800fa68
 800cfb4:	3ff00000 	.word	0x3ff00000
 800cfb8:	40240000 	.word	0x40240000
 800cfbc:	401c0000 	.word	0x401c0000
 800cfc0:	40140000 	.word	0x40140000
 800cfc4:	3fe00000 	.word	0x3fe00000
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f7f3 fb14 	bl	80005f8 <__aeabi_dmul>
 800cfd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfd4:	9415      	str	r4, [sp, #84]	@ 0x54
 800cfd6:	4656      	mov	r6, sl
 800cfd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfdc:	f7f3 fdbc 	bl	8000b58 <__aeabi_d2iz>
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	f7f3 fa9f 	bl	8000524 <__aeabi_i2d>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfee:	f7f3 f94b 	bl	8000288 <__aeabi_dsub>
 800cff2:	3530      	adds	r5, #48	@ 0x30
 800cff4:	f806 5b01 	strb.w	r5, [r6], #1
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	42a6      	cmp	r6, r4
 800cffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d002:	f04f 0200 	mov.w	r2, #0
 800d006:	d124      	bne.n	800d052 <_dtoa_r+0x662>
 800d008:	4bac      	ldr	r3, [pc, #688]	@ (800d2bc <_dtoa_r+0x8cc>)
 800d00a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d00e:	f7f3 f93d 	bl	800028c <__adddf3>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d01a:	f7f3 fd7d 	bl	8000b18 <__aeabi_dcmpgt>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d145      	bne.n	800d0ae <_dtoa_r+0x6be>
 800d022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d026:	49a5      	ldr	r1, [pc, #660]	@ (800d2bc <_dtoa_r+0x8cc>)
 800d028:	2000      	movs	r0, #0
 800d02a:	f7f3 f92d 	bl	8000288 <__aeabi_dsub>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
 800d032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d036:	f7f3 fd51 	bl	8000adc <__aeabi_dcmplt>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f43f aef5 	beq.w	800ce2a <_dtoa_r+0x43a>
 800d040:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d042:	1e73      	subs	r3, r6, #1
 800d044:	9315      	str	r3, [sp, #84]	@ 0x54
 800d046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d04a:	2b30      	cmp	r3, #48	@ 0x30
 800d04c:	d0f8      	beq.n	800d040 <_dtoa_r+0x650>
 800d04e:	9f04      	ldr	r7, [sp, #16]
 800d050:	e73e      	b.n	800ced0 <_dtoa_r+0x4e0>
 800d052:	4b9b      	ldr	r3, [pc, #620]	@ (800d2c0 <_dtoa_r+0x8d0>)
 800d054:	f7f3 fad0 	bl	80005f8 <__aeabi_dmul>
 800d058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d05c:	e7bc      	b.n	800cfd8 <_dtoa_r+0x5e8>
 800d05e:	d10c      	bne.n	800d07a <_dtoa_r+0x68a>
 800d060:	4b98      	ldr	r3, [pc, #608]	@ (800d2c4 <_dtoa_r+0x8d4>)
 800d062:	2200      	movs	r2, #0
 800d064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d068:	f7f3 fac6 	bl	80005f8 <__aeabi_dmul>
 800d06c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d070:	f7f3 fd48 	bl	8000b04 <__aeabi_dcmpge>
 800d074:	2800      	cmp	r0, #0
 800d076:	f000 8157 	beq.w	800d328 <_dtoa_r+0x938>
 800d07a:	2400      	movs	r4, #0
 800d07c:	4625      	mov	r5, r4
 800d07e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d080:	43db      	mvns	r3, r3
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	4656      	mov	r6, sl
 800d086:	2700      	movs	r7, #0
 800d088:	4621      	mov	r1, r4
 800d08a:	4658      	mov	r0, fp
 800d08c:	f000 fd6e 	bl	800db6c <_Bfree>
 800d090:	2d00      	cmp	r5, #0
 800d092:	d0dc      	beq.n	800d04e <_dtoa_r+0x65e>
 800d094:	b12f      	cbz	r7, 800d0a2 <_dtoa_r+0x6b2>
 800d096:	42af      	cmp	r7, r5
 800d098:	d003      	beq.n	800d0a2 <_dtoa_r+0x6b2>
 800d09a:	4639      	mov	r1, r7
 800d09c:	4658      	mov	r0, fp
 800d09e:	f000 fd65 	bl	800db6c <_Bfree>
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	4658      	mov	r0, fp
 800d0a6:	f000 fd61 	bl	800db6c <_Bfree>
 800d0aa:	e7d0      	b.n	800d04e <_dtoa_r+0x65e>
 800d0ac:	9704      	str	r7, [sp, #16]
 800d0ae:	4633      	mov	r3, r6
 800d0b0:	461e      	mov	r6, r3
 800d0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0b6:	2a39      	cmp	r2, #57	@ 0x39
 800d0b8:	d107      	bne.n	800d0ca <_dtoa_r+0x6da>
 800d0ba:	459a      	cmp	sl, r3
 800d0bc:	d1f8      	bne.n	800d0b0 <_dtoa_r+0x6c0>
 800d0be:	9a04      	ldr	r2, [sp, #16]
 800d0c0:	3201      	adds	r2, #1
 800d0c2:	9204      	str	r2, [sp, #16]
 800d0c4:	2230      	movs	r2, #48	@ 0x30
 800d0c6:	f88a 2000 	strb.w	r2, [sl]
 800d0ca:	781a      	ldrb	r2, [r3, #0]
 800d0cc:	3201      	adds	r2, #1
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	e7bd      	b.n	800d04e <_dtoa_r+0x65e>
 800d0d2:	4b7b      	ldr	r3, [pc, #492]	@ (800d2c0 <_dtoa_r+0x8d0>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f7f3 fa8f 	bl	80005f8 <__aeabi_dmul>
 800d0da:	2200      	movs	r2, #0
 800d0dc:	2300      	movs	r3, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	f7f3 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	f43f aebb 	beq.w	800ce62 <_dtoa_r+0x472>
 800d0ec:	e6f0      	b.n	800ced0 <_dtoa_r+0x4e0>
 800d0ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d0f0:	2a00      	cmp	r2, #0
 800d0f2:	f000 80db 	beq.w	800d2ac <_dtoa_r+0x8bc>
 800d0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f8:	2a01      	cmp	r2, #1
 800d0fa:	f300 80bf 	bgt.w	800d27c <_dtoa_r+0x88c>
 800d0fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d100:	2a00      	cmp	r2, #0
 800d102:	f000 80b7 	beq.w	800d274 <_dtoa_r+0x884>
 800d106:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d10a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d10c:	4646      	mov	r6, r8
 800d10e:	9a08      	ldr	r2, [sp, #32]
 800d110:	2101      	movs	r1, #1
 800d112:	441a      	add	r2, r3
 800d114:	4658      	mov	r0, fp
 800d116:	4498      	add	r8, r3
 800d118:	9208      	str	r2, [sp, #32]
 800d11a:	f000 fddb 	bl	800dcd4 <__i2b>
 800d11e:	4605      	mov	r5, r0
 800d120:	b15e      	cbz	r6, 800d13a <_dtoa_r+0x74a>
 800d122:	9b08      	ldr	r3, [sp, #32]
 800d124:	2b00      	cmp	r3, #0
 800d126:	dd08      	ble.n	800d13a <_dtoa_r+0x74a>
 800d128:	42b3      	cmp	r3, r6
 800d12a:	9a08      	ldr	r2, [sp, #32]
 800d12c:	bfa8      	it	ge
 800d12e:	4633      	movge	r3, r6
 800d130:	eba8 0803 	sub.w	r8, r8, r3
 800d134:	1af6      	subs	r6, r6, r3
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	9308      	str	r3, [sp, #32]
 800d13a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d13c:	b1f3      	cbz	r3, 800d17c <_dtoa_r+0x78c>
 800d13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 80b7 	beq.w	800d2b4 <_dtoa_r+0x8c4>
 800d146:	b18c      	cbz	r4, 800d16c <_dtoa_r+0x77c>
 800d148:	4629      	mov	r1, r5
 800d14a:	4622      	mov	r2, r4
 800d14c:	4658      	mov	r0, fp
 800d14e:	f000 fe81 	bl	800de54 <__pow5mult>
 800d152:	464a      	mov	r2, r9
 800d154:	4601      	mov	r1, r0
 800d156:	4605      	mov	r5, r0
 800d158:	4658      	mov	r0, fp
 800d15a:	f000 fdd1 	bl	800dd00 <__multiply>
 800d15e:	4649      	mov	r1, r9
 800d160:	9004      	str	r0, [sp, #16]
 800d162:	4658      	mov	r0, fp
 800d164:	f000 fd02 	bl	800db6c <_Bfree>
 800d168:	9b04      	ldr	r3, [sp, #16]
 800d16a:	4699      	mov	r9, r3
 800d16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d16e:	1b1a      	subs	r2, r3, r4
 800d170:	d004      	beq.n	800d17c <_dtoa_r+0x78c>
 800d172:	4649      	mov	r1, r9
 800d174:	4658      	mov	r0, fp
 800d176:	f000 fe6d 	bl	800de54 <__pow5mult>
 800d17a:	4681      	mov	r9, r0
 800d17c:	2101      	movs	r1, #1
 800d17e:	4658      	mov	r0, fp
 800d180:	f000 fda8 	bl	800dcd4 <__i2b>
 800d184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d186:	4604      	mov	r4, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 81cf 	beq.w	800d52c <_dtoa_r+0xb3c>
 800d18e:	461a      	mov	r2, r3
 800d190:	4601      	mov	r1, r0
 800d192:	4658      	mov	r0, fp
 800d194:	f000 fe5e 	bl	800de54 <__pow5mult>
 800d198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	4604      	mov	r4, r0
 800d19e:	f300 8095 	bgt.w	800d2cc <_dtoa_r+0x8dc>
 800d1a2:	9b02      	ldr	r3, [sp, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f040 8087 	bne.w	800d2b8 <_dtoa_r+0x8c8>
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f040 8089 	bne.w	800d2c8 <_dtoa_r+0x8d8>
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d1bc:	0d1b      	lsrs	r3, r3, #20
 800d1be:	051b      	lsls	r3, r3, #20
 800d1c0:	b12b      	cbz	r3, 800d1ce <_dtoa_r+0x7de>
 800d1c2:	9b08      	ldr	r3, [sp, #32]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	9308      	str	r3, [sp, #32]
 800d1c8:	f108 0801 	add.w	r8, r8, #1
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 81b0 	beq.w	800d538 <_dtoa_r+0xb48>
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d1de:	6918      	ldr	r0, [r3, #16]
 800d1e0:	f000 fd2c 	bl	800dc3c <__hi0bits>
 800d1e4:	f1c0 0020 	rsb	r0, r0, #32
 800d1e8:	9b08      	ldr	r3, [sp, #32]
 800d1ea:	4418      	add	r0, r3
 800d1ec:	f010 001f 	ands.w	r0, r0, #31
 800d1f0:	d077      	beq.n	800d2e2 <_dtoa_r+0x8f2>
 800d1f2:	f1c0 0320 	rsb	r3, r0, #32
 800d1f6:	2b04      	cmp	r3, #4
 800d1f8:	dd6b      	ble.n	800d2d2 <_dtoa_r+0x8e2>
 800d1fa:	9b08      	ldr	r3, [sp, #32]
 800d1fc:	f1c0 001c 	rsb	r0, r0, #28
 800d200:	4403      	add	r3, r0
 800d202:	4480      	add	r8, r0
 800d204:	4406      	add	r6, r0
 800d206:	9308      	str	r3, [sp, #32]
 800d208:	f1b8 0f00 	cmp.w	r8, #0
 800d20c:	dd05      	ble.n	800d21a <_dtoa_r+0x82a>
 800d20e:	4649      	mov	r1, r9
 800d210:	4642      	mov	r2, r8
 800d212:	4658      	mov	r0, fp
 800d214:	f000 fe78 	bl	800df08 <__lshift>
 800d218:	4681      	mov	r9, r0
 800d21a:	9b08      	ldr	r3, [sp, #32]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dd05      	ble.n	800d22c <_dtoa_r+0x83c>
 800d220:	4621      	mov	r1, r4
 800d222:	461a      	mov	r2, r3
 800d224:	4658      	mov	r0, fp
 800d226:	f000 fe6f 	bl	800df08 <__lshift>
 800d22a:	4604      	mov	r4, r0
 800d22c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d059      	beq.n	800d2e6 <_dtoa_r+0x8f6>
 800d232:	4621      	mov	r1, r4
 800d234:	4648      	mov	r0, r9
 800d236:	f000 fed3 	bl	800dfe0 <__mcmp>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	da53      	bge.n	800d2e6 <_dtoa_r+0x8f6>
 800d23e:	1e7b      	subs	r3, r7, #1
 800d240:	9304      	str	r3, [sp, #16]
 800d242:	4649      	mov	r1, r9
 800d244:	2300      	movs	r3, #0
 800d246:	220a      	movs	r2, #10
 800d248:	4658      	mov	r0, fp
 800d24a:	f000 fcb1 	bl	800dbb0 <__multadd>
 800d24e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d250:	4681      	mov	r9, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 8172 	beq.w	800d53c <_dtoa_r+0xb4c>
 800d258:	2300      	movs	r3, #0
 800d25a:	4629      	mov	r1, r5
 800d25c:	220a      	movs	r2, #10
 800d25e:	4658      	mov	r0, fp
 800d260:	f000 fca6 	bl	800dbb0 <__multadd>
 800d264:	9b00      	ldr	r3, [sp, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	4605      	mov	r5, r0
 800d26a:	dc67      	bgt.n	800d33c <_dtoa_r+0x94c>
 800d26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d26e:	2b02      	cmp	r3, #2
 800d270:	dc41      	bgt.n	800d2f6 <_dtoa_r+0x906>
 800d272:	e063      	b.n	800d33c <_dtoa_r+0x94c>
 800d274:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d276:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d27a:	e746      	b.n	800d10a <_dtoa_r+0x71a>
 800d27c:	9b07      	ldr	r3, [sp, #28]
 800d27e:	1e5c      	subs	r4, r3, #1
 800d280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d282:	42a3      	cmp	r3, r4
 800d284:	bfbf      	itttt	lt
 800d286:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d288:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d28a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d28c:	1ae3      	sublt	r3, r4, r3
 800d28e:	bfb4      	ite	lt
 800d290:	18d2      	addlt	r2, r2, r3
 800d292:	1b1c      	subge	r4, r3, r4
 800d294:	9b07      	ldr	r3, [sp, #28]
 800d296:	bfbc      	itt	lt
 800d298:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d29a:	2400      	movlt	r4, #0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	bfb5      	itete	lt
 800d2a0:	eba8 0603 	sublt.w	r6, r8, r3
 800d2a4:	9b07      	ldrge	r3, [sp, #28]
 800d2a6:	2300      	movlt	r3, #0
 800d2a8:	4646      	movge	r6, r8
 800d2aa:	e730      	b.n	800d10e <_dtoa_r+0x71e>
 800d2ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d2ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d2b0:	4646      	mov	r6, r8
 800d2b2:	e735      	b.n	800d120 <_dtoa_r+0x730>
 800d2b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2b6:	e75c      	b.n	800d172 <_dtoa_r+0x782>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e788      	b.n	800d1ce <_dtoa_r+0x7de>
 800d2bc:	3fe00000 	.word	0x3fe00000
 800d2c0:	40240000 	.word	0x40240000
 800d2c4:	40140000 	.word	0x40140000
 800d2c8:	9b02      	ldr	r3, [sp, #8]
 800d2ca:	e780      	b.n	800d1ce <_dtoa_r+0x7de>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2d0:	e782      	b.n	800d1d8 <_dtoa_r+0x7e8>
 800d2d2:	d099      	beq.n	800d208 <_dtoa_r+0x818>
 800d2d4:	9a08      	ldr	r2, [sp, #32]
 800d2d6:	331c      	adds	r3, #28
 800d2d8:	441a      	add	r2, r3
 800d2da:	4498      	add	r8, r3
 800d2dc:	441e      	add	r6, r3
 800d2de:	9208      	str	r2, [sp, #32]
 800d2e0:	e792      	b.n	800d208 <_dtoa_r+0x818>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	e7f6      	b.n	800d2d4 <_dtoa_r+0x8e4>
 800d2e6:	9b07      	ldr	r3, [sp, #28]
 800d2e8:	9704      	str	r7, [sp, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	dc20      	bgt.n	800d330 <_dtoa_r+0x940>
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	dd1e      	ble.n	800d334 <_dtoa_r+0x944>
 800d2f6:	9b00      	ldr	r3, [sp, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f47f aec0 	bne.w	800d07e <_dtoa_r+0x68e>
 800d2fe:	4621      	mov	r1, r4
 800d300:	2205      	movs	r2, #5
 800d302:	4658      	mov	r0, fp
 800d304:	f000 fc54 	bl	800dbb0 <__multadd>
 800d308:	4601      	mov	r1, r0
 800d30a:	4604      	mov	r4, r0
 800d30c:	4648      	mov	r0, r9
 800d30e:	f000 fe67 	bl	800dfe0 <__mcmp>
 800d312:	2800      	cmp	r0, #0
 800d314:	f77f aeb3 	ble.w	800d07e <_dtoa_r+0x68e>
 800d318:	4656      	mov	r6, sl
 800d31a:	2331      	movs	r3, #49	@ 0x31
 800d31c:	f806 3b01 	strb.w	r3, [r6], #1
 800d320:	9b04      	ldr	r3, [sp, #16]
 800d322:	3301      	adds	r3, #1
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	e6ae      	b.n	800d086 <_dtoa_r+0x696>
 800d328:	9c07      	ldr	r4, [sp, #28]
 800d32a:	9704      	str	r7, [sp, #16]
 800d32c:	4625      	mov	r5, r4
 800d32e:	e7f3      	b.n	800d318 <_dtoa_r+0x928>
 800d330:	9b07      	ldr	r3, [sp, #28]
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 8104 	beq.w	800d544 <_dtoa_r+0xb54>
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	dd05      	ble.n	800d34c <_dtoa_r+0x95c>
 800d340:	4629      	mov	r1, r5
 800d342:	4632      	mov	r2, r6
 800d344:	4658      	mov	r0, fp
 800d346:	f000 fddf 	bl	800df08 <__lshift>
 800d34a:	4605      	mov	r5, r0
 800d34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d05a      	beq.n	800d408 <_dtoa_r+0xa18>
 800d352:	6869      	ldr	r1, [r5, #4]
 800d354:	4658      	mov	r0, fp
 800d356:	f000 fbc9 	bl	800daec <_Balloc>
 800d35a:	4606      	mov	r6, r0
 800d35c:	b928      	cbnz	r0, 800d36a <_dtoa_r+0x97a>
 800d35e:	4b84      	ldr	r3, [pc, #528]	@ (800d570 <_dtoa_r+0xb80>)
 800d360:	4602      	mov	r2, r0
 800d362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d366:	f7ff bb5a 	b.w	800ca1e <_dtoa_r+0x2e>
 800d36a:	692a      	ldr	r2, [r5, #16]
 800d36c:	3202      	adds	r2, #2
 800d36e:	0092      	lsls	r2, r2, #2
 800d370:	f105 010c 	add.w	r1, r5, #12
 800d374:	300c      	adds	r0, #12
 800d376:	f7ff faa2 	bl	800c8be <memcpy>
 800d37a:	2201      	movs	r2, #1
 800d37c:	4631      	mov	r1, r6
 800d37e:	4658      	mov	r0, fp
 800d380:	f000 fdc2 	bl	800df08 <__lshift>
 800d384:	f10a 0301 	add.w	r3, sl, #1
 800d388:	9307      	str	r3, [sp, #28]
 800d38a:	9b00      	ldr	r3, [sp, #0]
 800d38c:	4453      	add	r3, sl
 800d38e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d390:	9b02      	ldr	r3, [sp, #8]
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	462f      	mov	r7, r5
 800d398:	930a      	str	r3, [sp, #40]	@ 0x28
 800d39a:	4605      	mov	r5, r0
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	4621      	mov	r1, r4
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	4648      	mov	r0, r9
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	f7ff fa98 	bl	800c8da <quorem>
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	9002      	str	r0, [sp, #8]
 800d3ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d3b2:	4648      	mov	r0, r9
 800d3b4:	f000 fe14 	bl	800dfe0 <__mcmp>
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	9008      	str	r0, [sp, #32]
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4658      	mov	r0, fp
 800d3c0:	f000 fe2a 	bl	800e018 <__mdiff>
 800d3c4:	68c2      	ldr	r2, [r0, #12]
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	bb02      	cbnz	r2, 800d40c <_dtoa_r+0xa1c>
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	4648      	mov	r0, r9
 800d3ce:	f000 fe07 	bl	800dfe0 <__mcmp>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4658      	mov	r0, fp
 800d3d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3da:	f000 fbc7 	bl	800db6c <_Bfree>
 800d3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3e2:	9e07      	ldr	r6, [sp, #28]
 800d3e4:	ea43 0102 	orr.w	r1, r3, r2
 800d3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ea:	4319      	orrs	r1, r3
 800d3ec:	d110      	bne.n	800d410 <_dtoa_r+0xa20>
 800d3ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3f2:	d029      	beq.n	800d448 <_dtoa_r+0xa58>
 800d3f4:	9b08      	ldr	r3, [sp, #32]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	dd02      	ble.n	800d400 <_dtoa_r+0xa10>
 800d3fa:	9b02      	ldr	r3, [sp, #8]
 800d3fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d400:	9b00      	ldr	r3, [sp, #0]
 800d402:	f883 8000 	strb.w	r8, [r3]
 800d406:	e63f      	b.n	800d088 <_dtoa_r+0x698>
 800d408:	4628      	mov	r0, r5
 800d40a:	e7bb      	b.n	800d384 <_dtoa_r+0x994>
 800d40c:	2201      	movs	r2, #1
 800d40e:	e7e1      	b.n	800d3d4 <_dtoa_r+0x9e4>
 800d410:	9b08      	ldr	r3, [sp, #32]
 800d412:	2b00      	cmp	r3, #0
 800d414:	db04      	blt.n	800d420 <_dtoa_r+0xa30>
 800d416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d418:	430b      	orrs	r3, r1
 800d41a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d41c:	430b      	orrs	r3, r1
 800d41e:	d120      	bne.n	800d462 <_dtoa_r+0xa72>
 800d420:	2a00      	cmp	r2, #0
 800d422:	dded      	ble.n	800d400 <_dtoa_r+0xa10>
 800d424:	4649      	mov	r1, r9
 800d426:	2201      	movs	r2, #1
 800d428:	4658      	mov	r0, fp
 800d42a:	f000 fd6d 	bl	800df08 <__lshift>
 800d42e:	4621      	mov	r1, r4
 800d430:	4681      	mov	r9, r0
 800d432:	f000 fdd5 	bl	800dfe0 <__mcmp>
 800d436:	2800      	cmp	r0, #0
 800d438:	dc03      	bgt.n	800d442 <_dtoa_r+0xa52>
 800d43a:	d1e1      	bne.n	800d400 <_dtoa_r+0xa10>
 800d43c:	f018 0f01 	tst.w	r8, #1
 800d440:	d0de      	beq.n	800d400 <_dtoa_r+0xa10>
 800d442:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d446:	d1d8      	bne.n	800d3fa <_dtoa_r+0xa0a>
 800d448:	9a00      	ldr	r2, [sp, #0]
 800d44a:	2339      	movs	r3, #57	@ 0x39
 800d44c:	7013      	strb	r3, [r2, #0]
 800d44e:	4633      	mov	r3, r6
 800d450:	461e      	mov	r6, r3
 800d452:	3b01      	subs	r3, #1
 800d454:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d458:	2a39      	cmp	r2, #57	@ 0x39
 800d45a:	d052      	beq.n	800d502 <_dtoa_r+0xb12>
 800d45c:	3201      	adds	r2, #1
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	e612      	b.n	800d088 <_dtoa_r+0x698>
 800d462:	2a00      	cmp	r2, #0
 800d464:	dd07      	ble.n	800d476 <_dtoa_r+0xa86>
 800d466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d46a:	d0ed      	beq.n	800d448 <_dtoa_r+0xa58>
 800d46c:	9a00      	ldr	r2, [sp, #0]
 800d46e:	f108 0301 	add.w	r3, r8, #1
 800d472:	7013      	strb	r3, [r2, #0]
 800d474:	e608      	b.n	800d088 <_dtoa_r+0x698>
 800d476:	9b07      	ldr	r3, [sp, #28]
 800d478:	9a07      	ldr	r2, [sp, #28]
 800d47a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d480:	4293      	cmp	r3, r2
 800d482:	d028      	beq.n	800d4d6 <_dtoa_r+0xae6>
 800d484:	4649      	mov	r1, r9
 800d486:	2300      	movs	r3, #0
 800d488:	220a      	movs	r2, #10
 800d48a:	4658      	mov	r0, fp
 800d48c:	f000 fb90 	bl	800dbb0 <__multadd>
 800d490:	42af      	cmp	r7, r5
 800d492:	4681      	mov	r9, r0
 800d494:	f04f 0300 	mov.w	r3, #0
 800d498:	f04f 020a 	mov.w	r2, #10
 800d49c:	4639      	mov	r1, r7
 800d49e:	4658      	mov	r0, fp
 800d4a0:	d107      	bne.n	800d4b2 <_dtoa_r+0xac2>
 800d4a2:	f000 fb85 	bl	800dbb0 <__multadd>
 800d4a6:	4607      	mov	r7, r0
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	9b07      	ldr	r3, [sp, #28]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	9307      	str	r3, [sp, #28]
 800d4b0:	e774      	b.n	800d39c <_dtoa_r+0x9ac>
 800d4b2:	f000 fb7d 	bl	800dbb0 <__multadd>
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	4607      	mov	r7, r0
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	220a      	movs	r2, #10
 800d4be:	4658      	mov	r0, fp
 800d4c0:	f000 fb76 	bl	800dbb0 <__multadd>
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	e7f0      	b.n	800d4aa <_dtoa_r+0xaba>
 800d4c8:	9b00      	ldr	r3, [sp, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bfcc      	ite	gt
 800d4ce:	461e      	movgt	r6, r3
 800d4d0:	2601      	movle	r6, #1
 800d4d2:	4456      	add	r6, sl
 800d4d4:	2700      	movs	r7, #0
 800d4d6:	4649      	mov	r1, r9
 800d4d8:	2201      	movs	r2, #1
 800d4da:	4658      	mov	r0, fp
 800d4dc:	f000 fd14 	bl	800df08 <__lshift>
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	4681      	mov	r9, r0
 800d4e4:	f000 fd7c 	bl	800dfe0 <__mcmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	dcb0      	bgt.n	800d44e <_dtoa_r+0xa5e>
 800d4ec:	d102      	bne.n	800d4f4 <_dtoa_r+0xb04>
 800d4ee:	f018 0f01 	tst.w	r8, #1
 800d4f2:	d1ac      	bne.n	800d44e <_dtoa_r+0xa5e>
 800d4f4:	4633      	mov	r3, r6
 800d4f6:	461e      	mov	r6, r3
 800d4f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4fc:	2a30      	cmp	r2, #48	@ 0x30
 800d4fe:	d0fa      	beq.n	800d4f6 <_dtoa_r+0xb06>
 800d500:	e5c2      	b.n	800d088 <_dtoa_r+0x698>
 800d502:	459a      	cmp	sl, r3
 800d504:	d1a4      	bne.n	800d450 <_dtoa_r+0xa60>
 800d506:	9b04      	ldr	r3, [sp, #16]
 800d508:	3301      	adds	r3, #1
 800d50a:	9304      	str	r3, [sp, #16]
 800d50c:	2331      	movs	r3, #49	@ 0x31
 800d50e:	f88a 3000 	strb.w	r3, [sl]
 800d512:	e5b9      	b.n	800d088 <_dtoa_r+0x698>
 800d514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d516:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d574 <_dtoa_r+0xb84>
 800d51a:	b11b      	cbz	r3, 800d524 <_dtoa_r+0xb34>
 800d51c:	f10a 0308 	add.w	r3, sl, #8
 800d520:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	4650      	mov	r0, sl
 800d526:	b019      	add	sp, #100	@ 0x64
 800d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d52e:	2b01      	cmp	r3, #1
 800d530:	f77f ae37 	ble.w	800d1a2 <_dtoa_r+0x7b2>
 800d534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d536:	930a      	str	r3, [sp, #40]	@ 0x28
 800d538:	2001      	movs	r0, #1
 800d53a:	e655      	b.n	800d1e8 <_dtoa_r+0x7f8>
 800d53c:	9b00      	ldr	r3, [sp, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f77f aed6 	ble.w	800d2f0 <_dtoa_r+0x900>
 800d544:	4656      	mov	r6, sl
 800d546:	4621      	mov	r1, r4
 800d548:	4648      	mov	r0, r9
 800d54a:	f7ff f9c6 	bl	800c8da <quorem>
 800d54e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d552:	f806 8b01 	strb.w	r8, [r6], #1
 800d556:	9b00      	ldr	r3, [sp, #0]
 800d558:	eba6 020a 	sub.w	r2, r6, sl
 800d55c:	4293      	cmp	r3, r2
 800d55e:	ddb3      	ble.n	800d4c8 <_dtoa_r+0xad8>
 800d560:	4649      	mov	r1, r9
 800d562:	2300      	movs	r3, #0
 800d564:	220a      	movs	r2, #10
 800d566:	4658      	mov	r0, fp
 800d568:	f000 fb22 	bl	800dbb0 <__multadd>
 800d56c:	4681      	mov	r9, r0
 800d56e:	e7ea      	b.n	800d546 <_dtoa_r+0xb56>
 800d570:	0800f9e1 	.word	0x0800f9e1
 800d574:	0800f965 	.word	0x0800f965

0800d578 <__ssputs_r>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	688e      	ldr	r6, [r1, #8]
 800d57e:	461f      	mov	r7, r3
 800d580:	42be      	cmp	r6, r7
 800d582:	680b      	ldr	r3, [r1, #0]
 800d584:	4682      	mov	sl, r0
 800d586:	460c      	mov	r4, r1
 800d588:	4690      	mov	r8, r2
 800d58a:	d82d      	bhi.n	800d5e8 <__ssputs_r+0x70>
 800d58c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d590:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d594:	d026      	beq.n	800d5e4 <__ssputs_r+0x6c>
 800d596:	6965      	ldr	r5, [r4, #20]
 800d598:	6909      	ldr	r1, [r1, #16]
 800d59a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d59e:	eba3 0901 	sub.w	r9, r3, r1
 800d5a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5a6:	1c7b      	adds	r3, r7, #1
 800d5a8:	444b      	add	r3, r9
 800d5aa:	106d      	asrs	r5, r5, #1
 800d5ac:	429d      	cmp	r5, r3
 800d5ae:	bf38      	it	cc
 800d5b0:	461d      	movcc	r5, r3
 800d5b2:	0553      	lsls	r3, r2, #21
 800d5b4:	d527      	bpl.n	800d606 <__ssputs_r+0x8e>
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	f000 f960 	bl	800d87c <_malloc_r>
 800d5bc:	4606      	mov	r6, r0
 800d5be:	b360      	cbz	r0, 800d61a <__ssputs_r+0xa2>
 800d5c0:	6921      	ldr	r1, [r4, #16]
 800d5c2:	464a      	mov	r2, r9
 800d5c4:	f7ff f97b 	bl	800c8be <memcpy>
 800d5c8:	89a3      	ldrh	r3, [r4, #12]
 800d5ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d2:	81a3      	strh	r3, [r4, #12]
 800d5d4:	6126      	str	r6, [r4, #16]
 800d5d6:	6165      	str	r5, [r4, #20]
 800d5d8:	444e      	add	r6, r9
 800d5da:	eba5 0509 	sub.w	r5, r5, r9
 800d5de:	6026      	str	r6, [r4, #0]
 800d5e0:	60a5      	str	r5, [r4, #8]
 800d5e2:	463e      	mov	r6, r7
 800d5e4:	42be      	cmp	r6, r7
 800d5e6:	d900      	bls.n	800d5ea <__ssputs_r+0x72>
 800d5e8:	463e      	mov	r6, r7
 800d5ea:	6820      	ldr	r0, [r4, #0]
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	4641      	mov	r1, r8
 800d5f0:	f000 fe6f 	bl	800e2d2 <memmove>
 800d5f4:	68a3      	ldr	r3, [r4, #8]
 800d5f6:	1b9b      	subs	r3, r3, r6
 800d5f8:	60a3      	str	r3, [r4, #8]
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	4433      	add	r3, r6
 800d5fe:	6023      	str	r3, [r4, #0]
 800d600:	2000      	movs	r0, #0
 800d602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d606:	462a      	mov	r2, r5
 800d608:	f000 fe35 	bl	800e276 <_realloc_r>
 800d60c:	4606      	mov	r6, r0
 800d60e:	2800      	cmp	r0, #0
 800d610:	d1e0      	bne.n	800d5d4 <__ssputs_r+0x5c>
 800d612:	6921      	ldr	r1, [r4, #16]
 800d614:	4650      	mov	r0, sl
 800d616:	f000 feff 	bl	800e418 <_free_r>
 800d61a:	230c      	movs	r3, #12
 800d61c:	f8ca 3000 	str.w	r3, [sl]
 800d620:	89a3      	ldrh	r3, [r4, #12]
 800d622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d626:	81a3      	strh	r3, [r4, #12]
 800d628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d62c:	e7e9      	b.n	800d602 <__ssputs_r+0x8a>
	...

0800d630 <_svfiprintf_r>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	4698      	mov	r8, r3
 800d636:	898b      	ldrh	r3, [r1, #12]
 800d638:	061b      	lsls	r3, r3, #24
 800d63a:	b09d      	sub	sp, #116	@ 0x74
 800d63c:	4607      	mov	r7, r0
 800d63e:	460d      	mov	r5, r1
 800d640:	4614      	mov	r4, r2
 800d642:	d510      	bpl.n	800d666 <_svfiprintf_r+0x36>
 800d644:	690b      	ldr	r3, [r1, #16]
 800d646:	b973      	cbnz	r3, 800d666 <_svfiprintf_r+0x36>
 800d648:	2140      	movs	r1, #64	@ 0x40
 800d64a:	f000 f917 	bl	800d87c <_malloc_r>
 800d64e:	6028      	str	r0, [r5, #0]
 800d650:	6128      	str	r0, [r5, #16]
 800d652:	b930      	cbnz	r0, 800d662 <_svfiprintf_r+0x32>
 800d654:	230c      	movs	r3, #12
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d65c:	b01d      	add	sp, #116	@ 0x74
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d662:	2340      	movs	r3, #64	@ 0x40
 800d664:	616b      	str	r3, [r5, #20]
 800d666:	2300      	movs	r3, #0
 800d668:	9309      	str	r3, [sp, #36]	@ 0x24
 800d66a:	2320      	movs	r3, #32
 800d66c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d670:	f8cd 800c 	str.w	r8, [sp, #12]
 800d674:	2330      	movs	r3, #48	@ 0x30
 800d676:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d814 <_svfiprintf_r+0x1e4>
 800d67a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d67e:	f04f 0901 	mov.w	r9, #1
 800d682:	4623      	mov	r3, r4
 800d684:	469a      	mov	sl, r3
 800d686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68a:	b10a      	cbz	r2, 800d690 <_svfiprintf_r+0x60>
 800d68c:	2a25      	cmp	r2, #37	@ 0x25
 800d68e:	d1f9      	bne.n	800d684 <_svfiprintf_r+0x54>
 800d690:	ebba 0b04 	subs.w	fp, sl, r4
 800d694:	d00b      	beq.n	800d6ae <_svfiprintf_r+0x7e>
 800d696:	465b      	mov	r3, fp
 800d698:	4622      	mov	r2, r4
 800d69a:	4629      	mov	r1, r5
 800d69c:	4638      	mov	r0, r7
 800d69e:	f7ff ff6b 	bl	800d578 <__ssputs_r>
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	f000 80a7 	beq.w	800d7f6 <_svfiprintf_r+0x1c6>
 800d6a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6aa:	445a      	add	r2, fp
 800d6ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f000 809f 	beq.w	800d7f6 <_svfiprintf_r+0x1c6>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6c2:	f10a 0a01 	add.w	sl, sl, #1
 800d6c6:	9304      	str	r3, [sp, #16]
 800d6c8:	9307      	str	r3, [sp, #28]
 800d6ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6d0:	4654      	mov	r4, sl
 800d6d2:	2205      	movs	r2, #5
 800d6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d8:	484e      	ldr	r0, [pc, #312]	@ (800d814 <_svfiprintf_r+0x1e4>)
 800d6da:	f7f2 fd79 	bl	80001d0 <memchr>
 800d6de:	9a04      	ldr	r2, [sp, #16]
 800d6e0:	b9d8      	cbnz	r0, 800d71a <_svfiprintf_r+0xea>
 800d6e2:	06d0      	lsls	r0, r2, #27
 800d6e4:	bf44      	itt	mi
 800d6e6:	2320      	movmi	r3, #32
 800d6e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6ec:	0711      	lsls	r1, r2, #28
 800d6ee:	bf44      	itt	mi
 800d6f0:	232b      	movmi	r3, #43	@ 0x2b
 800d6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6fc:	d015      	beq.n	800d72a <_svfiprintf_r+0xfa>
 800d6fe:	9a07      	ldr	r2, [sp, #28]
 800d700:	4654      	mov	r4, sl
 800d702:	2000      	movs	r0, #0
 800d704:	f04f 0c0a 	mov.w	ip, #10
 800d708:	4621      	mov	r1, r4
 800d70a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d70e:	3b30      	subs	r3, #48	@ 0x30
 800d710:	2b09      	cmp	r3, #9
 800d712:	d94b      	bls.n	800d7ac <_svfiprintf_r+0x17c>
 800d714:	b1b0      	cbz	r0, 800d744 <_svfiprintf_r+0x114>
 800d716:	9207      	str	r2, [sp, #28]
 800d718:	e014      	b.n	800d744 <_svfiprintf_r+0x114>
 800d71a:	eba0 0308 	sub.w	r3, r0, r8
 800d71e:	fa09 f303 	lsl.w	r3, r9, r3
 800d722:	4313      	orrs	r3, r2
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	46a2      	mov	sl, r4
 800d728:	e7d2      	b.n	800d6d0 <_svfiprintf_r+0xa0>
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	1d19      	adds	r1, r3, #4
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	9103      	str	r1, [sp, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	bfbb      	ittet	lt
 800d736:	425b      	neglt	r3, r3
 800d738:	f042 0202 	orrlt.w	r2, r2, #2
 800d73c:	9307      	strge	r3, [sp, #28]
 800d73e:	9307      	strlt	r3, [sp, #28]
 800d740:	bfb8      	it	lt
 800d742:	9204      	strlt	r2, [sp, #16]
 800d744:	7823      	ldrb	r3, [r4, #0]
 800d746:	2b2e      	cmp	r3, #46	@ 0x2e
 800d748:	d10a      	bne.n	800d760 <_svfiprintf_r+0x130>
 800d74a:	7863      	ldrb	r3, [r4, #1]
 800d74c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d74e:	d132      	bne.n	800d7b6 <_svfiprintf_r+0x186>
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	1d1a      	adds	r2, r3, #4
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	9203      	str	r2, [sp, #12]
 800d758:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d75c:	3402      	adds	r4, #2
 800d75e:	9305      	str	r3, [sp, #20]
 800d760:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d824 <_svfiprintf_r+0x1f4>
 800d764:	7821      	ldrb	r1, [r4, #0]
 800d766:	2203      	movs	r2, #3
 800d768:	4650      	mov	r0, sl
 800d76a:	f7f2 fd31 	bl	80001d0 <memchr>
 800d76e:	b138      	cbz	r0, 800d780 <_svfiprintf_r+0x150>
 800d770:	9b04      	ldr	r3, [sp, #16]
 800d772:	eba0 000a 	sub.w	r0, r0, sl
 800d776:	2240      	movs	r2, #64	@ 0x40
 800d778:	4082      	lsls	r2, r0
 800d77a:	4313      	orrs	r3, r2
 800d77c:	3401      	adds	r4, #1
 800d77e:	9304      	str	r3, [sp, #16]
 800d780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d784:	4824      	ldr	r0, [pc, #144]	@ (800d818 <_svfiprintf_r+0x1e8>)
 800d786:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d78a:	2206      	movs	r2, #6
 800d78c:	f7f2 fd20 	bl	80001d0 <memchr>
 800d790:	2800      	cmp	r0, #0
 800d792:	d036      	beq.n	800d802 <_svfiprintf_r+0x1d2>
 800d794:	4b21      	ldr	r3, [pc, #132]	@ (800d81c <_svfiprintf_r+0x1ec>)
 800d796:	bb1b      	cbnz	r3, 800d7e0 <_svfiprintf_r+0x1b0>
 800d798:	9b03      	ldr	r3, [sp, #12]
 800d79a:	3307      	adds	r3, #7
 800d79c:	f023 0307 	bic.w	r3, r3, #7
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	9303      	str	r3, [sp, #12]
 800d7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a6:	4433      	add	r3, r6
 800d7a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7aa:	e76a      	b.n	800d682 <_svfiprintf_r+0x52>
 800d7ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	e7a8      	b.n	800d708 <_svfiprintf_r+0xd8>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	3401      	adds	r4, #1
 800d7ba:	9305      	str	r3, [sp, #20]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f04f 0c0a 	mov.w	ip, #10
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7c8:	3a30      	subs	r2, #48	@ 0x30
 800d7ca:	2a09      	cmp	r2, #9
 800d7cc:	d903      	bls.n	800d7d6 <_svfiprintf_r+0x1a6>
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0c6      	beq.n	800d760 <_svfiprintf_r+0x130>
 800d7d2:	9105      	str	r1, [sp, #20]
 800d7d4:	e7c4      	b.n	800d760 <_svfiprintf_r+0x130>
 800d7d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7da:	4604      	mov	r4, r0
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e7f0      	b.n	800d7c2 <_svfiprintf_r+0x192>
 800d7e0:	ab03      	add	r3, sp, #12
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	462a      	mov	r2, r5
 800d7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800d820 <_svfiprintf_r+0x1f0>)
 800d7e8:	a904      	add	r1, sp, #16
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	f7fe fac8 	bl	800bd80 <_printf_float>
 800d7f0:	1c42      	adds	r2, r0, #1
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	d1d6      	bne.n	800d7a4 <_svfiprintf_r+0x174>
 800d7f6:	89ab      	ldrh	r3, [r5, #12]
 800d7f8:	065b      	lsls	r3, r3, #25
 800d7fa:	f53f af2d 	bmi.w	800d658 <_svfiprintf_r+0x28>
 800d7fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d800:	e72c      	b.n	800d65c <_svfiprintf_r+0x2c>
 800d802:	ab03      	add	r3, sp, #12
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	462a      	mov	r2, r5
 800d808:	4b05      	ldr	r3, [pc, #20]	@ (800d820 <_svfiprintf_r+0x1f0>)
 800d80a:	a904      	add	r1, sp, #16
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7fe fd4f 	bl	800c2b0 <_printf_i>
 800d812:	e7ed      	b.n	800d7f0 <_svfiprintf_r+0x1c0>
 800d814:	0800f9f2 	.word	0x0800f9f2
 800d818:	0800f9fc 	.word	0x0800f9fc
 800d81c:	0800bd81 	.word	0x0800bd81
 800d820:	0800d579 	.word	0x0800d579
 800d824:	0800f9f8 	.word	0x0800f9f8

0800d828 <malloc>:
 800d828:	4b02      	ldr	r3, [pc, #8]	@ (800d834 <malloc+0xc>)
 800d82a:	4601      	mov	r1, r0
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	f000 b825 	b.w	800d87c <_malloc_r>
 800d832:	bf00      	nop
 800d834:	20000044 	.word	0x20000044

0800d838 <sbrk_aligned>:
 800d838:	b570      	push	{r4, r5, r6, lr}
 800d83a:	4e0f      	ldr	r6, [pc, #60]	@ (800d878 <sbrk_aligned+0x40>)
 800d83c:	460c      	mov	r4, r1
 800d83e:	6831      	ldr	r1, [r6, #0]
 800d840:	4605      	mov	r5, r0
 800d842:	b911      	cbnz	r1, 800d84a <sbrk_aligned+0x12>
 800d844:	f000 fd94 	bl	800e370 <_sbrk_r>
 800d848:	6030      	str	r0, [r6, #0]
 800d84a:	4621      	mov	r1, r4
 800d84c:	4628      	mov	r0, r5
 800d84e:	f000 fd8f 	bl	800e370 <_sbrk_r>
 800d852:	1c43      	adds	r3, r0, #1
 800d854:	d103      	bne.n	800d85e <sbrk_aligned+0x26>
 800d856:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d85a:	4620      	mov	r0, r4
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
 800d85e:	1cc4      	adds	r4, r0, #3
 800d860:	f024 0403 	bic.w	r4, r4, #3
 800d864:	42a0      	cmp	r0, r4
 800d866:	d0f8      	beq.n	800d85a <sbrk_aligned+0x22>
 800d868:	1a21      	subs	r1, r4, r0
 800d86a:	4628      	mov	r0, r5
 800d86c:	f000 fd80 	bl	800e370 <_sbrk_r>
 800d870:	3001      	adds	r0, #1
 800d872:	d1f2      	bne.n	800d85a <sbrk_aligned+0x22>
 800d874:	e7ef      	b.n	800d856 <sbrk_aligned+0x1e>
 800d876:	bf00      	nop
 800d878:	20005430 	.word	0x20005430

0800d87c <_malloc_r>:
 800d87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d880:	1ccd      	adds	r5, r1, #3
 800d882:	f025 0503 	bic.w	r5, r5, #3
 800d886:	3508      	adds	r5, #8
 800d888:	2d0c      	cmp	r5, #12
 800d88a:	bf38      	it	cc
 800d88c:	250c      	movcc	r5, #12
 800d88e:	2d00      	cmp	r5, #0
 800d890:	4606      	mov	r6, r0
 800d892:	db01      	blt.n	800d898 <_malloc_r+0x1c>
 800d894:	42a9      	cmp	r1, r5
 800d896:	d904      	bls.n	800d8a2 <_malloc_r+0x26>
 800d898:	230c      	movs	r3, #12
 800d89a:	6033      	str	r3, [r6, #0]
 800d89c:	2000      	movs	r0, #0
 800d89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d978 <_malloc_r+0xfc>
 800d8a6:	f000 f915 	bl	800dad4 <__malloc_lock>
 800d8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ae:	461c      	mov	r4, r3
 800d8b0:	bb44      	cbnz	r4, 800d904 <_malloc_r+0x88>
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7ff ffbf 	bl	800d838 <sbrk_aligned>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	4604      	mov	r4, r0
 800d8be:	d158      	bne.n	800d972 <_malloc_r+0xf6>
 800d8c0:	f8d8 4000 	ldr.w	r4, [r8]
 800d8c4:	4627      	mov	r7, r4
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	d143      	bne.n	800d952 <_malloc_r+0xd6>
 800d8ca:	2c00      	cmp	r4, #0
 800d8cc:	d04b      	beq.n	800d966 <_malloc_r+0xea>
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	eb04 0903 	add.w	r9, r4, r3
 800d8d8:	f000 fd4a 	bl	800e370 <_sbrk_r>
 800d8dc:	4581      	cmp	r9, r0
 800d8de:	d142      	bne.n	800d966 <_malloc_r+0xea>
 800d8e0:	6821      	ldr	r1, [r4, #0]
 800d8e2:	1a6d      	subs	r5, r5, r1
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7ff ffa6 	bl	800d838 <sbrk_aligned>
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	d03a      	beq.n	800d966 <_malloc_r+0xea>
 800d8f0:	6823      	ldr	r3, [r4, #0]
 800d8f2:	442b      	add	r3, r5
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8fa:	685a      	ldr	r2, [r3, #4]
 800d8fc:	bb62      	cbnz	r2, 800d958 <_malloc_r+0xdc>
 800d8fe:	f8c8 7000 	str.w	r7, [r8]
 800d902:	e00f      	b.n	800d924 <_malloc_r+0xa8>
 800d904:	6822      	ldr	r2, [r4, #0]
 800d906:	1b52      	subs	r2, r2, r5
 800d908:	d420      	bmi.n	800d94c <_malloc_r+0xd0>
 800d90a:	2a0b      	cmp	r2, #11
 800d90c:	d917      	bls.n	800d93e <_malloc_r+0xc2>
 800d90e:	1961      	adds	r1, r4, r5
 800d910:	42a3      	cmp	r3, r4
 800d912:	6025      	str	r5, [r4, #0]
 800d914:	bf18      	it	ne
 800d916:	6059      	strne	r1, [r3, #4]
 800d918:	6863      	ldr	r3, [r4, #4]
 800d91a:	bf08      	it	eq
 800d91c:	f8c8 1000 	streq.w	r1, [r8]
 800d920:	5162      	str	r2, [r4, r5]
 800d922:	604b      	str	r3, [r1, #4]
 800d924:	4630      	mov	r0, r6
 800d926:	f000 f8db 	bl	800dae0 <__malloc_unlock>
 800d92a:	f104 000b 	add.w	r0, r4, #11
 800d92e:	1d23      	adds	r3, r4, #4
 800d930:	f020 0007 	bic.w	r0, r0, #7
 800d934:	1ac2      	subs	r2, r0, r3
 800d936:	bf1c      	itt	ne
 800d938:	1a1b      	subne	r3, r3, r0
 800d93a:	50a3      	strne	r3, [r4, r2]
 800d93c:	e7af      	b.n	800d89e <_malloc_r+0x22>
 800d93e:	6862      	ldr	r2, [r4, #4]
 800d940:	42a3      	cmp	r3, r4
 800d942:	bf0c      	ite	eq
 800d944:	f8c8 2000 	streq.w	r2, [r8]
 800d948:	605a      	strne	r2, [r3, #4]
 800d94a:	e7eb      	b.n	800d924 <_malloc_r+0xa8>
 800d94c:	4623      	mov	r3, r4
 800d94e:	6864      	ldr	r4, [r4, #4]
 800d950:	e7ae      	b.n	800d8b0 <_malloc_r+0x34>
 800d952:	463c      	mov	r4, r7
 800d954:	687f      	ldr	r7, [r7, #4]
 800d956:	e7b6      	b.n	800d8c6 <_malloc_r+0x4a>
 800d958:	461a      	mov	r2, r3
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	42a3      	cmp	r3, r4
 800d95e:	d1fb      	bne.n	800d958 <_malloc_r+0xdc>
 800d960:	2300      	movs	r3, #0
 800d962:	6053      	str	r3, [r2, #4]
 800d964:	e7de      	b.n	800d924 <_malloc_r+0xa8>
 800d966:	230c      	movs	r3, #12
 800d968:	6033      	str	r3, [r6, #0]
 800d96a:	4630      	mov	r0, r6
 800d96c:	f000 f8b8 	bl	800dae0 <__malloc_unlock>
 800d970:	e794      	b.n	800d89c <_malloc_r+0x20>
 800d972:	6005      	str	r5, [r0, #0]
 800d974:	e7d6      	b.n	800d924 <_malloc_r+0xa8>
 800d976:	bf00      	nop
 800d978:	20005434 	.word	0x20005434

0800d97c <__sflush_r>:
 800d97c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d984:	0716      	lsls	r6, r2, #28
 800d986:	4605      	mov	r5, r0
 800d988:	460c      	mov	r4, r1
 800d98a:	d454      	bmi.n	800da36 <__sflush_r+0xba>
 800d98c:	684b      	ldr	r3, [r1, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	dc02      	bgt.n	800d998 <__sflush_r+0x1c>
 800d992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d994:	2b00      	cmp	r3, #0
 800d996:	dd48      	ble.n	800da2a <__sflush_r+0xae>
 800d998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d99a:	2e00      	cmp	r6, #0
 800d99c:	d045      	beq.n	800da2a <__sflush_r+0xae>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9a4:	682f      	ldr	r7, [r5, #0]
 800d9a6:	6a21      	ldr	r1, [r4, #32]
 800d9a8:	602b      	str	r3, [r5, #0]
 800d9aa:	d030      	beq.n	800da0e <__sflush_r+0x92>
 800d9ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	0759      	lsls	r1, r3, #29
 800d9b2:	d505      	bpl.n	800d9c0 <__sflush_r+0x44>
 800d9b4:	6863      	ldr	r3, [r4, #4]
 800d9b6:	1ad2      	subs	r2, r2, r3
 800d9b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9ba:	b10b      	cbz	r3, 800d9c0 <__sflush_r+0x44>
 800d9bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9be:	1ad2      	subs	r2, r2, r3
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9c4:	6a21      	ldr	r1, [r4, #32]
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	47b0      	blx	r6
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	d106      	bne.n	800d9de <__sflush_r+0x62>
 800d9d0:	6829      	ldr	r1, [r5, #0]
 800d9d2:	291d      	cmp	r1, #29
 800d9d4:	d82b      	bhi.n	800da2e <__sflush_r+0xb2>
 800d9d6:	4a2a      	ldr	r2, [pc, #168]	@ (800da80 <__sflush_r+0x104>)
 800d9d8:	410a      	asrs	r2, r1
 800d9da:	07d6      	lsls	r6, r2, #31
 800d9dc:	d427      	bmi.n	800da2e <__sflush_r+0xb2>
 800d9de:	2200      	movs	r2, #0
 800d9e0:	6062      	str	r2, [r4, #4]
 800d9e2:	04d9      	lsls	r1, r3, #19
 800d9e4:	6922      	ldr	r2, [r4, #16]
 800d9e6:	6022      	str	r2, [r4, #0]
 800d9e8:	d504      	bpl.n	800d9f4 <__sflush_r+0x78>
 800d9ea:	1c42      	adds	r2, r0, #1
 800d9ec:	d101      	bne.n	800d9f2 <__sflush_r+0x76>
 800d9ee:	682b      	ldr	r3, [r5, #0]
 800d9f0:	b903      	cbnz	r3, 800d9f4 <__sflush_r+0x78>
 800d9f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9f6:	602f      	str	r7, [r5, #0]
 800d9f8:	b1b9      	cbz	r1, 800da2a <__sflush_r+0xae>
 800d9fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9fe:	4299      	cmp	r1, r3
 800da00:	d002      	beq.n	800da08 <__sflush_r+0x8c>
 800da02:	4628      	mov	r0, r5
 800da04:	f000 fd08 	bl	800e418 <_free_r>
 800da08:	2300      	movs	r3, #0
 800da0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800da0c:	e00d      	b.n	800da2a <__sflush_r+0xae>
 800da0e:	2301      	movs	r3, #1
 800da10:	4628      	mov	r0, r5
 800da12:	47b0      	blx	r6
 800da14:	4602      	mov	r2, r0
 800da16:	1c50      	adds	r0, r2, #1
 800da18:	d1c9      	bne.n	800d9ae <__sflush_r+0x32>
 800da1a:	682b      	ldr	r3, [r5, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0c6      	beq.n	800d9ae <__sflush_r+0x32>
 800da20:	2b1d      	cmp	r3, #29
 800da22:	d001      	beq.n	800da28 <__sflush_r+0xac>
 800da24:	2b16      	cmp	r3, #22
 800da26:	d11e      	bne.n	800da66 <__sflush_r+0xea>
 800da28:	602f      	str	r7, [r5, #0]
 800da2a:	2000      	movs	r0, #0
 800da2c:	e022      	b.n	800da74 <__sflush_r+0xf8>
 800da2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da32:	b21b      	sxth	r3, r3
 800da34:	e01b      	b.n	800da6e <__sflush_r+0xf2>
 800da36:	690f      	ldr	r7, [r1, #16]
 800da38:	2f00      	cmp	r7, #0
 800da3a:	d0f6      	beq.n	800da2a <__sflush_r+0xae>
 800da3c:	0793      	lsls	r3, r2, #30
 800da3e:	680e      	ldr	r6, [r1, #0]
 800da40:	bf08      	it	eq
 800da42:	694b      	ldreq	r3, [r1, #20]
 800da44:	600f      	str	r7, [r1, #0]
 800da46:	bf18      	it	ne
 800da48:	2300      	movne	r3, #0
 800da4a:	eba6 0807 	sub.w	r8, r6, r7
 800da4e:	608b      	str	r3, [r1, #8]
 800da50:	f1b8 0f00 	cmp.w	r8, #0
 800da54:	dde9      	ble.n	800da2a <__sflush_r+0xae>
 800da56:	6a21      	ldr	r1, [r4, #32]
 800da58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da5a:	4643      	mov	r3, r8
 800da5c:	463a      	mov	r2, r7
 800da5e:	4628      	mov	r0, r5
 800da60:	47b0      	blx	r6
 800da62:	2800      	cmp	r0, #0
 800da64:	dc08      	bgt.n	800da78 <__sflush_r+0xfc>
 800da66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da78:	4407      	add	r7, r0
 800da7a:	eba8 0800 	sub.w	r8, r8, r0
 800da7e:	e7e7      	b.n	800da50 <__sflush_r+0xd4>
 800da80:	dfbffffe 	.word	0xdfbffffe

0800da84 <_fflush_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	690b      	ldr	r3, [r1, #16]
 800da88:	4605      	mov	r5, r0
 800da8a:	460c      	mov	r4, r1
 800da8c:	b913      	cbnz	r3, 800da94 <_fflush_r+0x10>
 800da8e:	2500      	movs	r5, #0
 800da90:	4628      	mov	r0, r5
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	b118      	cbz	r0, 800da9e <_fflush_r+0x1a>
 800da96:	6a03      	ldr	r3, [r0, #32]
 800da98:	b90b      	cbnz	r3, 800da9e <_fflush_r+0x1a>
 800da9a:	f7fe fe09 	bl	800c6b0 <__sinit>
 800da9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0f3      	beq.n	800da8e <_fflush_r+0xa>
 800daa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800daa8:	07d0      	lsls	r0, r2, #31
 800daaa:	d404      	bmi.n	800dab6 <_fflush_r+0x32>
 800daac:	0599      	lsls	r1, r3, #22
 800daae:	d402      	bmi.n	800dab6 <_fflush_r+0x32>
 800dab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dab2:	f7fe ff02 	bl	800c8ba <__retarget_lock_acquire_recursive>
 800dab6:	4628      	mov	r0, r5
 800dab8:	4621      	mov	r1, r4
 800daba:	f7ff ff5f 	bl	800d97c <__sflush_r>
 800dabe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dac0:	07da      	lsls	r2, r3, #31
 800dac2:	4605      	mov	r5, r0
 800dac4:	d4e4      	bmi.n	800da90 <_fflush_r+0xc>
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	059b      	lsls	r3, r3, #22
 800daca:	d4e1      	bmi.n	800da90 <_fflush_r+0xc>
 800dacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dace:	f7fe fef5 	bl	800c8bc <__retarget_lock_release_recursive>
 800dad2:	e7dd      	b.n	800da90 <_fflush_r+0xc>

0800dad4 <__malloc_lock>:
 800dad4:	4801      	ldr	r0, [pc, #4]	@ (800dadc <__malloc_lock+0x8>)
 800dad6:	f7fe bef0 	b.w	800c8ba <__retarget_lock_acquire_recursive>
 800dada:	bf00      	nop
 800dadc:	2000542c 	.word	0x2000542c

0800dae0 <__malloc_unlock>:
 800dae0:	4801      	ldr	r0, [pc, #4]	@ (800dae8 <__malloc_unlock+0x8>)
 800dae2:	f7fe beeb 	b.w	800c8bc <__retarget_lock_release_recursive>
 800dae6:	bf00      	nop
 800dae8:	2000542c 	.word	0x2000542c

0800daec <_Balloc>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	69c6      	ldr	r6, [r0, #28]
 800daf0:	4604      	mov	r4, r0
 800daf2:	460d      	mov	r5, r1
 800daf4:	b976      	cbnz	r6, 800db14 <_Balloc+0x28>
 800daf6:	2010      	movs	r0, #16
 800daf8:	f7ff fe96 	bl	800d828 <malloc>
 800dafc:	4602      	mov	r2, r0
 800dafe:	61e0      	str	r0, [r4, #28]
 800db00:	b920      	cbnz	r0, 800db0c <_Balloc+0x20>
 800db02:	4b18      	ldr	r3, [pc, #96]	@ (800db64 <_Balloc+0x78>)
 800db04:	4818      	ldr	r0, [pc, #96]	@ (800db68 <_Balloc+0x7c>)
 800db06:	216b      	movs	r1, #107	@ 0x6b
 800db08:	f000 fc54 	bl	800e3b4 <__assert_func>
 800db0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db10:	6006      	str	r6, [r0, #0]
 800db12:	60c6      	str	r6, [r0, #12]
 800db14:	69e6      	ldr	r6, [r4, #28]
 800db16:	68f3      	ldr	r3, [r6, #12]
 800db18:	b183      	cbz	r3, 800db3c <_Balloc+0x50>
 800db1a:	69e3      	ldr	r3, [r4, #28]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db22:	b9b8      	cbnz	r0, 800db54 <_Balloc+0x68>
 800db24:	2101      	movs	r1, #1
 800db26:	fa01 f605 	lsl.w	r6, r1, r5
 800db2a:	1d72      	adds	r2, r6, #5
 800db2c:	0092      	lsls	r2, r2, #2
 800db2e:	4620      	mov	r0, r4
 800db30:	f000 fc5e 	bl	800e3f0 <_calloc_r>
 800db34:	b160      	cbz	r0, 800db50 <_Balloc+0x64>
 800db36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db3a:	e00e      	b.n	800db5a <_Balloc+0x6e>
 800db3c:	2221      	movs	r2, #33	@ 0x21
 800db3e:	2104      	movs	r1, #4
 800db40:	4620      	mov	r0, r4
 800db42:	f000 fc55 	bl	800e3f0 <_calloc_r>
 800db46:	69e3      	ldr	r3, [r4, #28]
 800db48:	60f0      	str	r0, [r6, #12]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1e4      	bne.n	800db1a <_Balloc+0x2e>
 800db50:	2000      	movs	r0, #0
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	6802      	ldr	r2, [r0, #0]
 800db56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db5a:	2300      	movs	r3, #0
 800db5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db60:	e7f7      	b.n	800db52 <_Balloc+0x66>
 800db62:	bf00      	nop
 800db64:	0800f972 	.word	0x0800f972
 800db68:	0800fa03 	.word	0x0800fa03

0800db6c <_Bfree>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	69c6      	ldr	r6, [r0, #28]
 800db70:	4605      	mov	r5, r0
 800db72:	460c      	mov	r4, r1
 800db74:	b976      	cbnz	r6, 800db94 <_Bfree+0x28>
 800db76:	2010      	movs	r0, #16
 800db78:	f7ff fe56 	bl	800d828 <malloc>
 800db7c:	4602      	mov	r2, r0
 800db7e:	61e8      	str	r0, [r5, #28]
 800db80:	b920      	cbnz	r0, 800db8c <_Bfree+0x20>
 800db82:	4b09      	ldr	r3, [pc, #36]	@ (800dba8 <_Bfree+0x3c>)
 800db84:	4809      	ldr	r0, [pc, #36]	@ (800dbac <_Bfree+0x40>)
 800db86:	218f      	movs	r1, #143	@ 0x8f
 800db88:	f000 fc14 	bl	800e3b4 <__assert_func>
 800db8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db90:	6006      	str	r6, [r0, #0]
 800db92:	60c6      	str	r6, [r0, #12]
 800db94:	b13c      	cbz	r4, 800dba6 <_Bfree+0x3a>
 800db96:	69eb      	ldr	r3, [r5, #28]
 800db98:	6862      	ldr	r2, [r4, #4]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dba0:	6021      	str	r1, [r4, #0]
 800dba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dba6:	bd70      	pop	{r4, r5, r6, pc}
 800dba8:	0800f972 	.word	0x0800f972
 800dbac:	0800fa03 	.word	0x0800fa03

0800dbb0 <__multadd>:
 800dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	690d      	ldr	r5, [r1, #16]
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	461e      	mov	r6, r3
 800dbbc:	f101 0c14 	add.w	ip, r1, #20
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	f8dc 3000 	ldr.w	r3, [ip]
 800dbc6:	b299      	uxth	r1, r3
 800dbc8:	fb02 6101 	mla	r1, r2, r1, r6
 800dbcc:	0c1e      	lsrs	r6, r3, #16
 800dbce:	0c0b      	lsrs	r3, r1, #16
 800dbd0:	fb02 3306 	mla	r3, r2, r6, r3
 800dbd4:	b289      	uxth	r1, r1
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbdc:	4285      	cmp	r5, r0
 800dbde:	f84c 1b04 	str.w	r1, [ip], #4
 800dbe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbe6:	dcec      	bgt.n	800dbc2 <__multadd+0x12>
 800dbe8:	b30e      	cbz	r6, 800dc2e <__multadd+0x7e>
 800dbea:	68a3      	ldr	r3, [r4, #8]
 800dbec:	42ab      	cmp	r3, r5
 800dbee:	dc19      	bgt.n	800dc24 <__multadd+0x74>
 800dbf0:	6861      	ldr	r1, [r4, #4]
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	3101      	adds	r1, #1
 800dbf6:	f7ff ff79 	bl	800daec <_Balloc>
 800dbfa:	4680      	mov	r8, r0
 800dbfc:	b928      	cbnz	r0, 800dc0a <__multadd+0x5a>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	4b0c      	ldr	r3, [pc, #48]	@ (800dc34 <__multadd+0x84>)
 800dc02:	480d      	ldr	r0, [pc, #52]	@ (800dc38 <__multadd+0x88>)
 800dc04:	21ba      	movs	r1, #186	@ 0xba
 800dc06:	f000 fbd5 	bl	800e3b4 <__assert_func>
 800dc0a:	6922      	ldr	r2, [r4, #16]
 800dc0c:	3202      	adds	r2, #2
 800dc0e:	f104 010c 	add.w	r1, r4, #12
 800dc12:	0092      	lsls	r2, r2, #2
 800dc14:	300c      	adds	r0, #12
 800dc16:	f7fe fe52 	bl	800c8be <memcpy>
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4638      	mov	r0, r7
 800dc1e:	f7ff ffa5 	bl	800db6c <_Bfree>
 800dc22:	4644      	mov	r4, r8
 800dc24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc28:	3501      	adds	r5, #1
 800dc2a:	615e      	str	r6, [r3, #20]
 800dc2c:	6125      	str	r5, [r4, #16]
 800dc2e:	4620      	mov	r0, r4
 800dc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc34:	0800f9e1 	.word	0x0800f9e1
 800dc38:	0800fa03 	.word	0x0800fa03

0800dc3c <__hi0bits>:
 800dc3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc40:	4603      	mov	r3, r0
 800dc42:	bf36      	itet	cc
 800dc44:	0403      	lslcc	r3, r0, #16
 800dc46:	2000      	movcs	r0, #0
 800dc48:	2010      	movcc	r0, #16
 800dc4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc4e:	bf3c      	itt	cc
 800dc50:	021b      	lslcc	r3, r3, #8
 800dc52:	3008      	addcc	r0, #8
 800dc54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc58:	bf3c      	itt	cc
 800dc5a:	011b      	lslcc	r3, r3, #4
 800dc5c:	3004      	addcc	r0, #4
 800dc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc62:	bf3c      	itt	cc
 800dc64:	009b      	lslcc	r3, r3, #2
 800dc66:	3002      	addcc	r0, #2
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	db05      	blt.n	800dc78 <__hi0bits+0x3c>
 800dc6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dc70:	f100 0001 	add.w	r0, r0, #1
 800dc74:	bf08      	it	eq
 800dc76:	2020      	moveq	r0, #32
 800dc78:	4770      	bx	lr

0800dc7a <__lo0bits>:
 800dc7a:	6803      	ldr	r3, [r0, #0]
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	f013 0007 	ands.w	r0, r3, #7
 800dc82:	d00b      	beq.n	800dc9c <__lo0bits+0x22>
 800dc84:	07d9      	lsls	r1, r3, #31
 800dc86:	d421      	bmi.n	800dccc <__lo0bits+0x52>
 800dc88:	0798      	lsls	r0, r3, #30
 800dc8a:	bf49      	itett	mi
 800dc8c:	085b      	lsrmi	r3, r3, #1
 800dc8e:	089b      	lsrpl	r3, r3, #2
 800dc90:	2001      	movmi	r0, #1
 800dc92:	6013      	strmi	r3, [r2, #0]
 800dc94:	bf5c      	itt	pl
 800dc96:	6013      	strpl	r3, [r2, #0]
 800dc98:	2002      	movpl	r0, #2
 800dc9a:	4770      	bx	lr
 800dc9c:	b299      	uxth	r1, r3
 800dc9e:	b909      	cbnz	r1, 800dca4 <__lo0bits+0x2a>
 800dca0:	0c1b      	lsrs	r3, r3, #16
 800dca2:	2010      	movs	r0, #16
 800dca4:	b2d9      	uxtb	r1, r3
 800dca6:	b909      	cbnz	r1, 800dcac <__lo0bits+0x32>
 800dca8:	3008      	adds	r0, #8
 800dcaa:	0a1b      	lsrs	r3, r3, #8
 800dcac:	0719      	lsls	r1, r3, #28
 800dcae:	bf04      	itt	eq
 800dcb0:	091b      	lsreq	r3, r3, #4
 800dcb2:	3004      	addeq	r0, #4
 800dcb4:	0799      	lsls	r1, r3, #30
 800dcb6:	bf04      	itt	eq
 800dcb8:	089b      	lsreq	r3, r3, #2
 800dcba:	3002      	addeq	r0, #2
 800dcbc:	07d9      	lsls	r1, r3, #31
 800dcbe:	d403      	bmi.n	800dcc8 <__lo0bits+0x4e>
 800dcc0:	085b      	lsrs	r3, r3, #1
 800dcc2:	f100 0001 	add.w	r0, r0, #1
 800dcc6:	d003      	beq.n	800dcd0 <__lo0bits+0x56>
 800dcc8:	6013      	str	r3, [r2, #0]
 800dcca:	4770      	bx	lr
 800dccc:	2000      	movs	r0, #0
 800dcce:	4770      	bx	lr
 800dcd0:	2020      	movs	r0, #32
 800dcd2:	4770      	bx	lr

0800dcd4 <__i2b>:
 800dcd4:	b510      	push	{r4, lr}
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	2101      	movs	r1, #1
 800dcda:	f7ff ff07 	bl	800daec <_Balloc>
 800dcde:	4602      	mov	r2, r0
 800dce0:	b928      	cbnz	r0, 800dcee <__i2b+0x1a>
 800dce2:	4b05      	ldr	r3, [pc, #20]	@ (800dcf8 <__i2b+0x24>)
 800dce4:	4805      	ldr	r0, [pc, #20]	@ (800dcfc <__i2b+0x28>)
 800dce6:	f240 1145 	movw	r1, #325	@ 0x145
 800dcea:	f000 fb63 	bl	800e3b4 <__assert_func>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	6144      	str	r4, [r0, #20]
 800dcf2:	6103      	str	r3, [r0, #16]
 800dcf4:	bd10      	pop	{r4, pc}
 800dcf6:	bf00      	nop
 800dcf8:	0800f9e1 	.word	0x0800f9e1
 800dcfc:	0800fa03 	.word	0x0800fa03

0800dd00 <__multiply>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	4614      	mov	r4, r2
 800dd06:	690a      	ldr	r2, [r1, #16]
 800dd08:	6923      	ldr	r3, [r4, #16]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	bfa8      	it	ge
 800dd0e:	4623      	movge	r3, r4
 800dd10:	460f      	mov	r7, r1
 800dd12:	bfa4      	itt	ge
 800dd14:	460c      	movge	r4, r1
 800dd16:	461f      	movge	r7, r3
 800dd18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd20:	68a3      	ldr	r3, [r4, #8]
 800dd22:	6861      	ldr	r1, [r4, #4]
 800dd24:	eb0a 0609 	add.w	r6, sl, r9
 800dd28:	42b3      	cmp	r3, r6
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	bfb8      	it	lt
 800dd2e:	3101      	addlt	r1, #1
 800dd30:	f7ff fedc 	bl	800daec <_Balloc>
 800dd34:	b930      	cbnz	r0, 800dd44 <__multiply+0x44>
 800dd36:	4602      	mov	r2, r0
 800dd38:	4b44      	ldr	r3, [pc, #272]	@ (800de4c <__multiply+0x14c>)
 800dd3a:	4845      	ldr	r0, [pc, #276]	@ (800de50 <__multiply+0x150>)
 800dd3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd40:	f000 fb38 	bl	800e3b4 <__assert_func>
 800dd44:	f100 0514 	add.w	r5, r0, #20
 800dd48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd4c:	462b      	mov	r3, r5
 800dd4e:	2200      	movs	r2, #0
 800dd50:	4543      	cmp	r3, r8
 800dd52:	d321      	bcc.n	800dd98 <__multiply+0x98>
 800dd54:	f107 0114 	add.w	r1, r7, #20
 800dd58:	f104 0214 	add.w	r2, r4, #20
 800dd5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd64:	9302      	str	r3, [sp, #8]
 800dd66:	1b13      	subs	r3, r2, r4
 800dd68:	3b15      	subs	r3, #21
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	3304      	adds	r3, #4
 800dd70:	f104 0715 	add.w	r7, r4, #21
 800dd74:	42ba      	cmp	r2, r7
 800dd76:	bf38      	it	cc
 800dd78:	2304      	movcc	r3, #4
 800dd7a:	9301      	str	r3, [sp, #4]
 800dd7c:	9b02      	ldr	r3, [sp, #8]
 800dd7e:	9103      	str	r1, [sp, #12]
 800dd80:	428b      	cmp	r3, r1
 800dd82:	d80c      	bhi.n	800dd9e <__multiply+0x9e>
 800dd84:	2e00      	cmp	r6, #0
 800dd86:	dd03      	ble.n	800dd90 <__multiply+0x90>
 800dd88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d05b      	beq.n	800de48 <__multiply+0x148>
 800dd90:	6106      	str	r6, [r0, #16]
 800dd92:	b005      	add	sp, #20
 800dd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd98:	f843 2b04 	str.w	r2, [r3], #4
 800dd9c:	e7d8      	b.n	800dd50 <__multiply+0x50>
 800dd9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800dda2:	f1ba 0f00 	cmp.w	sl, #0
 800dda6:	d024      	beq.n	800ddf2 <__multiply+0xf2>
 800dda8:	f104 0e14 	add.w	lr, r4, #20
 800ddac:	46a9      	mov	r9, r5
 800ddae:	f04f 0c00 	mov.w	ip, #0
 800ddb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddb6:	f8d9 3000 	ldr.w	r3, [r9]
 800ddba:	fa1f fb87 	uxth.w	fp, r7
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ddc8:	f8d9 7000 	ldr.w	r7, [r9]
 800ddcc:	4463      	add	r3, ip
 800ddce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ddd2:	fb0a c70b 	mla	r7, sl, fp, ip
 800ddd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dde0:	4572      	cmp	r2, lr
 800dde2:	f849 3b04 	str.w	r3, [r9], #4
 800dde6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ddea:	d8e2      	bhi.n	800ddb2 <__multiply+0xb2>
 800ddec:	9b01      	ldr	r3, [sp, #4]
 800ddee:	f845 c003 	str.w	ip, [r5, r3]
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ddf8:	3104      	adds	r1, #4
 800ddfa:	f1b9 0f00 	cmp.w	r9, #0
 800ddfe:	d021      	beq.n	800de44 <__multiply+0x144>
 800de00:	682b      	ldr	r3, [r5, #0]
 800de02:	f104 0c14 	add.w	ip, r4, #20
 800de06:	46ae      	mov	lr, r5
 800de08:	f04f 0a00 	mov.w	sl, #0
 800de0c:	f8bc b000 	ldrh.w	fp, [ip]
 800de10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de14:	fb09 770b 	mla	r7, r9, fp, r7
 800de18:	4457      	add	r7, sl
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de20:	f84e 3b04 	str.w	r3, [lr], #4
 800de24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de2c:	f8be 3000 	ldrh.w	r3, [lr]
 800de30:	fb09 330a 	mla	r3, r9, sl, r3
 800de34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de38:	4562      	cmp	r2, ip
 800de3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de3e:	d8e5      	bhi.n	800de0c <__multiply+0x10c>
 800de40:	9f01      	ldr	r7, [sp, #4]
 800de42:	51eb      	str	r3, [r5, r7]
 800de44:	3504      	adds	r5, #4
 800de46:	e799      	b.n	800dd7c <__multiply+0x7c>
 800de48:	3e01      	subs	r6, #1
 800de4a:	e79b      	b.n	800dd84 <__multiply+0x84>
 800de4c:	0800f9e1 	.word	0x0800f9e1
 800de50:	0800fa03 	.word	0x0800fa03

0800de54 <__pow5mult>:
 800de54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de58:	4615      	mov	r5, r2
 800de5a:	f012 0203 	ands.w	r2, r2, #3
 800de5e:	4607      	mov	r7, r0
 800de60:	460e      	mov	r6, r1
 800de62:	d007      	beq.n	800de74 <__pow5mult+0x20>
 800de64:	4c25      	ldr	r4, [pc, #148]	@ (800defc <__pow5mult+0xa8>)
 800de66:	3a01      	subs	r2, #1
 800de68:	2300      	movs	r3, #0
 800de6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de6e:	f7ff fe9f 	bl	800dbb0 <__multadd>
 800de72:	4606      	mov	r6, r0
 800de74:	10ad      	asrs	r5, r5, #2
 800de76:	d03d      	beq.n	800def4 <__pow5mult+0xa0>
 800de78:	69fc      	ldr	r4, [r7, #28]
 800de7a:	b97c      	cbnz	r4, 800de9c <__pow5mult+0x48>
 800de7c:	2010      	movs	r0, #16
 800de7e:	f7ff fcd3 	bl	800d828 <malloc>
 800de82:	4602      	mov	r2, r0
 800de84:	61f8      	str	r0, [r7, #28]
 800de86:	b928      	cbnz	r0, 800de94 <__pow5mult+0x40>
 800de88:	4b1d      	ldr	r3, [pc, #116]	@ (800df00 <__pow5mult+0xac>)
 800de8a:	481e      	ldr	r0, [pc, #120]	@ (800df04 <__pow5mult+0xb0>)
 800de8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800de90:	f000 fa90 	bl	800e3b4 <__assert_func>
 800de94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de98:	6004      	str	r4, [r0, #0]
 800de9a:	60c4      	str	r4, [r0, #12]
 800de9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dea4:	b94c      	cbnz	r4, 800deba <__pow5mult+0x66>
 800dea6:	f240 2171 	movw	r1, #625	@ 0x271
 800deaa:	4638      	mov	r0, r7
 800deac:	f7ff ff12 	bl	800dcd4 <__i2b>
 800deb0:	2300      	movs	r3, #0
 800deb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800deb6:	4604      	mov	r4, r0
 800deb8:	6003      	str	r3, [r0, #0]
 800deba:	f04f 0900 	mov.w	r9, #0
 800debe:	07eb      	lsls	r3, r5, #31
 800dec0:	d50a      	bpl.n	800ded8 <__pow5mult+0x84>
 800dec2:	4631      	mov	r1, r6
 800dec4:	4622      	mov	r2, r4
 800dec6:	4638      	mov	r0, r7
 800dec8:	f7ff ff1a 	bl	800dd00 <__multiply>
 800decc:	4631      	mov	r1, r6
 800dece:	4680      	mov	r8, r0
 800ded0:	4638      	mov	r0, r7
 800ded2:	f7ff fe4b 	bl	800db6c <_Bfree>
 800ded6:	4646      	mov	r6, r8
 800ded8:	106d      	asrs	r5, r5, #1
 800deda:	d00b      	beq.n	800def4 <__pow5mult+0xa0>
 800dedc:	6820      	ldr	r0, [r4, #0]
 800dede:	b938      	cbnz	r0, 800def0 <__pow5mult+0x9c>
 800dee0:	4622      	mov	r2, r4
 800dee2:	4621      	mov	r1, r4
 800dee4:	4638      	mov	r0, r7
 800dee6:	f7ff ff0b 	bl	800dd00 <__multiply>
 800deea:	6020      	str	r0, [r4, #0]
 800deec:	f8c0 9000 	str.w	r9, [r0]
 800def0:	4604      	mov	r4, r0
 800def2:	e7e4      	b.n	800debe <__pow5mult+0x6a>
 800def4:	4630      	mov	r0, r6
 800def6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defa:	bf00      	nop
 800defc:	0800fa5c 	.word	0x0800fa5c
 800df00:	0800f972 	.word	0x0800f972
 800df04:	0800fa03 	.word	0x0800fa03

0800df08 <__lshift>:
 800df08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df0c:	460c      	mov	r4, r1
 800df0e:	6849      	ldr	r1, [r1, #4]
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df16:	68a3      	ldr	r3, [r4, #8]
 800df18:	4607      	mov	r7, r0
 800df1a:	4691      	mov	r9, r2
 800df1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df20:	f108 0601 	add.w	r6, r8, #1
 800df24:	42b3      	cmp	r3, r6
 800df26:	db0b      	blt.n	800df40 <__lshift+0x38>
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff fddf 	bl	800daec <_Balloc>
 800df2e:	4605      	mov	r5, r0
 800df30:	b948      	cbnz	r0, 800df46 <__lshift+0x3e>
 800df32:	4602      	mov	r2, r0
 800df34:	4b28      	ldr	r3, [pc, #160]	@ (800dfd8 <__lshift+0xd0>)
 800df36:	4829      	ldr	r0, [pc, #164]	@ (800dfdc <__lshift+0xd4>)
 800df38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df3c:	f000 fa3a 	bl	800e3b4 <__assert_func>
 800df40:	3101      	adds	r1, #1
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	e7ee      	b.n	800df24 <__lshift+0x1c>
 800df46:	2300      	movs	r3, #0
 800df48:	f100 0114 	add.w	r1, r0, #20
 800df4c:	f100 0210 	add.w	r2, r0, #16
 800df50:	4618      	mov	r0, r3
 800df52:	4553      	cmp	r3, sl
 800df54:	db33      	blt.n	800dfbe <__lshift+0xb6>
 800df56:	6920      	ldr	r0, [r4, #16]
 800df58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df5c:	f104 0314 	add.w	r3, r4, #20
 800df60:	f019 091f 	ands.w	r9, r9, #31
 800df64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df6c:	d02b      	beq.n	800dfc6 <__lshift+0xbe>
 800df6e:	f1c9 0e20 	rsb	lr, r9, #32
 800df72:	468a      	mov	sl, r1
 800df74:	2200      	movs	r2, #0
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	fa00 f009 	lsl.w	r0, r0, r9
 800df7c:	4310      	orrs	r0, r2
 800df7e:	f84a 0b04 	str.w	r0, [sl], #4
 800df82:	f853 2b04 	ldr.w	r2, [r3], #4
 800df86:	459c      	cmp	ip, r3
 800df88:	fa22 f20e 	lsr.w	r2, r2, lr
 800df8c:	d8f3      	bhi.n	800df76 <__lshift+0x6e>
 800df8e:	ebac 0304 	sub.w	r3, ip, r4
 800df92:	3b15      	subs	r3, #21
 800df94:	f023 0303 	bic.w	r3, r3, #3
 800df98:	3304      	adds	r3, #4
 800df9a:	f104 0015 	add.w	r0, r4, #21
 800df9e:	4584      	cmp	ip, r0
 800dfa0:	bf38      	it	cc
 800dfa2:	2304      	movcc	r3, #4
 800dfa4:	50ca      	str	r2, [r1, r3]
 800dfa6:	b10a      	cbz	r2, 800dfac <__lshift+0xa4>
 800dfa8:	f108 0602 	add.w	r6, r8, #2
 800dfac:	3e01      	subs	r6, #1
 800dfae:	4638      	mov	r0, r7
 800dfb0:	612e      	str	r6, [r5, #16]
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	f7ff fdda 	bl	800db6c <_Bfree>
 800dfb8:	4628      	mov	r0, r5
 800dfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	e7c5      	b.n	800df52 <__lshift+0x4a>
 800dfc6:	3904      	subs	r1, #4
 800dfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfd0:	459c      	cmp	ip, r3
 800dfd2:	d8f9      	bhi.n	800dfc8 <__lshift+0xc0>
 800dfd4:	e7ea      	b.n	800dfac <__lshift+0xa4>
 800dfd6:	bf00      	nop
 800dfd8:	0800f9e1 	.word	0x0800f9e1
 800dfdc:	0800fa03 	.word	0x0800fa03

0800dfe0 <__mcmp>:
 800dfe0:	690a      	ldr	r2, [r1, #16]
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	6900      	ldr	r0, [r0, #16]
 800dfe6:	1a80      	subs	r0, r0, r2
 800dfe8:	b530      	push	{r4, r5, lr}
 800dfea:	d10e      	bne.n	800e00a <__mcmp+0x2a>
 800dfec:	3314      	adds	r3, #20
 800dfee:	3114      	adds	r1, #20
 800dff0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dff4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dff8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dffc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e000:	4295      	cmp	r5, r2
 800e002:	d003      	beq.n	800e00c <__mcmp+0x2c>
 800e004:	d205      	bcs.n	800e012 <__mcmp+0x32>
 800e006:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e00a:	bd30      	pop	{r4, r5, pc}
 800e00c:	42a3      	cmp	r3, r4
 800e00e:	d3f3      	bcc.n	800dff8 <__mcmp+0x18>
 800e010:	e7fb      	b.n	800e00a <__mcmp+0x2a>
 800e012:	2001      	movs	r0, #1
 800e014:	e7f9      	b.n	800e00a <__mcmp+0x2a>
	...

0800e018 <__mdiff>:
 800e018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	4689      	mov	r9, r1
 800e01e:	4606      	mov	r6, r0
 800e020:	4611      	mov	r1, r2
 800e022:	4648      	mov	r0, r9
 800e024:	4614      	mov	r4, r2
 800e026:	f7ff ffdb 	bl	800dfe0 <__mcmp>
 800e02a:	1e05      	subs	r5, r0, #0
 800e02c:	d112      	bne.n	800e054 <__mdiff+0x3c>
 800e02e:	4629      	mov	r1, r5
 800e030:	4630      	mov	r0, r6
 800e032:	f7ff fd5b 	bl	800daec <_Balloc>
 800e036:	4602      	mov	r2, r0
 800e038:	b928      	cbnz	r0, 800e046 <__mdiff+0x2e>
 800e03a:	4b3f      	ldr	r3, [pc, #252]	@ (800e138 <__mdiff+0x120>)
 800e03c:	f240 2137 	movw	r1, #567	@ 0x237
 800e040:	483e      	ldr	r0, [pc, #248]	@ (800e13c <__mdiff+0x124>)
 800e042:	f000 f9b7 	bl	800e3b4 <__assert_func>
 800e046:	2301      	movs	r3, #1
 800e048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e04c:	4610      	mov	r0, r2
 800e04e:	b003      	add	sp, #12
 800e050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e054:	bfbc      	itt	lt
 800e056:	464b      	movlt	r3, r9
 800e058:	46a1      	movlt	r9, r4
 800e05a:	4630      	mov	r0, r6
 800e05c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e060:	bfba      	itte	lt
 800e062:	461c      	movlt	r4, r3
 800e064:	2501      	movlt	r5, #1
 800e066:	2500      	movge	r5, #0
 800e068:	f7ff fd40 	bl	800daec <_Balloc>
 800e06c:	4602      	mov	r2, r0
 800e06e:	b918      	cbnz	r0, 800e078 <__mdiff+0x60>
 800e070:	4b31      	ldr	r3, [pc, #196]	@ (800e138 <__mdiff+0x120>)
 800e072:	f240 2145 	movw	r1, #581	@ 0x245
 800e076:	e7e3      	b.n	800e040 <__mdiff+0x28>
 800e078:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e07c:	6926      	ldr	r6, [r4, #16]
 800e07e:	60c5      	str	r5, [r0, #12]
 800e080:	f109 0310 	add.w	r3, r9, #16
 800e084:	f109 0514 	add.w	r5, r9, #20
 800e088:	f104 0e14 	add.w	lr, r4, #20
 800e08c:	f100 0b14 	add.w	fp, r0, #20
 800e090:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e094:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e098:	9301      	str	r3, [sp, #4]
 800e09a:	46d9      	mov	r9, fp
 800e09c:	f04f 0c00 	mov.w	ip, #0
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0aa:	9301      	str	r3, [sp, #4]
 800e0ac:	fa1f f38a 	uxth.w	r3, sl
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	b283      	uxth	r3, r0
 800e0b4:	1acb      	subs	r3, r1, r3
 800e0b6:	0c00      	lsrs	r0, r0, #16
 800e0b8:	4463      	add	r3, ip
 800e0ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0c8:	4576      	cmp	r6, lr
 800e0ca:	f849 3b04 	str.w	r3, [r9], #4
 800e0ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0d2:	d8e5      	bhi.n	800e0a0 <__mdiff+0x88>
 800e0d4:	1b33      	subs	r3, r6, r4
 800e0d6:	3b15      	subs	r3, #21
 800e0d8:	f023 0303 	bic.w	r3, r3, #3
 800e0dc:	3415      	adds	r4, #21
 800e0de:	3304      	adds	r3, #4
 800e0e0:	42a6      	cmp	r6, r4
 800e0e2:	bf38      	it	cc
 800e0e4:	2304      	movcc	r3, #4
 800e0e6:	441d      	add	r5, r3
 800e0e8:	445b      	add	r3, fp
 800e0ea:	461e      	mov	r6, r3
 800e0ec:	462c      	mov	r4, r5
 800e0ee:	4544      	cmp	r4, r8
 800e0f0:	d30e      	bcc.n	800e110 <__mdiff+0xf8>
 800e0f2:	f108 0103 	add.w	r1, r8, #3
 800e0f6:	1b49      	subs	r1, r1, r5
 800e0f8:	f021 0103 	bic.w	r1, r1, #3
 800e0fc:	3d03      	subs	r5, #3
 800e0fe:	45a8      	cmp	r8, r5
 800e100:	bf38      	it	cc
 800e102:	2100      	movcc	r1, #0
 800e104:	440b      	add	r3, r1
 800e106:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e10a:	b191      	cbz	r1, 800e132 <__mdiff+0x11a>
 800e10c:	6117      	str	r7, [r2, #16]
 800e10e:	e79d      	b.n	800e04c <__mdiff+0x34>
 800e110:	f854 1b04 	ldr.w	r1, [r4], #4
 800e114:	46e6      	mov	lr, ip
 800e116:	0c08      	lsrs	r0, r1, #16
 800e118:	fa1c fc81 	uxtah	ip, ip, r1
 800e11c:	4471      	add	r1, lr
 800e11e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e122:	b289      	uxth	r1, r1
 800e124:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e128:	f846 1b04 	str.w	r1, [r6], #4
 800e12c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e130:	e7dd      	b.n	800e0ee <__mdiff+0xd6>
 800e132:	3f01      	subs	r7, #1
 800e134:	e7e7      	b.n	800e106 <__mdiff+0xee>
 800e136:	bf00      	nop
 800e138:	0800f9e1 	.word	0x0800f9e1
 800e13c:	0800fa03 	.word	0x0800fa03

0800e140 <__d2b>:
 800e140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e144:	460f      	mov	r7, r1
 800e146:	2101      	movs	r1, #1
 800e148:	ec59 8b10 	vmov	r8, r9, d0
 800e14c:	4616      	mov	r6, r2
 800e14e:	f7ff fccd 	bl	800daec <_Balloc>
 800e152:	4604      	mov	r4, r0
 800e154:	b930      	cbnz	r0, 800e164 <__d2b+0x24>
 800e156:	4602      	mov	r2, r0
 800e158:	4b23      	ldr	r3, [pc, #140]	@ (800e1e8 <__d2b+0xa8>)
 800e15a:	4824      	ldr	r0, [pc, #144]	@ (800e1ec <__d2b+0xac>)
 800e15c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e160:	f000 f928 	bl	800e3b4 <__assert_func>
 800e164:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e16c:	b10d      	cbz	r5, 800e172 <__d2b+0x32>
 800e16e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	f1b8 0300 	subs.w	r3, r8, #0
 800e178:	d023      	beq.n	800e1c2 <__d2b+0x82>
 800e17a:	4668      	mov	r0, sp
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	f7ff fd7c 	bl	800dc7a <__lo0bits>
 800e182:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e186:	b1d0      	cbz	r0, 800e1be <__d2b+0x7e>
 800e188:	f1c0 0320 	rsb	r3, r0, #32
 800e18c:	fa02 f303 	lsl.w	r3, r2, r3
 800e190:	430b      	orrs	r3, r1
 800e192:	40c2      	lsrs	r2, r0
 800e194:	6163      	str	r3, [r4, #20]
 800e196:	9201      	str	r2, [sp, #4]
 800e198:	9b01      	ldr	r3, [sp, #4]
 800e19a:	61a3      	str	r3, [r4, #24]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	bf0c      	ite	eq
 800e1a0:	2201      	moveq	r2, #1
 800e1a2:	2202      	movne	r2, #2
 800e1a4:	6122      	str	r2, [r4, #16]
 800e1a6:	b1a5      	cbz	r5, 800e1d2 <__d2b+0x92>
 800e1a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1ac:	4405      	add	r5, r0
 800e1ae:	603d      	str	r5, [r7, #0]
 800e1b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1b4:	6030      	str	r0, [r6, #0]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	b003      	add	sp, #12
 800e1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1be:	6161      	str	r1, [r4, #20]
 800e1c0:	e7ea      	b.n	800e198 <__d2b+0x58>
 800e1c2:	a801      	add	r0, sp, #4
 800e1c4:	f7ff fd59 	bl	800dc7a <__lo0bits>
 800e1c8:	9b01      	ldr	r3, [sp, #4]
 800e1ca:	6163      	str	r3, [r4, #20]
 800e1cc:	3020      	adds	r0, #32
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	e7e8      	b.n	800e1a4 <__d2b+0x64>
 800e1d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1da:	6038      	str	r0, [r7, #0]
 800e1dc:	6918      	ldr	r0, [r3, #16]
 800e1de:	f7ff fd2d 	bl	800dc3c <__hi0bits>
 800e1e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1e6:	e7e5      	b.n	800e1b4 <__d2b+0x74>
 800e1e8:	0800f9e1 	.word	0x0800f9e1
 800e1ec:	0800fa03 	.word	0x0800fa03

0800e1f0 <__sread>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1f8:	f000 f8a8 	bl	800e34c <_read_r>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	bfab      	itete	ge
 800e200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e202:	89a3      	ldrhlt	r3, [r4, #12]
 800e204:	181b      	addge	r3, r3, r0
 800e206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e20a:	bfac      	ite	ge
 800e20c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e20e:	81a3      	strhlt	r3, [r4, #12]
 800e210:	bd10      	pop	{r4, pc}

0800e212 <__swrite>:
 800e212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e216:	461f      	mov	r7, r3
 800e218:	898b      	ldrh	r3, [r1, #12]
 800e21a:	05db      	lsls	r3, r3, #23
 800e21c:	4605      	mov	r5, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	4616      	mov	r6, r2
 800e222:	d505      	bpl.n	800e230 <__swrite+0x1e>
 800e224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e228:	2302      	movs	r3, #2
 800e22a:	2200      	movs	r2, #0
 800e22c:	f000 f87c 	bl	800e328 <_lseek_r>
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e23a:	81a3      	strh	r3, [r4, #12]
 800e23c:	4632      	mov	r2, r6
 800e23e:	463b      	mov	r3, r7
 800e240:	4628      	mov	r0, r5
 800e242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e246:	f000 b8a3 	b.w	800e390 <_write_r>

0800e24a <__sseek>:
 800e24a:	b510      	push	{r4, lr}
 800e24c:	460c      	mov	r4, r1
 800e24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e252:	f000 f869 	bl	800e328 <_lseek_r>
 800e256:	1c43      	adds	r3, r0, #1
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	bf15      	itete	ne
 800e25c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e25e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e266:	81a3      	strheq	r3, [r4, #12]
 800e268:	bf18      	it	ne
 800e26a:	81a3      	strhne	r3, [r4, #12]
 800e26c:	bd10      	pop	{r4, pc}

0800e26e <__sclose>:
 800e26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e272:	f000 b849 	b.w	800e308 <_close_r>

0800e276 <_realloc_r>:
 800e276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e27a:	4680      	mov	r8, r0
 800e27c:	4615      	mov	r5, r2
 800e27e:	460c      	mov	r4, r1
 800e280:	b921      	cbnz	r1, 800e28c <_realloc_r+0x16>
 800e282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e286:	4611      	mov	r1, r2
 800e288:	f7ff baf8 	b.w	800d87c <_malloc_r>
 800e28c:	b92a      	cbnz	r2, 800e29a <_realloc_r+0x24>
 800e28e:	f000 f8c3 	bl	800e418 <_free_r>
 800e292:	2400      	movs	r4, #0
 800e294:	4620      	mov	r0, r4
 800e296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29a:	f000 f919 	bl	800e4d0 <_malloc_usable_size_r>
 800e29e:	4285      	cmp	r5, r0
 800e2a0:	4606      	mov	r6, r0
 800e2a2:	d802      	bhi.n	800e2aa <_realloc_r+0x34>
 800e2a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2a8:	d8f4      	bhi.n	800e294 <_realloc_r+0x1e>
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	4640      	mov	r0, r8
 800e2ae:	f7ff fae5 	bl	800d87c <_malloc_r>
 800e2b2:	4607      	mov	r7, r0
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d0ec      	beq.n	800e292 <_realloc_r+0x1c>
 800e2b8:	42b5      	cmp	r5, r6
 800e2ba:	462a      	mov	r2, r5
 800e2bc:	4621      	mov	r1, r4
 800e2be:	bf28      	it	cs
 800e2c0:	4632      	movcs	r2, r6
 800e2c2:	f7fe fafc 	bl	800c8be <memcpy>
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	f000 f8a5 	bl	800e418 <_free_r>
 800e2ce:	463c      	mov	r4, r7
 800e2d0:	e7e0      	b.n	800e294 <_realloc_r+0x1e>

0800e2d2 <memmove>:
 800e2d2:	4288      	cmp	r0, r1
 800e2d4:	b510      	push	{r4, lr}
 800e2d6:	eb01 0402 	add.w	r4, r1, r2
 800e2da:	d902      	bls.n	800e2e2 <memmove+0x10>
 800e2dc:	4284      	cmp	r4, r0
 800e2de:	4623      	mov	r3, r4
 800e2e0:	d807      	bhi.n	800e2f2 <memmove+0x20>
 800e2e2:	1e43      	subs	r3, r0, #1
 800e2e4:	42a1      	cmp	r1, r4
 800e2e6:	d008      	beq.n	800e2fa <memmove+0x28>
 800e2e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2f0:	e7f8      	b.n	800e2e4 <memmove+0x12>
 800e2f2:	4402      	add	r2, r0
 800e2f4:	4601      	mov	r1, r0
 800e2f6:	428a      	cmp	r2, r1
 800e2f8:	d100      	bne.n	800e2fc <memmove+0x2a>
 800e2fa:	bd10      	pop	{r4, pc}
 800e2fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e300:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e304:	e7f7      	b.n	800e2f6 <memmove+0x24>
	...

0800e308 <_close_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4d06      	ldr	r5, [pc, #24]	@ (800e324 <_close_r+0x1c>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	602b      	str	r3, [r5, #0]
 800e314:	f7f5 fe84 	bl	8004020 <_close>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d102      	bne.n	800e322 <_close_r+0x1a>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	b103      	cbz	r3, 800e322 <_close_r+0x1a>
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	bd38      	pop	{r3, r4, r5, pc}
 800e324:	20005438 	.word	0x20005438

0800e328 <_lseek_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4d07      	ldr	r5, [pc, #28]	@ (800e348 <_lseek_r+0x20>)
 800e32c:	4604      	mov	r4, r0
 800e32e:	4608      	mov	r0, r1
 800e330:	4611      	mov	r1, r2
 800e332:	2200      	movs	r2, #0
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f7f5 fe99 	bl	800406e <_lseek>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_lseek_r+0x1e>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_lseek_r+0x1e>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	20005438 	.word	0x20005438

0800e34c <_read_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d07      	ldr	r5, [pc, #28]	@ (800e36c <_read_r+0x20>)
 800e350:	4604      	mov	r4, r0
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	2200      	movs	r2, #0
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f5 fe27 	bl	8003fae <_read>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_read_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_read_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	20005438 	.word	0x20005438

0800e370 <_sbrk_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	4d06      	ldr	r5, [pc, #24]	@ (800e38c <_sbrk_r+0x1c>)
 800e374:	2300      	movs	r3, #0
 800e376:	4604      	mov	r4, r0
 800e378:	4608      	mov	r0, r1
 800e37a:	602b      	str	r3, [r5, #0]
 800e37c:	f7f5 fe84 	bl	8004088 <_sbrk>
 800e380:	1c43      	adds	r3, r0, #1
 800e382:	d102      	bne.n	800e38a <_sbrk_r+0x1a>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	b103      	cbz	r3, 800e38a <_sbrk_r+0x1a>
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	bd38      	pop	{r3, r4, r5, pc}
 800e38c:	20005438 	.word	0x20005438

0800e390 <_write_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	@ (800e3b0 <_write_r+0x20>)
 800e394:	4604      	mov	r4, r0
 800e396:	4608      	mov	r0, r1
 800e398:	4611      	mov	r1, r2
 800e39a:	2200      	movs	r2, #0
 800e39c:	602a      	str	r2, [r5, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f7f5 fe22 	bl	8003fe8 <_write>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d102      	bne.n	800e3ae <_write_r+0x1e>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b103      	cbz	r3, 800e3ae <_write_r+0x1e>
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	20005438 	.word	0x20005438

0800e3b4 <__assert_func>:
 800e3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3b6:	4614      	mov	r4, r2
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	4b09      	ldr	r3, [pc, #36]	@ (800e3e0 <__assert_func+0x2c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4605      	mov	r5, r0
 800e3c0:	68d8      	ldr	r0, [r3, #12]
 800e3c2:	b954      	cbnz	r4, 800e3da <__assert_func+0x26>
 800e3c4:	4b07      	ldr	r3, [pc, #28]	@ (800e3e4 <__assert_func+0x30>)
 800e3c6:	461c      	mov	r4, r3
 800e3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3cc:	9100      	str	r1, [sp, #0]
 800e3ce:	462b      	mov	r3, r5
 800e3d0:	4905      	ldr	r1, [pc, #20]	@ (800e3e8 <__assert_func+0x34>)
 800e3d2:	f000 f885 	bl	800e4e0 <fiprintf>
 800e3d6:	f000 f8a2 	bl	800e51e <abort>
 800e3da:	4b04      	ldr	r3, [pc, #16]	@ (800e3ec <__assert_func+0x38>)
 800e3dc:	e7f4      	b.n	800e3c8 <__assert_func+0x14>
 800e3de:	bf00      	nop
 800e3e0:	20000044 	.word	0x20000044
 800e3e4:	0800fb9d 	.word	0x0800fb9d
 800e3e8:	0800fb6f 	.word	0x0800fb6f
 800e3ec:	0800fb62 	.word	0x0800fb62

0800e3f0 <_calloc_r>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	fba1 5402 	umull	r5, r4, r1, r2
 800e3f6:	b93c      	cbnz	r4, 800e408 <_calloc_r+0x18>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	f7ff fa3f 	bl	800d87c <_malloc_r>
 800e3fe:	4606      	mov	r6, r0
 800e400:	b928      	cbnz	r0, 800e40e <_calloc_r+0x1e>
 800e402:	2600      	movs	r6, #0
 800e404:	4630      	mov	r0, r6
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	220c      	movs	r2, #12
 800e40a:	6002      	str	r2, [r0, #0]
 800e40c:	e7f9      	b.n	800e402 <_calloc_r+0x12>
 800e40e:	462a      	mov	r2, r5
 800e410:	4621      	mov	r1, r4
 800e412:	f7fe fa1a 	bl	800c84a <memset>
 800e416:	e7f5      	b.n	800e404 <_calloc_r+0x14>

0800e418 <_free_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4605      	mov	r5, r0
 800e41c:	2900      	cmp	r1, #0
 800e41e:	d041      	beq.n	800e4a4 <_free_r+0x8c>
 800e420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e424:	1f0c      	subs	r4, r1, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	bfb8      	it	lt
 800e42a:	18e4      	addlt	r4, r4, r3
 800e42c:	f7ff fb52 	bl	800dad4 <__malloc_lock>
 800e430:	4a1d      	ldr	r2, [pc, #116]	@ (800e4a8 <_free_r+0x90>)
 800e432:	6813      	ldr	r3, [r2, #0]
 800e434:	b933      	cbnz	r3, 800e444 <_free_r+0x2c>
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	6014      	str	r4, [r2, #0]
 800e43a:	4628      	mov	r0, r5
 800e43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e440:	f7ff bb4e 	b.w	800dae0 <__malloc_unlock>
 800e444:	42a3      	cmp	r3, r4
 800e446:	d908      	bls.n	800e45a <_free_r+0x42>
 800e448:	6820      	ldr	r0, [r4, #0]
 800e44a:	1821      	adds	r1, r4, r0
 800e44c:	428b      	cmp	r3, r1
 800e44e:	bf01      	itttt	eq
 800e450:	6819      	ldreq	r1, [r3, #0]
 800e452:	685b      	ldreq	r3, [r3, #4]
 800e454:	1809      	addeq	r1, r1, r0
 800e456:	6021      	streq	r1, [r4, #0]
 800e458:	e7ed      	b.n	800e436 <_free_r+0x1e>
 800e45a:	461a      	mov	r2, r3
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	b10b      	cbz	r3, 800e464 <_free_r+0x4c>
 800e460:	42a3      	cmp	r3, r4
 800e462:	d9fa      	bls.n	800e45a <_free_r+0x42>
 800e464:	6811      	ldr	r1, [r2, #0]
 800e466:	1850      	adds	r0, r2, r1
 800e468:	42a0      	cmp	r0, r4
 800e46a:	d10b      	bne.n	800e484 <_free_r+0x6c>
 800e46c:	6820      	ldr	r0, [r4, #0]
 800e46e:	4401      	add	r1, r0
 800e470:	1850      	adds	r0, r2, r1
 800e472:	4283      	cmp	r3, r0
 800e474:	6011      	str	r1, [r2, #0]
 800e476:	d1e0      	bne.n	800e43a <_free_r+0x22>
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	6053      	str	r3, [r2, #4]
 800e47e:	4408      	add	r0, r1
 800e480:	6010      	str	r0, [r2, #0]
 800e482:	e7da      	b.n	800e43a <_free_r+0x22>
 800e484:	d902      	bls.n	800e48c <_free_r+0x74>
 800e486:	230c      	movs	r3, #12
 800e488:	602b      	str	r3, [r5, #0]
 800e48a:	e7d6      	b.n	800e43a <_free_r+0x22>
 800e48c:	6820      	ldr	r0, [r4, #0]
 800e48e:	1821      	adds	r1, r4, r0
 800e490:	428b      	cmp	r3, r1
 800e492:	bf04      	itt	eq
 800e494:	6819      	ldreq	r1, [r3, #0]
 800e496:	685b      	ldreq	r3, [r3, #4]
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	bf04      	itt	eq
 800e49c:	1809      	addeq	r1, r1, r0
 800e49e:	6021      	streq	r1, [r4, #0]
 800e4a0:	6054      	str	r4, [r2, #4]
 800e4a2:	e7ca      	b.n	800e43a <_free_r+0x22>
 800e4a4:	bd38      	pop	{r3, r4, r5, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20005434 	.word	0x20005434

0800e4ac <__ascii_mbtowc>:
 800e4ac:	b082      	sub	sp, #8
 800e4ae:	b901      	cbnz	r1, 800e4b2 <__ascii_mbtowc+0x6>
 800e4b0:	a901      	add	r1, sp, #4
 800e4b2:	b142      	cbz	r2, 800e4c6 <__ascii_mbtowc+0x1a>
 800e4b4:	b14b      	cbz	r3, 800e4ca <__ascii_mbtowc+0x1e>
 800e4b6:	7813      	ldrb	r3, [r2, #0]
 800e4b8:	600b      	str	r3, [r1, #0]
 800e4ba:	7812      	ldrb	r2, [r2, #0]
 800e4bc:	1e10      	subs	r0, r2, #0
 800e4be:	bf18      	it	ne
 800e4c0:	2001      	movne	r0, #1
 800e4c2:	b002      	add	sp, #8
 800e4c4:	4770      	bx	lr
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	e7fb      	b.n	800e4c2 <__ascii_mbtowc+0x16>
 800e4ca:	f06f 0001 	mvn.w	r0, #1
 800e4ce:	e7f8      	b.n	800e4c2 <__ascii_mbtowc+0x16>

0800e4d0 <_malloc_usable_size_r>:
 800e4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d4:	1f18      	subs	r0, r3, #4
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	bfbc      	itt	lt
 800e4da:	580b      	ldrlt	r3, [r1, r0]
 800e4dc:	18c0      	addlt	r0, r0, r3
 800e4de:	4770      	bx	lr

0800e4e0 <fiprintf>:
 800e4e0:	b40e      	push	{r1, r2, r3}
 800e4e2:	b503      	push	{r0, r1, lr}
 800e4e4:	4601      	mov	r1, r0
 800e4e6:	ab03      	add	r3, sp, #12
 800e4e8:	4805      	ldr	r0, [pc, #20]	@ (800e500 <fiprintf+0x20>)
 800e4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ee:	6800      	ldr	r0, [r0, #0]
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	f000 f845 	bl	800e580 <_vfiprintf_r>
 800e4f6:	b002      	add	sp, #8
 800e4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4fc:	b003      	add	sp, #12
 800e4fe:	4770      	bx	lr
 800e500:	20000044 	.word	0x20000044

0800e504 <__ascii_wctomb>:
 800e504:	4603      	mov	r3, r0
 800e506:	4608      	mov	r0, r1
 800e508:	b141      	cbz	r1, 800e51c <__ascii_wctomb+0x18>
 800e50a:	2aff      	cmp	r2, #255	@ 0xff
 800e50c:	d904      	bls.n	800e518 <__ascii_wctomb+0x14>
 800e50e:	228a      	movs	r2, #138	@ 0x8a
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e516:	4770      	bx	lr
 800e518:	700a      	strb	r2, [r1, #0]
 800e51a:	2001      	movs	r0, #1
 800e51c:	4770      	bx	lr

0800e51e <abort>:
 800e51e:	b508      	push	{r3, lr}
 800e520:	2006      	movs	r0, #6
 800e522:	f000 fa85 	bl	800ea30 <raise>
 800e526:	2001      	movs	r0, #1
 800e528:	f7f5 fd36 	bl	8003f98 <_exit>

0800e52c <__sfputc_r>:
 800e52c:	6893      	ldr	r3, [r2, #8]
 800e52e:	3b01      	subs	r3, #1
 800e530:	2b00      	cmp	r3, #0
 800e532:	b410      	push	{r4}
 800e534:	6093      	str	r3, [r2, #8]
 800e536:	da08      	bge.n	800e54a <__sfputc_r+0x1e>
 800e538:	6994      	ldr	r4, [r2, #24]
 800e53a:	42a3      	cmp	r3, r4
 800e53c:	db01      	blt.n	800e542 <__sfputc_r+0x16>
 800e53e:	290a      	cmp	r1, #10
 800e540:	d103      	bne.n	800e54a <__sfputc_r+0x1e>
 800e542:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e546:	f000 b933 	b.w	800e7b0 <__swbuf_r>
 800e54a:	6813      	ldr	r3, [r2, #0]
 800e54c:	1c58      	adds	r0, r3, #1
 800e54e:	6010      	str	r0, [r2, #0]
 800e550:	7019      	strb	r1, [r3, #0]
 800e552:	4608      	mov	r0, r1
 800e554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <__sfputs_r>:
 800e55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55c:	4606      	mov	r6, r0
 800e55e:	460f      	mov	r7, r1
 800e560:	4614      	mov	r4, r2
 800e562:	18d5      	adds	r5, r2, r3
 800e564:	42ac      	cmp	r4, r5
 800e566:	d101      	bne.n	800e56c <__sfputs_r+0x12>
 800e568:	2000      	movs	r0, #0
 800e56a:	e007      	b.n	800e57c <__sfputs_r+0x22>
 800e56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e570:	463a      	mov	r2, r7
 800e572:	4630      	mov	r0, r6
 800e574:	f7ff ffda 	bl	800e52c <__sfputc_r>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d1f3      	bne.n	800e564 <__sfputs_r+0xa>
 800e57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e580 <_vfiprintf_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	460d      	mov	r5, r1
 800e586:	b09d      	sub	sp, #116	@ 0x74
 800e588:	4614      	mov	r4, r2
 800e58a:	4698      	mov	r8, r3
 800e58c:	4606      	mov	r6, r0
 800e58e:	b118      	cbz	r0, 800e598 <_vfiprintf_r+0x18>
 800e590:	6a03      	ldr	r3, [r0, #32]
 800e592:	b90b      	cbnz	r3, 800e598 <_vfiprintf_r+0x18>
 800e594:	f7fe f88c 	bl	800c6b0 <__sinit>
 800e598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e59a:	07d9      	lsls	r1, r3, #31
 800e59c:	d405      	bmi.n	800e5aa <_vfiprintf_r+0x2a>
 800e59e:	89ab      	ldrh	r3, [r5, #12]
 800e5a0:	059a      	lsls	r2, r3, #22
 800e5a2:	d402      	bmi.n	800e5aa <_vfiprintf_r+0x2a>
 800e5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5a6:	f7fe f988 	bl	800c8ba <__retarget_lock_acquire_recursive>
 800e5aa:	89ab      	ldrh	r3, [r5, #12]
 800e5ac:	071b      	lsls	r3, r3, #28
 800e5ae:	d501      	bpl.n	800e5b4 <_vfiprintf_r+0x34>
 800e5b0:	692b      	ldr	r3, [r5, #16]
 800e5b2:	b99b      	cbnz	r3, 800e5dc <_vfiprintf_r+0x5c>
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f000 f938 	bl	800e82c <__swsetup_r>
 800e5bc:	b170      	cbz	r0, 800e5dc <_vfiprintf_r+0x5c>
 800e5be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5c0:	07dc      	lsls	r4, r3, #31
 800e5c2:	d504      	bpl.n	800e5ce <_vfiprintf_r+0x4e>
 800e5c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5c8:	b01d      	add	sp, #116	@ 0x74
 800e5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	0598      	lsls	r0, r3, #22
 800e5d2:	d4f7      	bmi.n	800e5c4 <_vfiprintf_r+0x44>
 800e5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5d6:	f7fe f971 	bl	800c8bc <__retarget_lock_release_recursive>
 800e5da:	e7f3      	b.n	800e5c4 <_vfiprintf_r+0x44>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5e0:	2320      	movs	r3, #32
 800e5e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5ea:	2330      	movs	r3, #48	@ 0x30
 800e5ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e79c <_vfiprintf_r+0x21c>
 800e5f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5f4:	f04f 0901 	mov.w	r9, #1
 800e5f8:	4623      	mov	r3, r4
 800e5fa:	469a      	mov	sl, r3
 800e5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e600:	b10a      	cbz	r2, 800e606 <_vfiprintf_r+0x86>
 800e602:	2a25      	cmp	r2, #37	@ 0x25
 800e604:	d1f9      	bne.n	800e5fa <_vfiprintf_r+0x7a>
 800e606:	ebba 0b04 	subs.w	fp, sl, r4
 800e60a:	d00b      	beq.n	800e624 <_vfiprintf_r+0xa4>
 800e60c:	465b      	mov	r3, fp
 800e60e:	4622      	mov	r2, r4
 800e610:	4629      	mov	r1, r5
 800e612:	4630      	mov	r0, r6
 800e614:	f7ff ffa1 	bl	800e55a <__sfputs_r>
 800e618:	3001      	adds	r0, #1
 800e61a:	f000 80a7 	beq.w	800e76c <_vfiprintf_r+0x1ec>
 800e61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e620:	445a      	add	r2, fp
 800e622:	9209      	str	r2, [sp, #36]	@ 0x24
 800e624:	f89a 3000 	ldrb.w	r3, [sl]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 809f 	beq.w	800e76c <_vfiprintf_r+0x1ec>
 800e62e:	2300      	movs	r3, #0
 800e630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e638:	f10a 0a01 	add.w	sl, sl, #1
 800e63c:	9304      	str	r3, [sp, #16]
 800e63e:	9307      	str	r3, [sp, #28]
 800e640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e644:	931a      	str	r3, [sp, #104]	@ 0x68
 800e646:	4654      	mov	r4, sl
 800e648:	2205      	movs	r2, #5
 800e64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64e:	4853      	ldr	r0, [pc, #332]	@ (800e79c <_vfiprintf_r+0x21c>)
 800e650:	f7f1 fdbe 	bl	80001d0 <memchr>
 800e654:	9a04      	ldr	r2, [sp, #16]
 800e656:	b9d8      	cbnz	r0, 800e690 <_vfiprintf_r+0x110>
 800e658:	06d1      	lsls	r1, r2, #27
 800e65a:	bf44      	itt	mi
 800e65c:	2320      	movmi	r3, #32
 800e65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e662:	0713      	lsls	r3, r2, #28
 800e664:	bf44      	itt	mi
 800e666:	232b      	movmi	r3, #43	@ 0x2b
 800e668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e66c:	f89a 3000 	ldrb.w	r3, [sl]
 800e670:	2b2a      	cmp	r3, #42	@ 0x2a
 800e672:	d015      	beq.n	800e6a0 <_vfiprintf_r+0x120>
 800e674:	9a07      	ldr	r2, [sp, #28]
 800e676:	4654      	mov	r4, sl
 800e678:	2000      	movs	r0, #0
 800e67a:	f04f 0c0a 	mov.w	ip, #10
 800e67e:	4621      	mov	r1, r4
 800e680:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e684:	3b30      	subs	r3, #48	@ 0x30
 800e686:	2b09      	cmp	r3, #9
 800e688:	d94b      	bls.n	800e722 <_vfiprintf_r+0x1a2>
 800e68a:	b1b0      	cbz	r0, 800e6ba <_vfiprintf_r+0x13a>
 800e68c:	9207      	str	r2, [sp, #28]
 800e68e:	e014      	b.n	800e6ba <_vfiprintf_r+0x13a>
 800e690:	eba0 0308 	sub.w	r3, r0, r8
 800e694:	fa09 f303 	lsl.w	r3, r9, r3
 800e698:	4313      	orrs	r3, r2
 800e69a:	9304      	str	r3, [sp, #16]
 800e69c:	46a2      	mov	sl, r4
 800e69e:	e7d2      	b.n	800e646 <_vfiprintf_r+0xc6>
 800e6a0:	9b03      	ldr	r3, [sp, #12]
 800e6a2:	1d19      	adds	r1, r3, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	9103      	str	r1, [sp, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	bfbb      	ittet	lt
 800e6ac:	425b      	neglt	r3, r3
 800e6ae:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b2:	9307      	strge	r3, [sp, #28]
 800e6b4:	9307      	strlt	r3, [sp, #28]
 800e6b6:	bfb8      	it	lt
 800e6b8:	9204      	strlt	r2, [sp, #16]
 800e6ba:	7823      	ldrb	r3, [r4, #0]
 800e6bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6be:	d10a      	bne.n	800e6d6 <_vfiprintf_r+0x156>
 800e6c0:	7863      	ldrb	r3, [r4, #1]
 800e6c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6c4:	d132      	bne.n	800e72c <_vfiprintf_r+0x1ac>
 800e6c6:	9b03      	ldr	r3, [sp, #12]
 800e6c8:	1d1a      	adds	r2, r3, #4
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	9203      	str	r2, [sp, #12]
 800e6ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6d2:	3402      	adds	r4, #2
 800e6d4:	9305      	str	r3, [sp, #20]
 800e6d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e7ac <_vfiprintf_r+0x22c>
 800e6da:	7821      	ldrb	r1, [r4, #0]
 800e6dc:	2203      	movs	r2, #3
 800e6de:	4650      	mov	r0, sl
 800e6e0:	f7f1 fd76 	bl	80001d0 <memchr>
 800e6e4:	b138      	cbz	r0, 800e6f6 <_vfiprintf_r+0x176>
 800e6e6:	9b04      	ldr	r3, [sp, #16]
 800e6e8:	eba0 000a 	sub.w	r0, r0, sl
 800e6ec:	2240      	movs	r2, #64	@ 0x40
 800e6ee:	4082      	lsls	r2, r0
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	3401      	adds	r4, #1
 800e6f4:	9304      	str	r3, [sp, #16]
 800e6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fa:	4829      	ldr	r0, [pc, #164]	@ (800e7a0 <_vfiprintf_r+0x220>)
 800e6fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e700:	2206      	movs	r2, #6
 800e702:	f7f1 fd65 	bl	80001d0 <memchr>
 800e706:	2800      	cmp	r0, #0
 800e708:	d03f      	beq.n	800e78a <_vfiprintf_r+0x20a>
 800e70a:	4b26      	ldr	r3, [pc, #152]	@ (800e7a4 <_vfiprintf_r+0x224>)
 800e70c:	bb1b      	cbnz	r3, 800e756 <_vfiprintf_r+0x1d6>
 800e70e:	9b03      	ldr	r3, [sp, #12]
 800e710:	3307      	adds	r3, #7
 800e712:	f023 0307 	bic.w	r3, r3, #7
 800e716:	3308      	adds	r3, #8
 800e718:	9303      	str	r3, [sp, #12]
 800e71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71c:	443b      	add	r3, r7
 800e71e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e720:	e76a      	b.n	800e5f8 <_vfiprintf_r+0x78>
 800e722:	fb0c 3202 	mla	r2, ip, r2, r3
 800e726:	460c      	mov	r4, r1
 800e728:	2001      	movs	r0, #1
 800e72a:	e7a8      	b.n	800e67e <_vfiprintf_r+0xfe>
 800e72c:	2300      	movs	r3, #0
 800e72e:	3401      	adds	r4, #1
 800e730:	9305      	str	r3, [sp, #20]
 800e732:	4619      	mov	r1, r3
 800e734:	f04f 0c0a 	mov.w	ip, #10
 800e738:	4620      	mov	r0, r4
 800e73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e73e:	3a30      	subs	r2, #48	@ 0x30
 800e740:	2a09      	cmp	r2, #9
 800e742:	d903      	bls.n	800e74c <_vfiprintf_r+0x1cc>
 800e744:	2b00      	cmp	r3, #0
 800e746:	d0c6      	beq.n	800e6d6 <_vfiprintf_r+0x156>
 800e748:	9105      	str	r1, [sp, #20]
 800e74a:	e7c4      	b.n	800e6d6 <_vfiprintf_r+0x156>
 800e74c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e750:	4604      	mov	r4, r0
 800e752:	2301      	movs	r3, #1
 800e754:	e7f0      	b.n	800e738 <_vfiprintf_r+0x1b8>
 800e756:	ab03      	add	r3, sp, #12
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	462a      	mov	r2, r5
 800e75c:	4b12      	ldr	r3, [pc, #72]	@ (800e7a8 <_vfiprintf_r+0x228>)
 800e75e:	a904      	add	r1, sp, #16
 800e760:	4630      	mov	r0, r6
 800e762:	f7fd fb0d 	bl	800bd80 <_printf_float>
 800e766:	4607      	mov	r7, r0
 800e768:	1c78      	adds	r0, r7, #1
 800e76a:	d1d6      	bne.n	800e71a <_vfiprintf_r+0x19a>
 800e76c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e76e:	07d9      	lsls	r1, r3, #31
 800e770:	d405      	bmi.n	800e77e <_vfiprintf_r+0x1fe>
 800e772:	89ab      	ldrh	r3, [r5, #12]
 800e774:	059a      	lsls	r2, r3, #22
 800e776:	d402      	bmi.n	800e77e <_vfiprintf_r+0x1fe>
 800e778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e77a:	f7fe f89f 	bl	800c8bc <__retarget_lock_release_recursive>
 800e77e:	89ab      	ldrh	r3, [r5, #12]
 800e780:	065b      	lsls	r3, r3, #25
 800e782:	f53f af1f 	bmi.w	800e5c4 <_vfiprintf_r+0x44>
 800e786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e788:	e71e      	b.n	800e5c8 <_vfiprintf_r+0x48>
 800e78a:	ab03      	add	r3, sp, #12
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	462a      	mov	r2, r5
 800e790:	4b05      	ldr	r3, [pc, #20]	@ (800e7a8 <_vfiprintf_r+0x228>)
 800e792:	a904      	add	r1, sp, #16
 800e794:	4630      	mov	r0, r6
 800e796:	f7fd fd8b 	bl	800c2b0 <_printf_i>
 800e79a:	e7e4      	b.n	800e766 <_vfiprintf_r+0x1e6>
 800e79c:	0800f9f2 	.word	0x0800f9f2
 800e7a0:	0800f9fc 	.word	0x0800f9fc
 800e7a4:	0800bd81 	.word	0x0800bd81
 800e7a8:	0800e55b 	.word	0x0800e55b
 800e7ac:	0800f9f8 	.word	0x0800f9f8

0800e7b0 <__swbuf_r>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	4614      	mov	r4, r2
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	b118      	cbz	r0, 800e7c2 <__swbuf_r+0x12>
 800e7ba:	6a03      	ldr	r3, [r0, #32]
 800e7bc:	b90b      	cbnz	r3, 800e7c2 <__swbuf_r+0x12>
 800e7be:	f7fd ff77 	bl	800c6b0 <__sinit>
 800e7c2:	69a3      	ldr	r3, [r4, #24]
 800e7c4:	60a3      	str	r3, [r4, #8]
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	071a      	lsls	r2, r3, #28
 800e7ca:	d501      	bpl.n	800e7d0 <__swbuf_r+0x20>
 800e7cc:	6923      	ldr	r3, [r4, #16]
 800e7ce:	b943      	cbnz	r3, 800e7e2 <__swbuf_r+0x32>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f000 f82a 	bl	800e82c <__swsetup_r>
 800e7d8:	b118      	cbz	r0, 800e7e2 <__swbuf_r+0x32>
 800e7da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e7de:	4638      	mov	r0, r7
 800e7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	6922      	ldr	r2, [r4, #16]
 800e7e6:	1a98      	subs	r0, r3, r2
 800e7e8:	6963      	ldr	r3, [r4, #20]
 800e7ea:	b2f6      	uxtb	r6, r6
 800e7ec:	4283      	cmp	r3, r0
 800e7ee:	4637      	mov	r7, r6
 800e7f0:	dc05      	bgt.n	800e7fe <__swbuf_r+0x4e>
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f7ff f945 	bl	800da84 <_fflush_r>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d1ed      	bne.n	800e7da <__swbuf_r+0x2a>
 800e7fe:	68a3      	ldr	r3, [r4, #8]
 800e800:	3b01      	subs	r3, #1
 800e802:	60a3      	str	r3, [r4, #8]
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	6022      	str	r2, [r4, #0]
 800e80a:	701e      	strb	r6, [r3, #0]
 800e80c:	6962      	ldr	r2, [r4, #20]
 800e80e:	1c43      	adds	r3, r0, #1
 800e810:	429a      	cmp	r2, r3
 800e812:	d004      	beq.n	800e81e <__swbuf_r+0x6e>
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	07db      	lsls	r3, r3, #31
 800e818:	d5e1      	bpl.n	800e7de <__swbuf_r+0x2e>
 800e81a:	2e0a      	cmp	r6, #10
 800e81c:	d1df      	bne.n	800e7de <__swbuf_r+0x2e>
 800e81e:	4621      	mov	r1, r4
 800e820:	4628      	mov	r0, r5
 800e822:	f7ff f92f 	bl	800da84 <_fflush_r>
 800e826:	2800      	cmp	r0, #0
 800e828:	d0d9      	beq.n	800e7de <__swbuf_r+0x2e>
 800e82a:	e7d6      	b.n	800e7da <__swbuf_r+0x2a>

0800e82c <__swsetup_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4b29      	ldr	r3, [pc, #164]	@ (800e8d4 <__swsetup_r+0xa8>)
 800e830:	4605      	mov	r5, r0
 800e832:	6818      	ldr	r0, [r3, #0]
 800e834:	460c      	mov	r4, r1
 800e836:	b118      	cbz	r0, 800e840 <__swsetup_r+0x14>
 800e838:	6a03      	ldr	r3, [r0, #32]
 800e83a:	b90b      	cbnz	r3, 800e840 <__swsetup_r+0x14>
 800e83c:	f7fd ff38 	bl	800c6b0 <__sinit>
 800e840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e844:	0719      	lsls	r1, r3, #28
 800e846:	d422      	bmi.n	800e88e <__swsetup_r+0x62>
 800e848:	06da      	lsls	r2, r3, #27
 800e84a:	d407      	bmi.n	800e85c <__swsetup_r+0x30>
 800e84c:	2209      	movs	r2, #9
 800e84e:	602a      	str	r2, [r5, #0]
 800e850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e85a:	e033      	b.n	800e8c4 <__swsetup_r+0x98>
 800e85c:	0758      	lsls	r0, r3, #29
 800e85e:	d512      	bpl.n	800e886 <__swsetup_r+0x5a>
 800e860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e862:	b141      	cbz	r1, 800e876 <__swsetup_r+0x4a>
 800e864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e868:	4299      	cmp	r1, r3
 800e86a:	d002      	beq.n	800e872 <__swsetup_r+0x46>
 800e86c:	4628      	mov	r0, r5
 800e86e:	f7ff fdd3 	bl	800e418 <_free_r>
 800e872:	2300      	movs	r3, #0
 800e874:	6363      	str	r3, [r4, #52]	@ 0x34
 800e876:	89a3      	ldrh	r3, [r4, #12]
 800e878:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e87c:	81a3      	strh	r3, [r4, #12]
 800e87e:	2300      	movs	r3, #0
 800e880:	6063      	str	r3, [r4, #4]
 800e882:	6923      	ldr	r3, [r4, #16]
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	89a3      	ldrh	r3, [r4, #12]
 800e888:	f043 0308 	orr.w	r3, r3, #8
 800e88c:	81a3      	strh	r3, [r4, #12]
 800e88e:	6923      	ldr	r3, [r4, #16]
 800e890:	b94b      	cbnz	r3, 800e8a6 <__swsetup_r+0x7a>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e89c:	d003      	beq.n	800e8a6 <__swsetup_r+0x7a>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f000 f83f 	bl	800e924 <__smakebuf_r>
 800e8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8aa:	f013 0201 	ands.w	r2, r3, #1
 800e8ae:	d00a      	beq.n	800e8c6 <__swsetup_r+0x9a>
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	60a2      	str	r2, [r4, #8]
 800e8b4:	6962      	ldr	r2, [r4, #20]
 800e8b6:	4252      	negs	r2, r2
 800e8b8:	61a2      	str	r2, [r4, #24]
 800e8ba:	6922      	ldr	r2, [r4, #16]
 800e8bc:	b942      	cbnz	r2, 800e8d0 <__swsetup_r+0xa4>
 800e8be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8c2:	d1c5      	bne.n	800e850 <__swsetup_r+0x24>
 800e8c4:	bd38      	pop	{r3, r4, r5, pc}
 800e8c6:	0799      	lsls	r1, r3, #30
 800e8c8:	bf58      	it	pl
 800e8ca:	6962      	ldrpl	r2, [r4, #20]
 800e8cc:	60a2      	str	r2, [r4, #8]
 800e8ce:	e7f4      	b.n	800e8ba <__swsetup_r+0x8e>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e7f7      	b.n	800e8c4 <__swsetup_r+0x98>
 800e8d4:	20000044 	.word	0x20000044

0800e8d8 <__swhatbuf_r>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	460c      	mov	r4, r1
 800e8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e0:	2900      	cmp	r1, #0
 800e8e2:	b096      	sub	sp, #88	@ 0x58
 800e8e4:	4615      	mov	r5, r2
 800e8e6:	461e      	mov	r6, r3
 800e8e8:	da0d      	bge.n	800e906 <__swhatbuf_r+0x2e>
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8f0:	f04f 0100 	mov.w	r1, #0
 800e8f4:	bf14      	ite	ne
 800e8f6:	2340      	movne	r3, #64	@ 0x40
 800e8f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	6031      	str	r1, [r6, #0]
 800e900:	602b      	str	r3, [r5, #0]
 800e902:	b016      	add	sp, #88	@ 0x58
 800e904:	bd70      	pop	{r4, r5, r6, pc}
 800e906:	466a      	mov	r2, sp
 800e908:	f000 f848 	bl	800e99c <_fstat_r>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	dbec      	blt.n	800e8ea <__swhatbuf_r+0x12>
 800e910:	9901      	ldr	r1, [sp, #4]
 800e912:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e916:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e91a:	4259      	negs	r1, r3
 800e91c:	4159      	adcs	r1, r3
 800e91e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e922:	e7eb      	b.n	800e8fc <__swhatbuf_r+0x24>

0800e924 <__smakebuf_r>:
 800e924:	898b      	ldrh	r3, [r1, #12]
 800e926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e928:	079d      	lsls	r5, r3, #30
 800e92a:	4606      	mov	r6, r0
 800e92c:	460c      	mov	r4, r1
 800e92e:	d507      	bpl.n	800e940 <__smakebuf_r+0x1c>
 800e930:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	6123      	str	r3, [r4, #16]
 800e938:	2301      	movs	r3, #1
 800e93a:	6163      	str	r3, [r4, #20]
 800e93c:	b003      	add	sp, #12
 800e93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e940:	ab01      	add	r3, sp, #4
 800e942:	466a      	mov	r2, sp
 800e944:	f7ff ffc8 	bl	800e8d8 <__swhatbuf_r>
 800e948:	9f00      	ldr	r7, [sp, #0]
 800e94a:	4605      	mov	r5, r0
 800e94c:	4639      	mov	r1, r7
 800e94e:	4630      	mov	r0, r6
 800e950:	f7fe ff94 	bl	800d87c <_malloc_r>
 800e954:	b948      	cbnz	r0, 800e96a <__smakebuf_r+0x46>
 800e956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e95a:	059a      	lsls	r2, r3, #22
 800e95c:	d4ee      	bmi.n	800e93c <__smakebuf_r+0x18>
 800e95e:	f023 0303 	bic.w	r3, r3, #3
 800e962:	f043 0302 	orr.w	r3, r3, #2
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	e7e2      	b.n	800e930 <__smakebuf_r+0xc>
 800e96a:	89a3      	ldrh	r3, [r4, #12]
 800e96c:	6020      	str	r0, [r4, #0]
 800e96e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e972:	81a3      	strh	r3, [r4, #12]
 800e974:	9b01      	ldr	r3, [sp, #4]
 800e976:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e97a:	b15b      	cbz	r3, 800e994 <__smakebuf_r+0x70>
 800e97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e980:	4630      	mov	r0, r6
 800e982:	f000 f81d 	bl	800e9c0 <_isatty_r>
 800e986:	b128      	cbz	r0, 800e994 <__smakebuf_r+0x70>
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	f023 0303 	bic.w	r3, r3, #3
 800e98e:	f043 0301 	orr.w	r3, r3, #1
 800e992:	81a3      	strh	r3, [r4, #12]
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	431d      	orrs	r5, r3
 800e998:	81a5      	strh	r5, [r4, #12]
 800e99a:	e7cf      	b.n	800e93c <__smakebuf_r+0x18>

0800e99c <_fstat_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4d07      	ldr	r5, [pc, #28]	@ (800e9bc <_fstat_r+0x20>)
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	602b      	str	r3, [r5, #0]
 800e9aa:	f7f5 fb45 	bl	8004038 <_fstat>
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	d102      	bne.n	800e9b8 <_fstat_r+0x1c>
 800e9b2:	682b      	ldr	r3, [r5, #0]
 800e9b4:	b103      	cbz	r3, 800e9b8 <_fstat_r+0x1c>
 800e9b6:	6023      	str	r3, [r4, #0]
 800e9b8:	bd38      	pop	{r3, r4, r5, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20005438 	.word	0x20005438

0800e9c0 <_isatty_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d06      	ldr	r5, [pc, #24]	@ (800e9dc <_isatty_r+0x1c>)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	f7f5 fb44 	bl	8004058 <_isatty>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d102      	bne.n	800e9da <_isatty_r+0x1a>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	b103      	cbz	r3, 800e9da <_isatty_r+0x1a>
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	bd38      	pop	{r3, r4, r5, pc}
 800e9dc:	20005438 	.word	0x20005438

0800e9e0 <_raise_r>:
 800e9e0:	291f      	cmp	r1, #31
 800e9e2:	b538      	push	{r3, r4, r5, lr}
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	d904      	bls.n	800e9f4 <_raise_r+0x14>
 800e9ea:	2316      	movs	r3, #22
 800e9ec:	6003      	str	r3, [r0, #0]
 800e9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}
 800e9f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9f6:	b112      	cbz	r2, 800e9fe <_raise_r+0x1e>
 800e9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9fc:	b94b      	cbnz	r3, 800ea12 <_raise_r+0x32>
 800e9fe:	4628      	mov	r0, r5
 800ea00:	f000 f830 	bl	800ea64 <_getpid_r>
 800ea04:	4622      	mov	r2, r4
 800ea06:	4601      	mov	r1, r0
 800ea08:	4628      	mov	r0, r5
 800ea0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea0e:	f000 b817 	b.w	800ea40 <_kill_r>
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d00a      	beq.n	800ea2c <_raise_r+0x4c>
 800ea16:	1c59      	adds	r1, r3, #1
 800ea18:	d103      	bne.n	800ea22 <_raise_r+0x42>
 800ea1a:	2316      	movs	r3, #22
 800ea1c:	6003      	str	r3, [r0, #0]
 800ea1e:	2001      	movs	r0, #1
 800ea20:	e7e7      	b.n	800e9f2 <_raise_r+0x12>
 800ea22:	2100      	movs	r1, #0
 800ea24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea28:	4620      	mov	r0, r4
 800ea2a:	4798      	blx	r3
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	e7e0      	b.n	800e9f2 <_raise_r+0x12>

0800ea30 <raise>:
 800ea30:	4b02      	ldr	r3, [pc, #8]	@ (800ea3c <raise+0xc>)
 800ea32:	4601      	mov	r1, r0
 800ea34:	6818      	ldr	r0, [r3, #0]
 800ea36:	f7ff bfd3 	b.w	800e9e0 <_raise_r>
 800ea3a:	bf00      	nop
 800ea3c:	20000044 	.word	0x20000044

0800ea40 <_kill_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d07      	ldr	r5, [pc, #28]	@ (800ea60 <_kill_r+0x20>)
 800ea44:	2300      	movs	r3, #0
 800ea46:	4604      	mov	r4, r0
 800ea48:	4608      	mov	r0, r1
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	602b      	str	r3, [r5, #0]
 800ea4e:	f7f5 fa93 	bl	8003f78 <_kill>
 800ea52:	1c43      	adds	r3, r0, #1
 800ea54:	d102      	bne.n	800ea5c <_kill_r+0x1c>
 800ea56:	682b      	ldr	r3, [r5, #0]
 800ea58:	b103      	cbz	r3, 800ea5c <_kill_r+0x1c>
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	bd38      	pop	{r3, r4, r5, pc}
 800ea5e:	bf00      	nop
 800ea60:	20005438 	.word	0x20005438

0800ea64 <_getpid_r>:
 800ea64:	f7f5 ba80 	b.w	8003f68 <_getpid>

0800ea68 <fmodf>:
 800ea68:	b508      	push	{r3, lr}
 800ea6a:	ed2d 8b02 	vpush	{d8}
 800ea6e:	eef0 8a40 	vmov.f32	s17, s0
 800ea72:	eeb0 8a60 	vmov.f32	s16, s1
 800ea76:	f000 f817 	bl	800eaa8 <__ieee754_fmodf>
 800ea7a:	eef4 8a48 	vcmp.f32	s17, s16
 800ea7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea82:	d60c      	bvs.n	800ea9e <fmodf+0x36>
 800ea84:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800eaa4 <fmodf+0x3c>
 800ea88:	eeb4 8a68 	vcmp.f32	s16, s17
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	d105      	bne.n	800ea9e <fmodf+0x36>
 800ea92:	f7fd fee7 	bl	800c864 <__errno>
 800ea96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ea9a:	2321      	movs	r3, #33	@ 0x21
 800ea9c:	6003      	str	r3, [r0, #0]
 800ea9e:	ecbd 8b02 	vpop	{d8}
 800eaa2:	bd08      	pop	{r3, pc}
 800eaa4:	00000000 	.word	0x00000000

0800eaa8 <__ieee754_fmodf>:
 800eaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaaa:	ee10 5a90 	vmov	r5, s1
 800eaae:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800eab2:	1e43      	subs	r3, r0, #1
 800eab4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eab8:	d206      	bcs.n	800eac8 <__ieee754_fmodf+0x20>
 800eaba:	ee10 3a10 	vmov	r3, s0
 800eabe:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800eac2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800eac6:	d304      	bcc.n	800ead2 <__ieee754_fmodf+0x2a>
 800eac8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800eacc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800ead0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead2:	4286      	cmp	r6, r0
 800ead4:	dbfc      	blt.n	800ead0 <__ieee754_fmodf+0x28>
 800ead6:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800eada:	d105      	bne.n	800eae8 <__ieee754_fmodf+0x40>
 800eadc:	4b32      	ldr	r3, [pc, #200]	@ (800eba8 <__ieee754_fmodf+0x100>)
 800eade:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800eae2:	ed93 0a00 	vldr	s0, [r3]
 800eae6:	e7f3      	b.n	800ead0 <__ieee754_fmodf+0x28>
 800eae8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800eaec:	d140      	bne.n	800eb70 <__ieee754_fmodf+0xc8>
 800eaee:	0232      	lsls	r2, r6, #8
 800eaf0:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800eaf4:	2a00      	cmp	r2, #0
 800eaf6:	dc38      	bgt.n	800eb6a <__ieee754_fmodf+0xc2>
 800eaf8:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800eafc:	d13e      	bne.n	800eb7c <__ieee754_fmodf+0xd4>
 800eafe:	0207      	lsls	r7, r0, #8
 800eb00:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800eb04:	2f00      	cmp	r7, #0
 800eb06:	da36      	bge.n	800eb76 <__ieee754_fmodf+0xce>
 800eb08:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800eb0c:	bfb9      	ittee	lt
 800eb0e:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800eb12:	1a5b      	sublt	r3, r3, r1
 800eb14:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800eb18:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800eb1c:	bfb8      	it	lt
 800eb1e:	fa06 f303 	lsllt.w	r3, r6, r3
 800eb22:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800eb26:	bfb5      	itete	lt
 800eb28:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800eb2c:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800eb30:	1aad      	sublt	r5, r5, r2
 800eb32:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800eb36:	bfb8      	it	lt
 800eb38:	40a8      	lsllt	r0, r5
 800eb3a:	1a89      	subs	r1, r1, r2
 800eb3c:	1a1d      	subs	r5, r3, r0
 800eb3e:	bb01      	cbnz	r1, 800eb82 <__ieee754_fmodf+0xda>
 800eb40:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800eb44:	bf38      	it	cc
 800eb46:	462b      	movcc	r3, r5
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d0c7      	beq.n	800eadc <__ieee754_fmodf+0x34>
 800eb4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb50:	db1f      	blt.n	800eb92 <__ieee754_fmodf+0xea>
 800eb52:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800eb56:	db1f      	blt.n	800eb98 <__ieee754_fmodf+0xf0>
 800eb58:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800eb5c:	327f      	adds	r2, #127	@ 0x7f
 800eb5e:	4323      	orrs	r3, r4
 800eb60:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800eb64:	ee00 3a10 	vmov	s0, r3
 800eb68:	e7b2      	b.n	800ead0 <__ieee754_fmodf+0x28>
 800eb6a:	3901      	subs	r1, #1
 800eb6c:	0052      	lsls	r2, r2, #1
 800eb6e:	e7c1      	b.n	800eaf4 <__ieee754_fmodf+0x4c>
 800eb70:	15f1      	asrs	r1, r6, #23
 800eb72:	397f      	subs	r1, #127	@ 0x7f
 800eb74:	e7c0      	b.n	800eaf8 <__ieee754_fmodf+0x50>
 800eb76:	3a01      	subs	r2, #1
 800eb78:	007f      	lsls	r7, r7, #1
 800eb7a:	e7c3      	b.n	800eb04 <__ieee754_fmodf+0x5c>
 800eb7c:	15c2      	asrs	r2, r0, #23
 800eb7e:	3a7f      	subs	r2, #127	@ 0x7f
 800eb80:	e7c2      	b.n	800eb08 <__ieee754_fmodf+0x60>
 800eb82:	2d00      	cmp	r5, #0
 800eb84:	da02      	bge.n	800eb8c <__ieee754_fmodf+0xe4>
 800eb86:	005b      	lsls	r3, r3, #1
 800eb88:	3901      	subs	r1, #1
 800eb8a:	e7d7      	b.n	800eb3c <__ieee754_fmodf+0x94>
 800eb8c:	d0a6      	beq.n	800eadc <__ieee754_fmodf+0x34>
 800eb8e:	006b      	lsls	r3, r5, #1
 800eb90:	e7fa      	b.n	800eb88 <__ieee754_fmodf+0xe0>
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	3a01      	subs	r2, #1
 800eb96:	e7d9      	b.n	800eb4c <__ieee754_fmodf+0xa4>
 800eb98:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800eb9c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800eba0:	3282      	adds	r2, #130	@ 0x82
 800eba2:	4113      	asrs	r3, r2
 800eba4:	4323      	orrs	r3, r4
 800eba6:	e7dd      	b.n	800eb64 <__ieee754_fmodf+0xbc>
 800eba8:	0800fba0 	.word	0x0800fba0

0800ebac <_init>:
 800ebac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebae:	bf00      	nop
 800ebb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebb2:	bc08      	pop	{r3}
 800ebb4:	469e      	mov	lr, r3
 800ebb6:	4770      	bx	lr

0800ebb8 <_fini>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	bf00      	nop
 800ebbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebbe:	bc08      	pop	{r3}
 800ebc0:	469e      	mov	lr, r3
 800ebc2:	4770      	bx	lr
